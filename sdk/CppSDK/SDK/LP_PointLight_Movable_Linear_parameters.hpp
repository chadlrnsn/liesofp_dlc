#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LP_PointLight_Movable_Linear

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function LP_PointLight_Movable_Linear.LP_PointLight_Movable_Linear_C.UserConstructionScript
// 0x0034 (0x0034 - 0x0000)
struct LP_PointLight_Movable_Linear_C_UserConstructionScript final
{
public:
	float                                         Temp_float_Variable;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EComponentMobility                            Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EComponentMobility                            Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EComponentMobility                            Temp_byte_Variable_2;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_4;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EComponentMobility                            Temp_byte_Variable_3;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_3;                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(LP_PointLight_Movable_Linear_C_UserConstructionScript) == 0x000004, "Wrong alignment on LP_PointLight_Movable_Linear_C_UserConstructionScript");
static_assert(sizeof(LP_PointLight_Movable_Linear_C_UserConstructionScript) == 0x000034, "Wrong size on LP_PointLight_Movable_Linear_C_UserConstructionScript");
static_assert(offsetof(LP_PointLight_Movable_Linear_C_UserConstructionScript, Temp_float_Variable) == 0x000000, "Member 'LP_PointLight_Movable_Linear_C_UserConstructionScript::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(LP_PointLight_Movable_Linear_C_UserConstructionScript, Temp_byte_Variable) == 0x000004, "Member 'LP_PointLight_Movable_Linear_C_UserConstructionScript::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(LP_PointLight_Movable_Linear_C_UserConstructionScript, Temp_byte_Variable_1) == 0x000005, "Member 'LP_PointLight_Movable_Linear_C_UserConstructionScript::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(LP_PointLight_Movable_Linear_C_UserConstructionScript, Temp_float_Variable_1) == 0x000008, "Member 'LP_PointLight_Movable_Linear_C_UserConstructionScript::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(LP_PointLight_Movable_Linear_C_UserConstructionScript, Temp_float_Variable_2) == 0x00000C, "Member 'LP_PointLight_Movable_Linear_C_UserConstructionScript::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(LP_PointLight_Movable_Linear_C_UserConstructionScript, Temp_float_Variable_3) == 0x000010, "Member 'LP_PointLight_Movable_Linear_C_UserConstructionScript::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(LP_PointLight_Movable_Linear_C_UserConstructionScript, Temp_byte_Variable_2) == 0x000014, "Member 'LP_PointLight_Movable_Linear_C_UserConstructionScript::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(LP_PointLight_Movable_Linear_C_UserConstructionScript, Temp_float_Variable_4) == 0x000018, "Member 'LP_PointLight_Movable_Linear_C_UserConstructionScript::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(LP_PointLight_Movable_Linear_C_UserConstructionScript, Temp_byte_Variable_3) == 0x00001C, "Member 'LP_PointLight_Movable_Linear_C_UserConstructionScript::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(LP_PointLight_Movable_Linear_C_UserConstructionScript, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'LP_PointLight_Movable_Linear_C_UserConstructionScript::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(LP_PointLight_Movable_Linear_C_UserConstructionScript, K2Node_Select_Default) == 0x000024, "Member 'LP_PointLight_Movable_Linear_C_UserConstructionScript::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(LP_PointLight_Movable_Linear_C_UserConstructionScript, K2Node_Select_Default_1) == 0x000028, "Member 'LP_PointLight_Movable_Linear_C_UserConstructionScript::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(LP_PointLight_Movable_Linear_C_UserConstructionScript, K2Node_Select_Default_2) == 0x00002C, "Member 'LP_PointLight_Movable_Linear_C_UserConstructionScript::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(LP_PointLight_Movable_Linear_C_UserConstructionScript, K2Node_Select_Default_3) == 0x000030, "Member 'LP_PointLight_Movable_Linear_C_UserConstructionScript::K2Node_Select_Default_3' has a wrong offset!");

}

