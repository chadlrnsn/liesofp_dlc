#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EasyParticle

#include "Basic.hpp"

#include "EasyParticle_classes.hpp"
#include "EasyParticle_parameters.hpp"


namespace SDK
{

// Function EasyParticle.EasyParticle.Play
// (Final, Native, Public, BlueprintCallable)

void UEasyParticle::Play()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EasyParticle", "Play");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EasyParticle.EasyParticle.SetPlayParticle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InPlayParticle                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEasyParticle::SetPlayParticle(bool InPlayParticle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EasyParticle", "SetPlayParticle");

	Params::EasyParticle_SetPlayParticle Parms{};

	Parms.InPlayParticle = InPlayParticle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EasyParticle.EasyParticle.Stop
// (Final, Native, Public, BlueprintCallable)

void UEasyParticle::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EasyParticle", "Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EasyParticle.EasyParticle.StopEmit
// (Final, Native, Public, BlueprintCallable)

void UEasyParticle::StopEmit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EasyParticle", "StopEmit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EasyParticle.EasyParticleComponent.CreateRuntimeComponent
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UEasyParticleComponentRuntime*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UEasyParticleComponentRuntime* UEasyParticleComponent::CreateRuntimeComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EasyParticleComponent", "CreateRuntimeComponent");

	Params::EasyParticleComponent_CreateRuntimeComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EasyParticle.EasyParticleComponent.GetPriority
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EComponentPriority                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EComponentPriority UEasyParticleComponent::GetPriority()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EasyParticleComponent", "GetPriority");

	Params::EasyParticleComponent_GetPriority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EasyParticle.EasyParticleComponent.GetTypeName
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UEasyParticleComponent::GetTypeName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EasyParticleComponent", "GetTypeName");

	Params::EasyParticleComponent_GetTypeName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EasyParticle.EasyParticleComponentRuntime.Init
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        AllottedGeometry                                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UEasyParticleComponentRuntime::Init(const struct FGeometry& AllottedGeometry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EasyParticleComponentRuntime", "Init");

	Params::EasyParticleComponentRuntime_Init Parms{};

	Parms.AllottedGeometry = std::move(AllottedGeometry);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EasyParticle.EasyParticleComponentRuntime.PostTick
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        AllottedGeometry                                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   InDeltaTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEasyParticleComponentRuntime::PostTick(const struct FGeometry& AllottedGeometry, const float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EasyParticleComponentRuntime", "PostTick");

	Params::EasyParticleComponentRuntime_PostTick Parms{};

	Parms.AllottedGeometry = std::move(AllottedGeometry);
	Parms.InDeltaTime = InDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EasyParticle.EasyParticleComponentRuntime.Reset
// (Native, Event, Public, BlueprintEvent)

void UEasyParticleComponentRuntime::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EasyParticleComponentRuntime", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EasyParticle.EasyParticleComponentRuntime.Tick
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        AllottedGeometry                                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   InDeltaTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEasyParticleComponentRuntime::Tick(const struct FGeometry& AllottedGeometry, const float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EasyParticleComponentRuntime", "Tick");

	Params::EasyParticleComponentRuntime_Tick Parms{};

	Parms.AllottedGeometry = std::move(AllottedGeometry);
	Parms.InDeltaTime = InDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

