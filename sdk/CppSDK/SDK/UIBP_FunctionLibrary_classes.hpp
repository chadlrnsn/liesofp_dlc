#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UIBP_FunctionLibrary

#include "Basic.hpp"

#include "ProjectP_structs.hpp"
#include "Engine_classes.hpp"
#include "ProjectPContentInfo_structs.hpp"
#include "UIEN_EquipSlotSize_structs.hpp"
#include "UIEN_WeaponPart_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass UIBP_FunctionLibrary.UIBP_FunctionLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UUIBP_FunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void GetMainWidget(class UObject* __WorldContext, class UUIW_Main_C** MainWidget);
	static void IsTestViewport(class UObject* __WorldContext, bool* IsTest);
	static void GetKeyName(const struct FKey& Key, class UObject* __WorldContext, class FName* KeyName);
	static void GetKeyIcon(const struct FKey& Key, class FName AlterKeyName, class UObject* __WorldContext, class UTexture2D** Icon);
	static void ReplaceKeyText(const class FText& OriginalText, class UObject* __WorldContext, class FText* EditText);
	static void PlayUISound(class FName RowName, class UObject* __WorldContext);
	static void GetMoveKeyboardString(class UObject* __WorldContext, class FString* String);
	static void PlayUIForceFeedback(class FName RowName, class UObject* __WorldContext);
	static void IntToRoman(int32 Int, class UObject* __WorldContext, class FString* String);
	static void SetDelayGetItemAlert(bool IsDelay, class UObject* __WorldContext);
	static void NavigateToPrevIndex(class UListView* ListView, bool IsRotation, class UObject* __WorldContext);
	static void NavigateToNextIndex(class UListView* ListView, bool IsRotation, class UObject* __WorldContext);
	static void SetScrollBoxOffset(class UScrollBox* ScrollBox, float Delta, class UObject* __WorldContext);
	static void GetStatDiff(ELSecondStat Stat, TArray<struct FLSecondStatDiffData>& Diff_List, class UObject* __WorldContext, bool* IsDiff, int32* Diff_Value);
	static void GetWeaponByname(class ULItem* LItem, EUIEN_WeaponPart WeaponPart, class UObject* __WorldContext, class FText* ItemName);
	static void GetWeaponPartByname(class ULItem* LItem, class UObject* __WorldContext, class FText* ItemName);
	static void SetWeaponNameTotal(EUIEN_WeaponPart WeaponPart, class ULItem* LItem, class UWidget* FirstWidget, class UTextBlock* FirstText, class UWidget* Divider, class UWidget* SecondWidget, class UTextBlock* SecondText, class UObject* __WorldContext);
	static void MakeValueText(int32 Value, int32 Divisor, int32 Decimal, class UObject* __WorldContext, class FText* Text);
	static void MakeWeaponStatText(class ULItem* LItem, ELSecondStat InStat, int32 Divisor, int32 Decimal, class UObject* __WorldContext, class FText* Text);
	static void MakeSlaveArmAttackText(class ULItem* SlaveArm, ELSecondStat InStat, int32 Diff, class UObject* __WorldContext, class FText* Text, int32* Value);
	static void MakeReinforceWeaponStatText(class ULItem* LItem, ELSecondStat InStat, bool HasBladeReinforce, ELStatCorrectChangeType HandleCorrection, int32 Divisor, int32 Decimal, class UObject* __WorldContext, class FText* Text, int32* Diff);
	static void MakeReinforceBladeStatText(class ULItem* LItem, ELSecondStat InStat, bool HasReinforceData, int32 Divisor, int32 Decimal, class UObject* __WorldContext, class FText* Text, int32* Diff);
	static void GetFirstStatInfo(class UObject* __WorldContext, TMap<ELFirstStat, struct FUIST_FirstStatInfo>* FirstStatInfo);
	static void GetFirstCategoryInfo(class UObject* __WorldContext, TMap<ELItemFirstCategory, struct FUIST_FirstCategoryInfo>* FirstCategoryInfo);
	static void SortFirstCategory(TArray<ELItemFirstCategory>& CategoryList, class UObject* __WorldContext, TArray<ELItemFirstCategory>* CategoryListResult);
	static void GetSecondCategoryLabel(ELItemSecondCategory SecondCategory, class UObject* __WorldContext, class FText* Label);
	static void GetSlaveArmElementDamage(const struct FItemSlaveArmInfoPtr& SlaveArmInfo, class UObject* __WorldContext, ELElementDamageType* DamageType, int32* Damage);
	static void GetHandleCorrectionGradeText(ELHandleCorrectResultGrade HandleCorrectionGrade, class UObject* __WorldContext, class FText* Text);
	static void GetWeaponCorrectionGrade(ELWeaponCorrectionPhysicalGrade WeaponCorrectionGrade, class UObject* __WorldContext, class FText* Text);
	static void GetScrollBarStyle(class UObject* __WorldContext, struct FScrollBarStyle* ScrollBarStyle);
	static void GetKeyStringFromActionName(class FName ActionName, bool IsGamePad, const class FString& PlatformName, class UObject* __WorldContext, class FString* KeyString);
	static void GetKeyStringFromAxisName(class FName AxisName, bool IsGamePad, const class FString& PlatformName, class UObject* __WorldContext, class FString* KeyString);
	static void GetInputActionInfo(class FName InputAction, class UObject* __WorldContext, class FText* Title, class FText* Desc, bool* IsEmpty);
	static void ArrayPop(TArray<class UObject*>& Array, class UClass* ItemClass, class UObject* Outer_0, class UObject* __WorldContext, class UObject** PopItemNullable, bool* IsInstantiated);
	static void Calculate_TileColumnCount(class UWidget* SlotAsCanvasSlotWidth, class UTileView* TileView, class UObject* __WorldContext, int32* ColumnCount);
	static void Calculate_ListEmptyFillCount(int32 ListDataLength, int32 ColumnCount, class UObject* __WorldContext, int32* FillColumnCount);
	static void CheckKeyToAction(const struct FKey& Key, class FName InputActionName, class UObject* __WorldContext, bool* IsHit);
	static void Check_Gear_Group(class ULItem* LItem, ELEquipSlotType Slot_Type, class UObject* __WorldContext, bool* IsSameGroup, ELEquipSlotType* SlotType);
	static void GetSelectedWidgetOnList(class UListView* ListView, class UObject* __WorldContext, bool* IsValid, class UWidget** Widget);
	static void GetValidArrayIndex(int32 Index_0, int32 Direction, int32 ArrayLength, class UObject* __WorldContext, int32* NewParam);
	static void Get_Culture_Arr_Text(TArray<class FString>& CultureCodeArr, class UObject* __WorldContext, TArray<class FText>* CultureArr);
	static void GetCultureDefaultIndex(class UObject* __WorldContext, int32* Index_0);
	static void SwitchEquipSlotSize(ELEquipSlotType EquipSlotType, class UObject* __WorldContext, EUIEN_EquipSlotSize* NewParam);
	static void GetPlatformDetail(class UObject* __WorldContext, bool* IsXboxPlatform);
	static void GetIconFableArtsType(ELActionCategory ActionCategory, class UObject* __WorldContext, TSoftObjectPtr<class UTexture2D>* Img);
	static void GetPlatformBranchText(class FName CodeName, class UObject* __WorldContext, class FText* Text);
	static void GetPlatformBranchTextSA(class FName CodeName, class UObject* __WorldContext, class FText* Text, bool* IsChanged);
	static void GetPlatformBranchTextInteraction(class FName CodeName, class UObject* __WorldContext, class FText* Text);

	void GetFocusedTorsionCoilName(class UObject* __WorldContext, class FName* TorsionCoilName);
	class FText GetSynergyNameWithNumber(int32 SynergyNumber, const class FText& SpecialBuffText, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UIBP_FunctionLibrary_C">();
	}
	static class UUIBP_FunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIBP_FunctionLibrary_C>();
	}
};
static_assert(alignof(UUIBP_FunctionLibrary_C) == 0x000008, "Wrong alignment on UUIBP_FunctionLibrary_C");
static_assert(sizeof(UUIBP_FunctionLibrary_C) == 0x000028, "Wrong size on UUIBP_FunctionLibrary_C");

}

