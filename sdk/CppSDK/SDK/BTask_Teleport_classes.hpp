#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTask_Teleport

#include "Basic.hpp"

#include "ProjectP_structs.hpp"
#include "ProjectP_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTask_Teleport.BTask_Teleport_C
// 0x0090 (0x0140 - 0x00B0)
class UBTask_Teleport_C final : public ULBTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	ELAITargetType                                Location_Target_Type;                              // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELAITargetType                                TargetType;                                        // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELAIDirectionType                             DirectionType;                                     // 0x00BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BB[0x1];                                       // 0x00BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinDistance;                                       // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDistance;                                       // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinAngel;                                          // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxAngle;                                          // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLAIObjective                          Objective;                                         // 0x00CC(0x0024)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FLAILocationSampler                    LocationSampler;                                   // 0x00F0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ProcessDelayTime;                                  // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDelayTime;                                      // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StepTime;                                          // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ProcessStep;                                       // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TeleportDestLocation;                              // 0x0130(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTask_Teleport(int32 EntryPoint);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void Start_Target_Nav_Invoke();
	void Stop_Target_Nav_Invoke();
	void ReceiveAbortAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTask_Teleport_C">();
	}
	static class UBTask_Teleport_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTask_Teleport_C>();
	}
};
static_assert(alignof(UBTask_Teleport_C) == 0x000008, "Wrong alignment on UBTask_Teleport_C");
static_assert(sizeof(UBTask_Teleport_C) == 0x000140, "Wrong size on UBTask_Teleport_C");
static_assert(offsetof(UBTask_Teleport_C, UberGraphFrame) == 0x0000B0, "Member 'UBTask_Teleport_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTask_Teleport_C, Location_Target_Type) == 0x0000B8, "Member 'UBTask_Teleport_C::Location_Target_Type' has a wrong offset!");
static_assert(offsetof(UBTask_Teleport_C, TargetType) == 0x0000B9, "Member 'UBTask_Teleport_C::TargetType' has a wrong offset!");
static_assert(offsetof(UBTask_Teleport_C, DirectionType) == 0x0000BA, "Member 'UBTask_Teleport_C::DirectionType' has a wrong offset!");
static_assert(offsetof(UBTask_Teleport_C, MinDistance) == 0x0000BC, "Member 'UBTask_Teleport_C::MinDistance' has a wrong offset!");
static_assert(offsetof(UBTask_Teleport_C, MaxDistance) == 0x0000C0, "Member 'UBTask_Teleport_C::MaxDistance' has a wrong offset!");
static_assert(offsetof(UBTask_Teleport_C, MinAngel) == 0x0000C4, "Member 'UBTask_Teleport_C::MinAngel' has a wrong offset!");
static_assert(offsetof(UBTask_Teleport_C, MaxAngle) == 0x0000C8, "Member 'UBTask_Teleport_C::MaxAngle' has a wrong offset!");
static_assert(offsetof(UBTask_Teleport_C, Objective) == 0x0000CC, "Member 'UBTask_Teleport_C::Objective' has a wrong offset!");
static_assert(offsetof(UBTask_Teleport_C, LocationSampler) == 0x0000F0, "Member 'UBTask_Teleport_C::LocationSampler' has a wrong offset!");
static_assert(offsetof(UBTask_Teleport_C, ProcessDelayTime) == 0x000120, "Member 'UBTask_Teleport_C::ProcessDelayTime' has a wrong offset!");
static_assert(offsetof(UBTask_Teleport_C, MaxDelayTime) == 0x000124, "Member 'UBTask_Teleport_C::MaxDelayTime' has a wrong offset!");
static_assert(offsetof(UBTask_Teleport_C, StepTime) == 0x000128, "Member 'UBTask_Teleport_C::StepTime' has a wrong offset!");
static_assert(offsetof(UBTask_Teleport_C, ProcessStep) == 0x00012C, "Member 'UBTask_Teleport_C::ProcessStep' has a wrong offset!");
static_assert(offsetof(UBTask_Teleport_C, TeleportDestLocation) == 0x000130, "Member 'UBTask_Teleport_C::TeleportDestLocation' has a wrong offset!");

}

