#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RedButterFly_Red

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ProjectP_structs.hpp"
#include "LNPCCharacterBP_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_RedButterFly_Red.BP_RedButterFly_Red_C
// 0x0100 (0x15C0 - 0x14C0)
class ABP_RedButterFly_Red_C final : public ALNPCCharacterBP_C
{
public:
	uint8                                         Pad_14B5[0x3];                                     // 0x14B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_RedButterFly_Red_C;              // 0x14B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ULCharacterBlockCapsuleComponent*       LCharacterBlockCapsule_HitRange;                   // 0x14C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ULRedButterFlySearchCollisionComponent* LRedButterFlySearchCollision;                      // 0x14C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_RedButterFly_Body_Particle_01_GDH;              // 0x14D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Is4WayHit_0;                                       // 0x14D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsFirstOverlapping;                                // 0x14D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSecondOverlapping;                               // 0x14DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14DB[0x1];                                     // 0x14DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ThirdDegree;                                       // 0x14DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RollbackToNormalDelay_Sec;                         // 0x14E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14E4[0x4];                                     // 0x14E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           RollbackToNormalDelay_TimerHandle;                 // 0x14E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Tracing;                                           // 0x14F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EnteringN2;                                        // 0x14F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14F2[0x2];                                     // 0x14F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SearchToTraceDistance;                             // 0x14F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLPlayerCameraData                     LPlayerCamera;                                     // 0x14F8(0x003C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	uint8                                         Pad_1534[0x4];                                     // 0x1534(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UShapeComponent*>                RedButterFlyFirstSearchCollision_InSpot;           // 0x1538(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TSet<class FString>                           FirstOverlepRefCount;                              // 0x1548(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          ReachedN2;                                         // 0x1598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1599[0x7];                                     // 0x1599(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLButterflyNPCGroupMember>      GroupMemberList;                                   // 0x15A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           DelayPlayTimer;                                    // 0x15B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Skill_Stealth_Tracing_Stop_Time;                   // 0x15B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_RedButterFly_Red(int32 EntryPoint);
	void DoPlayAfterWait();
	void DoPlay_RedButterfly(float StartDelay);
	void OnRespawnBP();
	void DeadCharacterBP();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void OnApplyRunningAbnormal(bool IsApply, class FName AbnormalCodeName);
	void OnPostDead();
	void DelayToBeNormalPC();
	void EndSecondOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void EndFirstOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BeginSecondOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BeginFisrtOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Do_Play(bool InStartPlay, bool IsPlayHideSkill);
	void On_End_Skill_For_Stop_Tracing(class AActor* Owner_0, const struct FMomentConditionCaptureInfo& CapturedInfo);
	bool IsPlaying_RedButterfly();
	void OnActiveGroupping_RedButterfly(class ALNPCSpot* InGrouppingPropVolume);
	void PostProcessDeactivate();

	void Get_Ghost_Skill_Code_Name(bool IsToGhost, class FName* Out) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_RedButterFly_Red_C">();
	}
	static class ABP_RedButterFly_Red_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_RedButterFly_Red_C>();
	}
};
static_assert(alignof(ABP_RedButterFly_Red_C) == 0x000010, "Wrong alignment on ABP_RedButterFly_Red_C");
static_assert(sizeof(ABP_RedButterFly_Red_C) == 0x0015C0, "Wrong size on ABP_RedButterFly_Red_C");
static_assert(offsetof(ABP_RedButterFly_Red_C, UberGraphFrame_BP_RedButterFly_Red_C) == 0x0014B8, "Member 'ABP_RedButterFly_Red_C::UberGraphFrame_BP_RedButterFly_Red_C' has a wrong offset!");
static_assert(offsetof(ABP_RedButterFly_Red_C, LCharacterBlockCapsule_HitRange) == 0x0014C0, "Member 'ABP_RedButterFly_Red_C::LCharacterBlockCapsule_HitRange' has a wrong offset!");
static_assert(offsetof(ABP_RedButterFly_Red_C, LRedButterFlySearchCollision) == 0x0014C8, "Member 'ABP_RedButterFly_Red_C::LRedButterFlySearchCollision' has a wrong offset!");
static_assert(offsetof(ABP_RedButterFly_Red_C, NS_RedButterFly_Body_Particle_01_GDH) == 0x0014D0, "Member 'ABP_RedButterFly_Red_C::NS_RedButterFly_Body_Particle_01_GDH' has a wrong offset!");
static_assert(offsetof(ABP_RedButterFly_Red_C, Is4WayHit_0) == 0x0014D8, "Member 'ABP_RedButterFly_Red_C::Is4WayHit_0' has a wrong offset!");
static_assert(offsetof(ABP_RedButterFly_Red_C, IsFirstOverlapping) == 0x0014D9, "Member 'ABP_RedButterFly_Red_C::IsFirstOverlapping' has a wrong offset!");
static_assert(offsetof(ABP_RedButterFly_Red_C, IsSecondOverlapping) == 0x0014DA, "Member 'ABP_RedButterFly_Red_C::IsSecondOverlapping' has a wrong offset!");
static_assert(offsetof(ABP_RedButterFly_Red_C, ThirdDegree) == 0x0014DC, "Member 'ABP_RedButterFly_Red_C::ThirdDegree' has a wrong offset!");
static_assert(offsetof(ABP_RedButterFly_Red_C, RollbackToNormalDelay_Sec) == 0x0014E0, "Member 'ABP_RedButterFly_Red_C::RollbackToNormalDelay_Sec' has a wrong offset!");
static_assert(offsetof(ABP_RedButterFly_Red_C, RollbackToNormalDelay_TimerHandle) == 0x0014E8, "Member 'ABP_RedButterFly_Red_C::RollbackToNormalDelay_TimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_RedButterFly_Red_C, Tracing) == 0x0014F0, "Member 'ABP_RedButterFly_Red_C::Tracing' has a wrong offset!");
static_assert(offsetof(ABP_RedButterFly_Red_C, EnteringN2) == 0x0014F1, "Member 'ABP_RedButterFly_Red_C::EnteringN2' has a wrong offset!");
static_assert(offsetof(ABP_RedButterFly_Red_C, SearchToTraceDistance) == 0x0014F4, "Member 'ABP_RedButterFly_Red_C::SearchToTraceDistance' has a wrong offset!");
static_assert(offsetof(ABP_RedButterFly_Red_C, LPlayerCamera) == 0x0014F8, "Member 'ABP_RedButterFly_Red_C::LPlayerCamera' has a wrong offset!");
static_assert(offsetof(ABP_RedButterFly_Red_C, RedButterFlyFirstSearchCollision_InSpot) == 0x001538, "Member 'ABP_RedButterFly_Red_C::RedButterFlyFirstSearchCollision_InSpot' has a wrong offset!");
static_assert(offsetof(ABP_RedButterFly_Red_C, FirstOverlepRefCount) == 0x001548, "Member 'ABP_RedButterFly_Red_C::FirstOverlepRefCount' has a wrong offset!");
static_assert(offsetof(ABP_RedButterFly_Red_C, ReachedN2) == 0x001598, "Member 'ABP_RedButterFly_Red_C::ReachedN2' has a wrong offset!");
static_assert(offsetof(ABP_RedButterFly_Red_C, GroupMemberList) == 0x0015A0, "Member 'ABP_RedButterFly_Red_C::GroupMemberList' has a wrong offset!");
static_assert(offsetof(ABP_RedButterFly_Red_C, DelayPlayTimer) == 0x0015B0, "Member 'ABP_RedButterFly_Red_C::DelayPlayTimer' has a wrong offset!");
static_assert(offsetof(ABP_RedButterFly_Red_C, Skill_Stealth_Tracing_Stop_Time) == 0x0015B8, "Member 'ABP_RedButterFly_Red_C::Skill_Stealth_Tracing_Stop_Time' has a wrong offset!");

}

