#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Action_FatalAttack_Multi_Test

#include "Basic.hpp"

#include "ProjectP_structs.hpp"
#include "ProjectP_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ProjectPContentInfo_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Action_FatalAttack_Multi_Test.BP_Action_FatalAttack_Multi_Test_C
// 0x0060 (0x02D0 - 0x0270)
class UBP_Action_FatalAttack_Multi_Test_C : public ULAction_MultiAnim
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0270(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_ActPayload_FatalAttack_C*           Cached_FatalPayload;                               // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ALCharacter*                            Cached_FatalVictim;                                // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Cached_FatalLocation;                              // 0x0288(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLGameObjectHandle                     Cached_Handle_RootMotionTranslationScale;          // 0x0294(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FTimerHandle                           OnSyncTimeTimerHandle;                             // 0x0298(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Option_SyncTime;                                   // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLGameObjectHandle                     ModifyRotateHandle;                                // 0x02A4(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FLGameObjectHandle                     ModifyMovementHandle;                              // 0x02A8(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	float                                         AttackerOffsetAngle;                               // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Cached_FatalRotation;                              // 0x02B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Fatal_Type_Add_Distance;                           // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Option_Time_BlockCancelMoveAndProcessCommand;      // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLGameObjectHandle                     Cached_Handle_ActionState_LockCancelMove;          // 0x02C4(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FLGameObjectHandle                     Cached_Handle_ActionState_LockProcessCommand;      // 0x02C8(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)

public:
	void ExecuteUbergraph_BP_Action_FatalAttack_Multi_Test(int32 EntryPoint);
	void FatalEnd_On();
	void OnSyncTime();
	void OnStop(class ULActBase* ReasonAction, class FName Reason);
	void OnStart();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Action_FatalAttack_Multi_Test_C">();
	}
	static class UBP_Action_FatalAttack_Multi_Test_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Action_FatalAttack_Multi_Test_C>();
	}
};
static_assert(alignof(UBP_Action_FatalAttack_Multi_Test_C) == 0x000008, "Wrong alignment on UBP_Action_FatalAttack_Multi_Test_C");
static_assert(sizeof(UBP_Action_FatalAttack_Multi_Test_C) == 0x0002D0, "Wrong size on UBP_Action_FatalAttack_Multi_Test_C");
static_assert(offsetof(UBP_Action_FatalAttack_Multi_Test_C, UberGraphFrame) == 0x000270, "Member 'UBP_Action_FatalAttack_Multi_Test_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_Action_FatalAttack_Multi_Test_C, Cached_FatalPayload) == 0x000278, "Member 'UBP_Action_FatalAttack_Multi_Test_C::Cached_FatalPayload' has a wrong offset!");
static_assert(offsetof(UBP_Action_FatalAttack_Multi_Test_C, Cached_FatalVictim) == 0x000280, "Member 'UBP_Action_FatalAttack_Multi_Test_C::Cached_FatalVictim' has a wrong offset!");
static_assert(offsetof(UBP_Action_FatalAttack_Multi_Test_C, Cached_FatalLocation) == 0x000288, "Member 'UBP_Action_FatalAttack_Multi_Test_C::Cached_FatalLocation' has a wrong offset!");
static_assert(offsetof(UBP_Action_FatalAttack_Multi_Test_C, Cached_Handle_RootMotionTranslationScale) == 0x000294, "Member 'UBP_Action_FatalAttack_Multi_Test_C::Cached_Handle_RootMotionTranslationScale' has a wrong offset!");
static_assert(offsetof(UBP_Action_FatalAttack_Multi_Test_C, OnSyncTimeTimerHandle) == 0x000298, "Member 'UBP_Action_FatalAttack_Multi_Test_C::OnSyncTimeTimerHandle' has a wrong offset!");
static_assert(offsetof(UBP_Action_FatalAttack_Multi_Test_C, Option_SyncTime) == 0x0002A0, "Member 'UBP_Action_FatalAttack_Multi_Test_C::Option_SyncTime' has a wrong offset!");
static_assert(offsetof(UBP_Action_FatalAttack_Multi_Test_C, ModifyRotateHandle) == 0x0002A4, "Member 'UBP_Action_FatalAttack_Multi_Test_C::ModifyRotateHandle' has a wrong offset!");
static_assert(offsetof(UBP_Action_FatalAttack_Multi_Test_C, ModifyMovementHandle) == 0x0002A8, "Member 'UBP_Action_FatalAttack_Multi_Test_C::ModifyMovementHandle' has a wrong offset!");
static_assert(offsetof(UBP_Action_FatalAttack_Multi_Test_C, AttackerOffsetAngle) == 0x0002AC, "Member 'UBP_Action_FatalAttack_Multi_Test_C::AttackerOffsetAngle' has a wrong offset!");
static_assert(offsetof(UBP_Action_FatalAttack_Multi_Test_C, Cached_FatalRotation) == 0x0002B0, "Member 'UBP_Action_FatalAttack_Multi_Test_C::Cached_FatalRotation' has a wrong offset!");
static_assert(offsetof(UBP_Action_FatalAttack_Multi_Test_C, Fatal_Type_Add_Distance) == 0x0002BC, "Member 'UBP_Action_FatalAttack_Multi_Test_C::Fatal_Type_Add_Distance' has a wrong offset!");
static_assert(offsetof(UBP_Action_FatalAttack_Multi_Test_C, Option_Time_BlockCancelMoveAndProcessCommand) == 0x0002C0, "Member 'UBP_Action_FatalAttack_Multi_Test_C::Option_Time_BlockCancelMoveAndProcessCommand' has a wrong offset!");
static_assert(offsetof(UBP_Action_FatalAttack_Multi_Test_C, Cached_Handle_ActionState_LockCancelMove) == 0x0002C4, "Member 'UBP_Action_FatalAttack_Multi_Test_C::Cached_Handle_ActionState_LockCancelMove' has a wrong offset!");
static_assert(offsetof(UBP_Action_FatalAttack_Multi_Test_C, Cached_Handle_ActionState_LockProcessCommand) == 0x0002C8, "Member 'UBP_Action_FatalAttack_Multi_Test_C::Cached_Handle_ActionState_LockProcessCommand' has a wrong offset!");

}

