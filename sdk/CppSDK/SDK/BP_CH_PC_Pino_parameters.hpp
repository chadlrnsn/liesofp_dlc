#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CH_PC_Pino

#include "Basic.hpp"

#include "ProjectPContentInfo_structs.hpp"
#include "BS_DisplacementShape_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ProjectP_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_CH_PC_Pino.BP_CH_PC_Pino_C.ExecuteUbergraph_BP_CH_PC_Pino
// 0x00D8 (0x00D8 - 0x0000)
struct BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULInteractSystem*                       CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InExp;                                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bFrenzyMode;                          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInstant;                             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_ItemID;                               // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsOn;                                 // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_SpawnSystemAttached_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ALStatRoomPCCharacter*                  CallFunc_GetStatRoomPC_ReturnValue;                // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DurationTime;                         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ELPhysicalSurfaceType                         K2Node_Event_InPhysicalSurface;                    // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_InLocation;                           // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InRainIntensity;                      // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsPCHit;                              // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6F[0x1];                                       // 0x006F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0076(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_77[0x1];                                       // 0x0077(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_SpawnSystemAttached_ReturnValue_1;        // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ALPCController*                         K2Node_DynamicCast_AsLPCController;                // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ELAudioListenerPositionType                   CallFunc_GetAudioListenerPositionType_ReturnValue; // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default;                             // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULActionSystem*                         CallFunc_GetGameInstanceSubsystem_ReturnValue_1;   // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x00B8(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_OnApplyNeedShrink_ReturnValue;            // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEyeColorChanged_ReturnValue;            // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEyeColorChanged_ReturnValue_1;          // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino) == 0x000008, "Wrong alignment on BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino");
static_assert(sizeof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino) == 0x0000D8, "Wrong size on BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, EntryPoint) == 0x000000, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000008, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_SelectFloat_ReturnValue) == 0x000014, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, K2Node_Event_DeltaSeconds) == 0x000018, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, K2Node_Event_InExp) == 0x00001C, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::K2Node_Event_InExp' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, K2Node_Event_bFrenzyMode) == 0x000020, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::K2Node_Event_bFrenzyMode' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, K2Node_Event_bInstant) == 0x000021, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::K2Node_Event_bInstant' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, K2Node_Event_ItemID) == 0x000024, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::K2Node_Event_ItemID' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, K2Node_Event_IsOn) == 0x00002C, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::K2Node_Event_IsOn' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_K2_AttachToComponent_ReturnValue) == 0x00002D, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00002E, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_SpawnSystemAttached_ReturnValue) == 0x000030, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_SpawnSystemAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000038, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_IsValid_ReturnValue_2) == 0x000044, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_GetStatRoomPC_ReturnValue) == 0x000048, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_GetStatRoomPC_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_IsValid_ReturnValue_3) == 0x000050, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_IsVisible_ReturnValue) == 0x000051, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, K2Node_Event_DurationTime) == 0x000054, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::K2Node_Event_DurationTime' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_IsActive_ReturnValue) == 0x000058, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_IsActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, K2Node_Event_InPhysicalSurface) == 0x000059, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::K2Node_Event_InPhysicalSurface' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, K2Node_Event_InLocation) == 0x00005C, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::K2Node_Event_InLocation' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, K2Node_Event_InRainIntensity) == 0x000068, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::K2Node_Event_InRainIntensity' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, K2Node_Event_IsPCHit) == 0x00006C, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::K2Node_Event_IsPCHit' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_BooleanOR_ReturnValue) == 0x00006D, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_IsValid_ReturnValue_4) == 0x00006E, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_MapRangeClamped_ReturnValue) == 0x000070, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_IsValid_ReturnValue_5) == 0x000074, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, Temp_bool_Variable) == 0x000075, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, K2Node_Event_EndPlayReason) == 0x000076, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_SpawnSystemAttached_ReturnValue_1) == 0x000078, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_SpawnSystemAttached_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_IsValid_ReturnValue_6) == 0x000080, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_GetController_ReturnValue) == 0x000088, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, K2Node_DynamicCast_AsLPCController) == 0x000090, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::K2Node_DynamicCast_AsLPCController' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, K2Node_DynamicCast_bSuccess) == 0x000098, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_GetAudioListenerPositionType_ReturnValue) == 0x000099, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_GetAudioListenerPositionType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, K2Node_Select_Default) == 0x00009C, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0000A8, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_GetGameInstanceSubsystem_ReturnValue_1) == 0x0000B0, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_GetGameInstanceSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, K2Node_CreateDelegate_OutputDelegate) == 0x0000B8, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_OnApplyNeedShrink_ReturnValue) == 0x0000C8, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_OnApplyNeedShrink_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_SelectFloat_ReturnValue_1) == 0x0000CC, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_IsEyeColorChanged_ReturnValue) == 0x0000D0, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_IsEyeColorChanged_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino, CallFunc_IsEyeColorChanged_ReturnValue_1) == 0x0000D1, "Member 'BP_CH_PC_Pino_C_ExecuteUbergraph_BP_CH_PC_Pino::CallFunc_IsEyeColorChanged_ReturnValue_1' has a wrong offset!");

// Function BP_CH_PC_Pino.BP_CH_PC_Pino_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_CH_PC_Pino_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CH_PC_Pino_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_CH_PC_Pino_C_ReceiveEndPlay");
static_assert(sizeof(BP_CH_PC_Pino_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_CH_PC_Pino_C_ReceiveEndPlay");
static_assert(offsetof(BP_CH_PC_Pino_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_CH_PC_Pino_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_CH_PC_Pino.BP_CH_PC_Pino_C.AttachRainHitSound
// 0x0018 (0x0018 - 0x0000)
struct BP_CH_PC_Pino_C_AttachRainHitSound final
{
public:
	ELPhysicalSurfaceType                         InPhysicalSurface;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InLocation;                                        // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InRainIntensity;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPCHit;                                           // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CH_PC_Pino_C_AttachRainHitSound) == 0x000004, "Wrong alignment on BP_CH_PC_Pino_C_AttachRainHitSound");
static_assert(sizeof(BP_CH_PC_Pino_C_AttachRainHitSound) == 0x000018, "Wrong size on BP_CH_PC_Pino_C_AttachRainHitSound");
static_assert(offsetof(BP_CH_PC_Pino_C_AttachRainHitSound, InPhysicalSurface) == 0x000000, "Member 'BP_CH_PC_Pino_C_AttachRainHitSound::InPhysicalSurface' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_AttachRainHitSound, InLocation) == 0x000004, "Member 'BP_CH_PC_Pino_C_AttachRainHitSound::InLocation' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_AttachRainHitSound, InRainIntensity) == 0x000010, "Member 'BP_CH_PC_Pino_C_AttachRainHitSound::InRainIntensity' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_AttachRainHitSound, IsPCHit) == 0x000014, "Member 'BP_CH_PC_Pino_C_AttachRainHitSound::IsPCHit' has a wrong offset!");

// Function BP_CH_PC_Pino.BP_CH_PC_Pino_C.OnAlertLamp
// 0x0004 (0x0004 - 0x0000)
struct BP_CH_PC_Pino_C_OnAlertLamp final
{
public:
	float                                         DurationTime;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CH_PC_Pino_C_OnAlertLamp) == 0x000004, "Wrong alignment on BP_CH_PC_Pino_C_OnAlertLamp");
static_assert(sizeof(BP_CH_PC_Pino_C_OnAlertLamp) == 0x000004, "Wrong size on BP_CH_PC_Pino_C_OnAlertLamp");
static_assert(offsetof(BP_CH_PC_Pino_C_OnAlertLamp, DurationTime) == 0x000000, "Member 'BP_CH_PC_Pino_C_OnAlertLamp::DurationTime' has a wrong offset!");

// Function BP_CH_PC_Pino.BP_CH_PC_Pino_C.OnUseItemBP
// 0x000C (0x000C - 0x0000)
struct BP_CH_PC_Pino_C_OnUseItemBP final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOn;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CH_PC_Pino_C_OnUseItemBP) == 0x000004, "Wrong alignment on BP_CH_PC_Pino_C_OnUseItemBP");
static_assert(sizeof(BP_CH_PC_Pino_C_OnUseItemBP) == 0x00000C, "Wrong size on BP_CH_PC_Pino_C_OnUseItemBP");
static_assert(offsetof(BP_CH_PC_Pino_C_OnUseItemBP, ItemId) == 0x000000, "Member 'BP_CH_PC_Pino_C_OnUseItemBP::ItemId' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_OnUseItemBP, IsOn) == 0x000008, "Member 'BP_CH_PC_Pino_C_OnUseItemBP::IsOn' has a wrong offset!");

// Function BP_CH_PC_Pino.BP_CH_PC_Pino_C.OnFrenzyModeMV
// 0x0002 (0x0002 - 0x0000)
struct BP_CH_PC_Pino_C_OnFrenzyModeMV final
{
public:
	bool                                          bFrenzyMode;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bInstant;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CH_PC_Pino_C_OnFrenzyModeMV) == 0x000001, "Wrong alignment on BP_CH_PC_Pino_C_OnFrenzyModeMV");
static_assert(sizeof(BP_CH_PC_Pino_C_OnFrenzyModeMV) == 0x000002, "Wrong size on BP_CH_PC_Pino_C_OnFrenzyModeMV");
static_assert(offsetof(BP_CH_PC_Pino_C_OnFrenzyModeMV, bFrenzyMode) == 0x000000, "Member 'BP_CH_PC_Pino_C_OnFrenzyModeMV::bFrenzyMode' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_OnFrenzyModeMV, bInstant) == 0x000001, "Member 'BP_CH_PC_Pino_C_OnFrenzyModeMV::bInstant' has a wrong offset!");

// Function BP_CH_PC_Pino.BP_CH_PC_Pino_C.OnGainExp
// 0x0004 (0x0004 - 0x0000)
struct BP_CH_PC_Pino_C_OnGainExp final
{
public:
	int32                                         InExp;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CH_PC_Pino_C_OnGainExp) == 0x000004, "Wrong alignment on BP_CH_PC_Pino_C_OnGainExp");
static_assert(sizeof(BP_CH_PC_Pino_C_OnGainExp) == 0x000004, "Wrong size on BP_CH_PC_Pino_C_OnGainExp");
static_assert(offsetof(BP_CH_PC_Pino_C_OnGainExp, InExp) == 0x000000, "Member 'BP_CH_PC_Pino_C_OnGainExp::InExp' has a wrong offset!");

// Function BP_CH_PC_Pino.BP_CH_PC_Pino_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_CH_PC_Pino_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CH_PC_Pino_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_CH_PC_Pino_C_ReceiveTick");
static_assert(sizeof(BP_CH_PC_Pino_C_ReceiveTick) == 0x000004, "Wrong size on BP_CH_PC_Pino_C_ReceiveTick");
static_assert(offsetof(BP_CH_PC_Pino_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_CH_PC_Pino_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_CH_PC_Pino.BP_CH_PC_Pino_C.UserConstructionScript
// 0x0004 (0x0004 - 0x0000)
struct BP_CH_PC_Pino_C_UserConstructionScript final
{
public:
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CH_PC_Pino_C_UserConstructionScript) == 0x000004, "Wrong alignment on BP_CH_PC_Pino_C_UserConstructionScript");
static_assert(sizeof(BP_CH_PC_Pino_C_UserConstructionScript) == 0x000004, "Wrong size on BP_CH_PC_Pino_C_UserConstructionScript");
static_assert(offsetof(BP_CH_PC_Pino_C_UserConstructionScript, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000000, "Member 'BP_CH_PC_Pino_C_UserConstructionScript::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");

// Function BP_CH_PC_Pino.BP_CH_PC_Pino_C.IK_Trace
// 0x0250 (0x0250 - 0x0000)
struct BP_CH_PC_Pino_C_IK_Trace final
{
public:
	float                                         TraceDistance;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SocketName;                                        // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FootSize;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Moving;                                            // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Offest;                                            // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Impact;                                            // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          BlockHitBool;                                      // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Socket;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0040(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0070(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_BoxTraceSingle_OutHit;                    // 0x0108(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BoxTraceSingle_ReturnValue;               // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0192(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_193[0x1];                                      // 0x0193(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0220(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAtan2_ReturnValue;                     // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_NormalizeToRange_ReturnValue;             // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0240(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CH_PC_Pino_C_IK_Trace) == 0x000010, "Wrong alignment on BP_CH_PC_Pino_C_IK_Trace");
static_assert(sizeof(BP_CH_PC_Pino_C_IK_Trace) == 0x000250, "Wrong size on BP_CH_PC_Pino_C_IK_Trace");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, TraceDistance) == 0x000000, "Member 'BP_CH_PC_Pino_C_IK_Trace::TraceDistance' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, SocketName) == 0x000004, "Member 'BP_CH_PC_Pino_C_IK_Trace::SocketName' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, FootSize) == 0x00000C, "Member 'BP_CH_PC_Pino_C_IK_Trace::FootSize' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, Moving) == 0x000018, "Member 'BP_CH_PC_Pino_C_IK_Trace::Moving' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, Offest) == 0x00001C, "Member 'BP_CH_PC_Pino_C_IK_Trace::Offest' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, Impact) == 0x000020, "Member 'BP_CH_PC_Pino_C_IK_Trace::Impact' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, BlockHitBool) == 0x00002C, "Member 'BP_CH_PC_Pino_C_IK_Trace::BlockHitBool' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, Socket) == 0x000030, "Member 'BP_CH_PC_Pino_C_IK_Trace::Socket' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, Distance) == 0x000038, "Member 'BP_CH_PC_Pino_C_IK_Trace::Distance' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, Temp_object_Variable) == 0x000040, "Member 'BP_CH_PC_Pino_C_IK_Trace::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000050, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakVector_X) == 0x00005C, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakVector_Y) == 0x000060, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakVector_Z) == 0x000064, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_Add_FloatFloat_ReturnValue) == 0x000068, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_GetSocketTransform_ReturnValue) == 0x000070, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000A0, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakTransform_Location) == 0x0000A4, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakTransform_Rotation) == 0x0000B0, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakTransform_Scale) == 0x0000BC, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0000C8, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakRotator_Roll) == 0x0000CC, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakRotator_Pitch) == 0x0000D0, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakRotator_Yaw) == 0x0000D4, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakVector_X_1) == 0x0000D8, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakVector_Y_1) == 0x0000DC, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakVector_Z_1) == 0x0000E0, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_MakeRotator_ReturnValue) == 0x0000E4, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_MakeVector_ReturnValue) == 0x0000F0, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_MakeVector_ReturnValue_1) == 0x0000FC, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BoxTraceSingle_OutHit) == 0x000108, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BoxTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BoxTraceSingle_ReturnValue) == 0x000190, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BoxTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakHitResult_bBlockingHit) == 0x000191, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakHitResult_bInitialOverlap) == 0x000192, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakHitResult_Time) == 0x000194, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakHitResult_Distance) == 0x000198, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakHitResult_Location) == 0x00019C, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakHitResult_ImpactPoint) == 0x0001A8, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakHitResult_Normal) == 0x0001B4, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakHitResult_ImpactNormal) == 0x0001C0, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakHitResult_PhysMat) == 0x0001D0, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakHitResult_HitActor) == 0x0001D8, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakHitResult_HitComponent) == 0x0001E0, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakHitResult_HitBoneName) == 0x0001E8, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakHitResult_HitItem) == 0x0001F0, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakHitResult_ElementIndex) == 0x0001F4, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakHitResult_FaceIndex) == 0x0001F8, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakHitResult_TraceStart) == 0x0001FC, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakHitResult_TraceEnd) == 0x000208, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakVector_X_2) == 0x000214, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakVector_Y_2) == 0x000218, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_BreakVector_Z_2) == 0x00021C, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000220, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_DegAtan2_ReturnValue) == 0x00022C, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_DegAtan2_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_VSize_ReturnValue) == 0x000230, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000234, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x000238, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_NormalizeToRange_ReturnValue) == 0x00023C, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_NormalizeToRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Trace, CallFunc_MakeRotator_ReturnValue_1) == 0x000240, "Member 'BP_CH_PC_Pino_C_IK_Trace::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");

// Function BP_CH_PC_Pino.BP_CH_PC_Pino_C.IK_UpdateFootOffset 
// 0x0018 (0x0018 - 0x0000)
struct BP_CH_PC_Pino_C_IK_UpdateFootOffset_ final
{
public:
	float                                         TargetValue;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EffectorVar;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterpSpeed;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EffectorValue;                                     // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Target;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_Constant_ReturnValue;           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CH_PC_Pino_C_IK_UpdateFootOffset_) == 0x000004, "Wrong alignment on BP_CH_PC_Pino_C_IK_UpdateFootOffset_");
static_assert(sizeof(BP_CH_PC_Pino_C_IK_UpdateFootOffset_) == 0x000018, "Wrong size on BP_CH_PC_Pino_C_IK_UpdateFootOffset_");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateFootOffset_, TargetValue) == 0x000000, "Member 'BP_CH_PC_Pino_C_IK_UpdateFootOffset_::TargetValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateFootOffset_, EffectorVar) == 0x000004, "Member 'BP_CH_PC_Pino_C_IK_UpdateFootOffset_::EffectorVar' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateFootOffset_, InterpSpeed) == 0x000008, "Member 'BP_CH_PC_Pino_C_IK_UpdateFootOffset_::InterpSpeed' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateFootOffset_, EffectorValue) == 0x00000C, "Member 'BP_CH_PC_Pino_C_IK_UpdateFootOffset_::EffectorValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateFootOffset_, Target) == 0x000010, "Member 'BP_CH_PC_Pino_C_IK_UpdateFootOffset_::Target' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateFootOffset_, CallFunc_FInterpTo_Constant_ReturnValue) == 0x000014, "Member 'BP_CH_PC_Pino_C_IK_UpdateFootOffset_::CallFunc_FInterpTo_Constant_ReturnValue' has a wrong offset!");

// Function BP_CH_PC_Pino.BP_CH_PC_Pino_C.IK_UpdateFootRotation
// 0x0040 (0x0040 - 0x0000)
struct BP_CH_PC_Pino_C_IK_UpdateFootRotation final
{
public:
	struct FRotator                               TargetValue;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               RotationVar;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	float                                         InterpSpeed;                                       // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotatorValue;                                      // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               Target;                                            // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CH_PC_Pino_C_IK_UpdateFootRotation) == 0x000004, "Wrong alignment on BP_CH_PC_Pino_C_IK_UpdateFootRotation");
static_assert(sizeof(BP_CH_PC_Pino_C_IK_UpdateFootRotation) == 0x000040, "Wrong size on BP_CH_PC_Pino_C_IK_UpdateFootRotation");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateFootRotation, TargetValue) == 0x000000, "Member 'BP_CH_PC_Pino_C_IK_UpdateFootRotation::TargetValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateFootRotation, RotationVar) == 0x00000C, "Member 'BP_CH_PC_Pino_C_IK_UpdateFootRotation::RotationVar' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateFootRotation, InterpSpeed) == 0x000018, "Member 'BP_CH_PC_Pino_C_IK_UpdateFootRotation::InterpSpeed' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateFootRotation, RotatorValue) == 0x00001C, "Member 'BP_CH_PC_Pino_C_IK_UpdateFootRotation::RotatorValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateFootRotation, Target) == 0x000028, "Member 'BP_CH_PC_Pino_C_IK_UpdateFootRotation::Target' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateFootRotation, CallFunc_RInterpTo_ReturnValue) == 0x000034, "Member 'BP_CH_PC_Pino_C_IK_UpdateFootRotation::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");

// Function BP_CH_PC_Pino.BP_CH_PC_Pino_C.IK_UpdateCapsuleHalfHeight
// 0x0150 (0x0150 - 0x0000)
struct BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight final
{
public:
	float                                         HipsShifts;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Reset_Default;                                     // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnHipsOffset;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_Constant_ReturnValue;           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0038(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C2[0x2];                                       // 0x00C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0110(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight) == 0x000008, "Wrong alignment on BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight");
static_assert(sizeof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight) == 0x000150, "Wrong size on BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, HipsShifts) == 0x000000, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::HipsShifts' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, Reset_Default) == 0x000004, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::Reset_Default' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, ReturnHipsOffset) == 0x000008, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::ReturnHipsOffset' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_Abs_ReturnValue) == 0x00000C, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_SelectFloat_ReturnValue) == 0x000014, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_BreakVector_X) == 0x000018, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_BreakVector_Y) == 0x00001C, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_BreakVector_Z) == 0x000020, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_FInterpTo_Constant_ReturnValue) == 0x000028, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_FInterpTo_Constant_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_MakeVector_ReturnValue) == 0x00002C, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000038, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_BreakHitResult_bBlockingHit) == 0x0000C0, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000C1, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_BreakHitResult_Time) == 0x0000C4, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_BreakHitResult_Distance) == 0x0000C8, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_BreakHitResult_Location) == 0x0000CC, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_BreakHitResult_ImpactPoint) == 0x0000D8, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_BreakHitResult_Normal) == 0x0000E4, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_BreakHitResult_ImpactNormal) == 0x0000F0, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_BreakHitResult_PhysMat) == 0x000100, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_BreakHitResult_HitActor) == 0x000108, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_BreakHitResult_HitComponent) == 0x000110, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_BreakHitResult_HitBoneName) == 0x000118, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_BreakHitResult_HitItem) == 0x000120, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_BreakHitResult_ElementIndex) == 0x000124, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_BreakHitResult_FaceIndex) == 0x000128, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_BreakHitResult_TraceStart) == 0x00012C, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_BreakHitResult_TraceEnd) == 0x000138, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_BreakVector_X_1) == 0x000144, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_BreakVector_Y_1) == 0x000148, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight, CallFunc_BreakVector_Z_1) == 0x00014C, "Member 'BP_CH_PC_Pino_C_IK_UpdateCapsuleHalfHeight::CallFunc_BreakVector_Z_1' has a wrong offset!");

// Function BP_CH_PC_Pino.BP_CH_PC_Pino_C.IK_AllUpdate
// 0x00E8 (0x00E8 - 0x0000)
struct BP_CH_PC_Pino_C_IK_AllUpdate final
{
public:
	float                                         InterpSpeed;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Moving;                                            // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnLeftOffset;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnRightOffset;                                 // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ReturnLeftRotator;                                 // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ReturnRightRotator;                                // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         ReturnHipsOffset;                                  // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HipsOffset;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               FootRotator_Right;                                 // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               FootRotator_Left;                                  // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FootOffset_Right;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FootOffset_Left;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IK_Trace_Offest;                          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_IK_Trace_Impact;                          // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IK_Trace_BlockHitBool;                    // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IK_Trace_Offest_1;                        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_IK_Trace_Impact_1;                        // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IK_Trace_BlockHitBool_1;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_IK_UpdateFootRotation_RotatorValue;       // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_IK_UpdateFootRotation_RotatorValue_1;     // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_2;                // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_3;                // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_4;                // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IK_UpdateFootOffset__EffectorValue;       // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IK_UpdateFootOffset__EffectorValue_1;     // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IK_UpdateFootOffset__EffectorValue_2;     // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_1;                  // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_2;                  // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CH_PC_Pino_C_IK_AllUpdate) == 0x000004, "Wrong alignment on BP_CH_PC_Pino_C_IK_AllUpdate");
static_assert(sizeof(BP_CH_PC_Pino_C_IK_AllUpdate) == 0x0000E8, "Wrong size on BP_CH_PC_Pino_C_IK_AllUpdate");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, InterpSpeed) == 0x000000, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::InterpSpeed' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, Moving) == 0x000004, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::Moving' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, ReturnLeftOffset) == 0x000008, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::ReturnLeftOffset' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, ReturnRightOffset) == 0x00000C, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::ReturnRightOffset' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, ReturnLeftRotator) == 0x000010, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::ReturnLeftRotator' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, ReturnRightRotator) == 0x00001C, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::ReturnRightRotator' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, ReturnHipsOffset) == 0x000028, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::ReturnHipsOffset' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, HipsOffset) == 0x00002C, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::HipsOffset' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, FootRotator_Right) == 0x000030, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::FootRotator_Right' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, FootRotator_Left) == 0x00003C, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::FootRotator_Left' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, FootOffset_Right) == 0x000048, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::FootOffset_Right' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, FootOffset_Left) == 0x00004C, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::FootOffset_Left' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_FMin_ReturnValue) == 0x000050, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_Less_FloatFloat_ReturnValue) == 0x000054, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_SelectFloat_ReturnValue) == 0x000058, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_IK_Trace_Offest) == 0x00005C, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_IK_Trace_Offest' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_IK_Trace_Impact) == 0x000060, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_IK_Trace_Impact' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_IK_Trace_BlockHitBool) == 0x00006C, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_IK_Trace_BlockHitBool' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_IK_Trace_Offest_1) == 0x000070, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_IK_Trace_Offest_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_IK_Trace_Impact_1) == 0x000074, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_IK_Trace_Impact_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_IK_Trace_BlockHitBool_1) == 0x000080, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_IK_Trace_BlockHitBool_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_IK_UpdateFootRotation_RotatorValue) == 0x000084, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_IK_UpdateFootRotation_RotatorValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_BooleanAND_ReturnValue) == 0x000090, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_IK_UpdateFootRotation_RotatorValue_1) == 0x000094, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_IK_UpdateFootRotation_RotatorValue_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0000A0, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x0000A1, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_SelectFloat_ReturnValue_1) == 0x0000A4, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_SelectFloat_ReturnValue_2) == 0x0000A8, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000AC, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0000B0, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_SelectFloat_ReturnValue_3) == 0x0000B4, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_SelectFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_SelectFloat_ReturnValue_4) == 0x0000B8, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_SelectFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000BC, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000C0, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_IK_UpdateFootOffset__EffectorValue) == 0x0000C4, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_IK_UpdateFootOffset__EffectorValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_IK_UpdateFootOffset__EffectorValue_1) == 0x0000C8, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_IK_UpdateFootOffset__EffectorValue_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0000CC, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x0000D0, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_IK_UpdateFootOffset__EffectorValue_2) == 0x0000D4, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_IK_UpdateFootOffset__EffectorValue_2' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_FInterpTo_ReturnValue) == 0x0000D8, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000DC, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_FInterpTo_ReturnValue_1) == 0x0000E0, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_AllUpdate, CallFunc_FInterpTo_ReturnValue_2) == 0x0000E4, "Member 'BP_CH_PC_Pino_C_IK_AllUpdate::CallFunc_FInterpTo_ReturnValue_2' has a wrong offset!");

// Function BP_CH_PC_Pino.BP_CH_PC_Pino_C.IK_Reset
// 0x0028 (0x0028 - 0x0000)
struct BP_CH_PC_Pino_C_IK_Reset final
{
public:
	float                                         ReturnLeftOffset;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnRightOffset;                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ReturnLeftRotator;                                 // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ReturnRightRotator;                                // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         ReturnHipsOffset;                                  // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FootOffset_Left;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CH_PC_Pino_C_IK_Reset) == 0x000004, "Wrong alignment on BP_CH_PC_Pino_C_IK_Reset");
static_assert(sizeof(BP_CH_PC_Pino_C_IK_Reset) == 0x000028, "Wrong size on BP_CH_PC_Pino_C_IK_Reset");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Reset, ReturnLeftOffset) == 0x000000, "Member 'BP_CH_PC_Pino_C_IK_Reset::ReturnLeftOffset' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Reset, ReturnRightOffset) == 0x000004, "Member 'BP_CH_PC_Pino_C_IK_Reset::ReturnRightOffset' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Reset, ReturnLeftRotator) == 0x000008, "Member 'BP_CH_PC_Pino_C_IK_Reset::ReturnLeftRotator' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Reset, ReturnRightRotator) == 0x000014, "Member 'BP_CH_PC_Pino_C_IK_Reset::ReturnRightRotator' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Reset, ReturnHipsOffset) == 0x000020, "Member 'BP_CH_PC_Pino_C_IK_Reset::ReturnHipsOffset' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_IK_Reset, FootOffset_Left) == 0x000024, "Member 'BP_CH_PC_Pino_C_IK_Reset::FootOffset_Left' has a wrong offset!");

// Function BP_CH_PC_Pino.BP_CH_PC_Pino_C.On PCLamp
// 0x0070 (0x0070 - 0x0000)
struct BP_CH_PC_Pino_C_On_PCLamp final
{
public:
	int32                                         InDepth;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InMaxDistance;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InDistance;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InDegree;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_1;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_2;            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_2;                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_3;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_3;                     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue_1;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_2;                // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CH_PC_Pino_C_On_PCLamp) == 0x000004, "Wrong alignment on BP_CH_PC_Pino_C_On_PCLamp");
static_assert(sizeof(BP_CH_PC_Pino_C_On_PCLamp) == 0x000070, "Wrong size on BP_CH_PC_Pino_C_On_PCLamp");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, InDepth) == 0x000000, "Member 'BP_CH_PC_Pino_C_On_PCLamp::InDepth' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, InMaxDistance) == 0x000004, "Member 'BP_CH_PC_Pino_C_On_PCLamp::InMaxDistance' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, InDistance) == 0x000008, "Member 'BP_CH_PC_Pino_C_On_PCLamp::InDistance' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, InDegree) == 0x00000C, "Member 'BP_CH_PC_Pino_C_On_PCLamp::InDegree' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, Temp_float_Variable) == 0x000010, "Member 'BP_CH_PC_Pino_C_On_PCLamp::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, CallFunc_MapRangeClamped_ReturnValue) == 0x000014, "Member 'BP_CH_PC_Pino_C_On_PCLamp::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, CallFunc_FTrunc_ReturnValue) == 0x000018, "Member 'BP_CH_PC_Pino_C_On_PCLamp::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, CallFunc_MapRangeClamped_ReturnValue_1) == 0x00001C, "Member 'BP_CH_PC_Pino_C_On_PCLamp::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000020, "Member 'BP_CH_PC_Pino_C_On_PCLamp::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, CallFunc_FTrunc_ReturnValue_1) == 0x000024, "Member 'BP_CH_PC_Pino_C_On_PCLamp::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000028, "Member 'BP_CH_PC_Pino_C_On_PCLamp::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00002C, "Member 'BP_CH_PC_Pino_C_On_PCLamp::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, Temp_int_Variable) == 0x000030, "Member 'BP_CH_PC_Pino_C_On_PCLamp::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, CallFunc_SelectFloat_ReturnValue) == 0x000034, "Member 'BP_CH_PC_Pino_C_On_PCLamp::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, CallFunc_SelectFloat_ReturnValue_1) == 0x000038, "Member 'BP_CH_PC_Pino_C_On_PCLamp::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, Temp_float_Variable_1) == 0x00003C, "Member 'BP_CH_PC_Pino_C_On_PCLamp::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000040, "Member 'BP_CH_PC_Pino_C_On_PCLamp::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, Temp_float_Variable_2) == 0x000044, "Member 'BP_CH_PC_Pino_C_On_PCLamp::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, CallFunc_MapRangeClamped_ReturnValue_2) == 0x000048, "Member 'BP_CH_PC_Pino_C_On_PCLamp::CallFunc_MapRangeClamped_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, CallFunc_FTrunc_ReturnValue_2) == 0x00004C, "Member 'BP_CH_PC_Pino_C_On_PCLamp::CallFunc_FTrunc_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, CallFunc_MapRangeClamped_ReturnValue_3) == 0x000050, "Member 'BP_CH_PC_Pino_C_On_PCLamp::CallFunc_MapRangeClamped_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x000054, "Member 'BP_CH_PC_Pino_C_On_PCLamp::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, CallFunc_FTrunc_ReturnValue_3) == 0x000058, "Member 'BP_CH_PC_Pino_C_On_PCLamp::CallFunc_FTrunc_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, CallFunc_Multiply_IntFloat_ReturnValue) == 0x00005C, "Member 'BP_CH_PC_Pino_C_On_PCLamp::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, CallFunc_Multiply_IntFloat_ReturnValue_1) == 0x000060, "Member 'BP_CH_PC_Pino_C_On_PCLamp::CallFunc_Multiply_IntFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, K2Node_Select_Default) == 0x000064, "Member 'BP_CH_PC_Pino_C_On_PCLamp::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, CallFunc_SelectFloat_ReturnValue_2) == 0x000068, "Member 'BP_CH_PC_Pino_C_On_PCLamp::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00006C, "Member 'BP_CH_PC_Pino_C_On_PCLamp::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_On_PCLamp, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x00006D, "Member 'BP_CH_PC_Pino_C_On_PCLamp::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_CH_PC_Pino.BP_CH_PC_Pino_C.Get Soul Ergo
// 0x0020 (0x0020 - 0x0000)
struct BP_CH_PC_Pino_C_Get_Soul_Ergo final
{
public:
	class UNiagaraComponent*                      CallFunc_SpawnSystemAttached_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_SpawnSystemAttached_ReturnValue_1;        // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CH_PC_Pino_C_Get_Soul_Ergo) == 0x000008, "Wrong alignment on BP_CH_PC_Pino_C_Get_Soul_Ergo");
static_assert(sizeof(BP_CH_PC_Pino_C_Get_Soul_Ergo) == 0x000020, "Wrong size on BP_CH_PC_Pino_C_Get_Soul_Ergo");
static_assert(offsetof(BP_CH_PC_Pino_C_Get_Soul_Ergo, CallFunc_SpawnSystemAttached_ReturnValue) == 0x000000, "Member 'BP_CH_PC_Pino_C_Get_Soul_Ergo::CallFunc_SpawnSystemAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_Get_Soul_Ergo, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_CH_PC_Pino_C_Get_Soul_Ergo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_Get_Soul_Ergo, CallFunc_SpawnSystemAttached_ReturnValue_1) == 0x000010, "Member 'BP_CH_PC_Pino_C_Get_Soul_Ergo::CallFunc_SpawnSystemAttached_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_Get_Soul_Ergo, CallFunc_IsValid_ReturnValue_1) == 0x000018, "Member 'BP_CH_PC_Pino_C_Get_Soul_Ergo::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_CH_PC_Pino.BP_CH_PC_Pino_C.Turn Off Butterfly Lamp
// 0x0030 (0x0030 - 0x0000)
struct BP_CH_PC_Pino_C_Turn_Off_Butterfly_Lamp final
{
public:
	TSoftObjectPtr<class ABP_RedButterFly_Red_C>  InActor;                                           // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CH_PC_Pino_C_Turn_Off_Butterfly_Lamp) == 0x000008, "Wrong alignment on BP_CH_PC_Pino_C_Turn_Off_Butterfly_Lamp");
static_assert(sizeof(BP_CH_PC_Pino_C_Turn_Off_Butterfly_Lamp) == 0x000030, "Wrong size on BP_CH_PC_Pino_C_Turn_Off_Butterfly_Lamp");
static_assert(offsetof(BP_CH_PC_Pino_C_Turn_Off_Butterfly_Lamp, InActor) == 0x000000, "Member 'BP_CH_PC_Pino_C_Turn_Off_Butterfly_Lamp::InActor' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_Turn_Off_Butterfly_Lamp, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_CH_PC_Pino_C_Turn_Off_Butterfly_Lamp::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_Turn_Off_Butterfly_Lamp, CallFunc_Array_Contains_ReturnValue) == 0x00002C, "Member 'BP_CH_PC_Pino_C_Turn_Off_Butterfly_Lamp::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_Turn_Off_Butterfly_Lamp, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00002D, "Member 'BP_CH_PC_Pino_C_Turn_Off_Butterfly_Lamp::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_Turn_Off_Butterfly_Lamp, CallFunc_Array_RemoveItem_ReturnValue) == 0x00002E, "Member 'BP_CH_PC_Pino_C_Turn_Off_Butterfly_Lamp::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");

// Function BP_CH_PC_Pino.BP_CH_PC_Pino_C.TurnOnButterflyLamp
// 0x0040 (0x0040 - 0x0000)
struct BP_CH_PC_Pino_C_TurnOnButterflyLamp final
{
public:
	TSoftObjectPtr<class ABP_RedButterFly_Red_C>  InButterfly;                                       // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	int32                                         InDepth;                                           // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InMaxDistance;                                     // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InDistance;                                        // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InDegree;                                          // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CH_PC_Pino_C_TurnOnButterflyLamp) == 0x000008, "Wrong alignment on BP_CH_PC_Pino_C_TurnOnButterflyLamp");
static_assert(sizeof(BP_CH_PC_Pino_C_TurnOnButterflyLamp) == 0x000040, "Wrong size on BP_CH_PC_Pino_C_TurnOnButterflyLamp");
static_assert(offsetof(BP_CH_PC_Pino_C_TurnOnButterflyLamp, InButterfly) == 0x000000, "Member 'BP_CH_PC_Pino_C_TurnOnButterflyLamp::InButterfly' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_TurnOnButterflyLamp, InDepth) == 0x000028, "Member 'BP_CH_PC_Pino_C_TurnOnButterflyLamp::InDepth' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_TurnOnButterflyLamp, InMaxDistance) == 0x00002C, "Member 'BP_CH_PC_Pino_C_TurnOnButterflyLamp::InMaxDistance' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_TurnOnButterflyLamp, InDistance) == 0x000030, "Member 'BP_CH_PC_Pino_C_TurnOnButterflyLamp::InDistance' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_TurnOnButterflyLamp, InDegree) == 0x000034, "Member 'BP_CH_PC_Pino_C_TurnOnButterflyLamp::InDegree' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_TurnOnButterflyLamp, CallFunc_Array_AddUnique_ReturnValue) == 0x000038, "Member 'BP_CH_PC_Pino_C_TurnOnButterflyLamp::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function BP_CH_PC_Pino.BP_CH_PC_Pino_C.SetNoseShadow
// 0x0018 (0x0018 - 0x0000)
struct BP_CH_PC_Pino_C_SetNoseShadow final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULGameDataSystem*                       CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHumanityRatio_ReturnValue;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CH_PC_Pino_C_SetNoseShadow) == 0x000008, "Wrong alignment on BP_CH_PC_Pino_C_SetNoseShadow");
static_assert(sizeof(BP_CH_PC_Pino_C_SetNoseShadow) == 0x000018, "Wrong size on BP_CH_PC_Pino_C_SetNoseShadow");
static_assert(offsetof(BP_CH_PC_Pino_C_SetNoseShadow, Visible) == 0x000000, "Member 'BP_CH_PC_Pino_C_SetNoseShadow::Visible' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_SetNoseShadow, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000008, "Member 'BP_CH_PC_Pino_C_SetNoseShadow::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_SetNoseShadow, CallFunc_GetHumanityRatio_ReturnValue) == 0x000010, "Member 'BP_CH_PC_Pino_C_SetNoseShadow::CallFunc_GetHumanityRatio_ReturnValue' has a wrong offset!");

// Function BP_CH_PC_Pino.BP_CH_PC_Pino_C.CreateENVPointLightMaterial
// 0x0010 (0x0010 - 0x0000)
struct BP_CH_PC_Pino_C_CreateENVPointLightMaterial final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CH_PC_Pino_C_CreateENVPointLightMaterial) == 0x000008, "Wrong alignment on BP_CH_PC_Pino_C_CreateENVPointLightMaterial");
static_assert(sizeof(BP_CH_PC_Pino_C_CreateENVPointLightMaterial) == 0x000010, "Wrong size on BP_CH_PC_Pino_C_CreateENVPointLightMaterial");
static_assert(offsetof(BP_CH_PC_Pino_C_CreateENVPointLightMaterial, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_CH_PC_Pino_C_CreateENVPointLightMaterial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_CreateENVPointLightMaterial, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000008, "Member 'BP_CH_PC_Pino_C_CreateENVPointLightMaterial::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function BP_CH_PC_Pino.BP_CH_PC_Pino_C.UpdateDitherInfo
// 0x00E0 (0x00E0 - 0x0000)
struct BP_CH_PC_Pino_C_UpdateDitherInfo final
{
public:
	float                                         Temp_float_Variable;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ALCameraManager*                        CallFunc_GetCameraManager_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue;      // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_Distance_ReturnValue;              // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_LinearColorLinearColor_ReturnValue; // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_1;          // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ProjectWorldToScreenNormalized_ReturnValue; // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ProjectWorldToScreenNormalized_ReturnValue_1; // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x00A4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_2;                        // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_2;                        // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MakeColor_ReturnValue;                    // 0x00CC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CH_PC_Pino_C_UpdateDitherInfo) == 0x000008, "Wrong alignment on BP_CH_PC_Pino_C_UpdateDitherInfo");
static_assert(sizeof(BP_CH_PC_Pino_C_UpdateDitherInfo) == 0x0000E0, "Wrong size on BP_CH_PC_Pino_C_UpdateDitherInfo");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, Temp_float_Variable) == 0x000000, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_GetCameraManager_ReturnValue) == 0x000008, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_GetCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_GetCameraLocation_ReturnValue) == 0x000010, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, Temp_bool_Variable) == 0x00001C, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_GetVectorParameterValue_ReturnValue) == 0x000020, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_GetVectorParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000030, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_GetSocketLocation_ReturnValue) == 0x00003C, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x000048, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_Vector_Distance_ReturnValue) == 0x000058, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_Less_FloatFloat_ReturnValue) == 0x00005C, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_NotEqual_LinearColorLinearColor_ReturnValue) == 0x00005D, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_NotEqual_LinearColorLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_Add_VectorVector_ReturnValue) == 0x000060, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_GetSocketLocation_ReturnValue_1) == 0x00006C, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_GetSocketLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_ProjectWorldToScreenNormalized_ReturnValue) == 0x000078, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_ProjectWorldToScreenNormalized_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_ProjectWorldToScreenNormalized_ReturnValue_1) == 0x000080, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_ProjectWorldToScreenNormalized_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_BreakVector2D_X) == 0x000088, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_BreakVector2D_Y) == 0x00008C, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_BreakVector2D_X_1) == 0x000090, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_BreakVector2D_Y_1) == 0x000094, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000098, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000A0, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x0000A4, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_Abs_ReturnValue) == 0x0000AC, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_BreakVector2D_X_2) == 0x0000B0, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_BreakVector2D_Y_2) == 0x0000B4, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000B8, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_FClamp_ReturnValue) == 0x0000BC, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, K2Node_Select_Default) == 0x0000C0, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_FClamp_ReturnValue_1) == 0x0000C4, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000C8, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_UpdateDitherInfo, CallFunc_MakeColor_ReturnValue) == 0x0000CC, "Member 'BP_CH_PC_Pino_C_UpdateDitherInfo::CallFunc_MakeColor_ReturnValue' has a wrong offset!");

// Function BP_CH_PC_Pino.BP_CH_PC_Pino_C.AddDisplacementShapeData
// 0x0018 (0x0018 - 0x0000)
struct BP_CH_PC_Pino_C_AddDisplacementShapeData final
{
public:
	TArray<struct FBS_DisplacementShape>          Stack;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Added;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CH_PC_Pino_C_AddDisplacementShapeData) == 0x000008, "Wrong alignment on BP_CH_PC_Pino_C_AddDisplacementShapeData");
static_assert(sizeof(BP_CH_PC_Pino_C_AddDisplacementShapeData) == 0x000018, "Wrong size on BP_CH_PC_Pino_C_AddDisplacementShapeData");
static_assert(offsetof(BP_CH_PC_Pino_C_AddDisplacementShapeData, Stack) == 0x000000, "Member 'BP_CH_PC_Pino_C_AddDisplacementShapeData::Stack' has a wrong offset!");
static_assert(offsetof(BP_CH_PC_Pino_C_AddDisplacementShapeData, Added) == 0x000010, "Member 'BP_CH_PC_Pino_C_AddDisplacementShapeData::Added' has a wrong offset!");

// Function BP_CH_PC_Pino.BP_CH_PC_Pino_C.GetLampMesh
// 0x0008 (0x0008 - 0x0000)
struct BP_CH_PC_Pino_C_GetLampMesh final
{
public:
	class UMeshComponent*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CH_PC_Pino_C_GetLampMesh) == 0x000008, "Wrong alignment on BP_CH_PC_Pino_C_GetLampMesh");
static_assert(sizeof(BP_CH_PC_Pino_C_GetLampMesh) == 0x000008, "Wrong size on BP_CH_PC_Pino_C_GetLampMesh");
static_assert(offsetof(BP_CH_PC_Pino_C_GetLampMesh, ReturnValue) == 0x000000, "Member 'BP_CH_PC_Pino_C_GetLampMesh::ReturnValue' has a wrong offset!");

}

