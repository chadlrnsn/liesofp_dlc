#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EnvMain

#include "Basic.hpp"

#include "ProjectP_structs.hpp"
#include "ProjectP_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EnvMain.BP_EnvMain_C
// 0x01B8 (0x07D8 - 0x0620)
class ABP_EnvMain_C final : public ALGlobalEnvActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0620(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Audio;                                             // 0x0628(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Lightning_Strike2;                                 // 0x0630(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Lightning_Strike1;                                 // 0x0638(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             LightningLight;                                    // 0x0640(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara;                                           // 0x0648(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Direction;                                         // 0x0650(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        SecondaryMoon;                                     // 0x0658(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Start_Raining;                                     // 0x0660(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Stop_Raining;                                      // 0x0670(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Sunset;                                            // 0x0680(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Sunrise;                                           // 0x0690(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         Duration;                                          // 0x06A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ToIndex2;                                          // 0x06A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseTemperature;                                    // 0x06A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A9[0x3];                                      // 0x06A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShadowBias;                                        // 0x06AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShadowSlopeBias;                                   // 0x06B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ContactShadowLength;                               // 0x06B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureCube*                           Cubemap;                                           // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Cached_WeatherCodeName;                            // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRainAttached;                                     // 0x06C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C9[0x3];                                      // 0x06C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Current_Lightning_Angle;                           // 0x06CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Current_Lightning_AngleRange;                      // 0x06D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Custom_Lightning_Location;                         // 0x06D4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lightning_Flash_Minimum_Distance;                  // 0x06E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lightning_Flash_Maximum_Distance;                  // 0x06E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightningFlashHeightMin;                           // 0x06E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightningFlashHeightMax;                           // 0x06EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Current_Camera_Location;                           // 0x06F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Current_Lightning_Location;                        // 0x06FC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lightning_Flash_Maximum_Length;                    // 0x0708(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lightning_Flash_Minimum_Length;                    // 0x070C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lightning_Flash_Length;                            // 0x0710(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Sound_Effects;                                 // 0x0714(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_715[0x3];                                      // 0x0715(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Current_Lightning_Intensity;                       // 0x0718(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Flashing_Lightning;                                // 0x071C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71D[0x3];                                      // 0x071D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Max_Attenuation;                                   // 0x0720(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Close_Thunder_Volume;                              // 0x0724(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 Current_Sound_Occlusion_Profile;                   // 0x0728(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Use_Occlusion_to_Attenuate_Sounds_in_Interiors;    // 0x0738(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_739[0x3];                                      // 0x0739(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Min_LPF_Frequency;                                 // 0x073C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Custom_Lightning_Location;                     // 0x0740(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_741[0x7];                                      // 0x0741(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Lightning_Flash_Curve;                             // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Maximum_Lightning_Flash_Light_Intensity;           // 0x0750(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Flash_Light_Intensity_Factor;                      // 0x0754(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lightning_Flash_Light_Shaft_Intensity;             // 0x0758(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Lightning_Flash_Light_Source_Color;                // 0x075C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainLightningReservedTime;                       // 0x076C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightningCustomDistance;                           // 0x0770(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightningCustomHeight;                             // 0x0774(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightningAngle;                                    // 0x0778(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NextLightningCheckTime;                            // 0x077C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NextLightningTime;                                 // 0x0780(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightningEndTime;                                  // 0x0784(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LightningShineColor;                               // 0x0788(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CurrentLightningComponent;                         // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightningSoundTime;                                // 0x07A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightningNormalDistance;                           // 0x07A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FLinearColor>                   LightningColors;                                   // 0x07A8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	class FString                                 _____;                                             // 0x07B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash)
	float                                         Cached_RainIntensity_For_Sound;                    // 0x07C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RainIntensity_Catchup_Upward_Alpha;                // 0x07CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RainIntensity_Catchup_Downward_Alpha;              // 0x07D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanPlayThunderSound;                               // 0x07D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ActiveEnvironment;                                 // 0x07D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ApplyLightningSettings();
	void ApplyBlendedBuffers();
	void ApplyWeatherSettings();
	void ApplyStaticSettings();
	void UpdateSecondaryMoonArrow();
	void Preview();
	void ______0();
	void ______();
	void ApplySettings();
	void Set_Sun_and_Moon_Rotation();
	void UserConstructionScript();
	void End_Lightning_Flash();
	void Tick_Lightning_Flash();
	void TestLightning();
	void SpawnCustomLightningBP(float Delay, float Dir, float Intensity, float Distance, float Height);
	void ProcessReservedLightning();
	void ToggleLightningComponent();
	void PlayThunderSound();
	void ReceiveBeginPlay();
	void OnStartPostProcessing_BP();
	void Flash_Lightning(float Angle, const struct FVector& Custom_Lightning_Location_0);
	void SetActiveEnvironment(bool IsValid);
	void SpawnCustomLightning(float Delay, float Direction_0, float Intensity, float Distance, float Height);
	void ExecuteUbergraph_BP_EnvMain(int32 EntryPoint);
	void Sunrise__DelegateSignature();
	void Sunset__DelegateSignature();
	void Stop_Raining__DelegateSignature();
	void Start_Raining__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EnvMain_C">();
	}
	static class ABP_EnvMain_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EnvMain_C>();
	}
};
static_assert(alignof(ABP_EnvMain_C) == 0x000008, "Wrong alignment on ABP_EnvMain_C");
static_assert(sizeof(ABP_EnvMain_C) == 0x0007D8, "Wrong size on ABP_EnvMain_C");
static_assert(offsetof(ABP_EnvMain_C, UberGraphFrame) == 0x000620, "Member 'ABP_EnvMain_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Audio) == 0x000628, "Member 'ABP_EnvMain_C::Audio' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Lightning_Strike2) == 0x000630, "Member 'ABP_EnvMain_C::Lightning_Strike2' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Lightning_Strike1) == 0x000638, "Member 'ABP_EnvMain_C::Lightning_Strike1' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, LightningLight) == 0x000640, "Member 'ABP_EnvMain_C::LightningLight' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Niagara) == 0x000648, "Member 'ABP_EnvMain_C::Niagara' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Direction) == 0x000650, "Member 'ABP_EnvMain_C::Direction' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, SecondaryMoon) == 0x000658, "Member 'ABP_EnvMain_C::SecondaryMoon' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Start_Raining) == 0x000660, "Member 'ABP_EnvMain_C::Start_Raining' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Stop_Raining) == 0x000670, "Member 'ABP_EnvMain_C::Stop_Raining' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Sunset) == 0x000680, "Member 'ABP_EnvMain_C::Sunset' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Sunrise) == 0x000690, "Member 'ABP_EnvMain_C::Sunrise' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Duration) == 0x0006A0, "Member 'ABP_EnvMain_C::Duration' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, ToIndex2) == 0x0006A4, "Member 'ABP_EnvMain_C::ToIndex2' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, UseTemperature) == 0x0006A8, "Member 'ABP_EnvMain_C::UseTemperature' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, ShadowBias) == 0x0006AC, "Member 'ABP_EnvMain_C::ShadowBias' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, ShadowSlopeBias) == 0x0006B0, "Member 'ABP_EnvMain_C::ShadowSlopeBias' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, ContactShadowLength) == 0x0006B4, "Member 'ABP_EnvMain_C::ContactShadowLength' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Cubemap) == 0x0006B8, "Member 'ABP_EnvMain_C::Cubemap' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Cached_WeatherCodeName) == 0x0006C0, "Member 'ABP_EnvMain_C::Cached_WeatherCodeName' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, bRainAttached) == 0x0006C8, "Member 'ABP_EnvMain_C::bRainAttached' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Current_Lightning_Angle) == 0x0006CC, "Member 'ABP_EnvMain_C::Current_Lightning_Angle' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Current_Lightning_AngleRange) == 0x0006D0, "Member 'ABP_EnvMain_C::Current_Lightning_AngleRange' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Custom_Lightning_Location) == 0x0006D4, "Member 'ABP_EnvMain_C::Custom_Lightning_Location' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Lightning_Flash_Minimum_Distance) == 0x0006E0, "Member 'ABP_EnvMain_C::Lightning_Flash_Minimum_Distance' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Lightning_Flash_Maximum_Distance) == 0x0006E4, "Member 'ABP_EnvMain_C::Lightning_Flash_Maximum_Distance' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, LightningFlashHeightMin) == 0x0006E8, "Member 'ABP_EnvMain_C::LightningFlashHeightMin' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, LightningFlashHeightMax) == 0x0006EC, "Member 'ABP_EnvMain_C::LightningFlashHeightMax' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Current_Camera_Location) == 0x0006F0, "Member 'ABP_EnvMain_C::Current_Camera_Location' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Current_Lightning_Location) == 0x0006FC, "Member 'ABP_EnvMain_C::Current_Lightning_Location' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Lightning_Flash_Maximum_Length) == 0x000708, "Member 'ABP_EnvMain_C::Lightning_Flash_Maximum_Length' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Lightning_Flash_Minimum_Length) == 0x00070C, "Member 'ABP_EnvMain_C::Lightning_Flash_Minimum_Length' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Lightning_Flash_Length) == 0x000710, "Member 'ABP_EnvMain_C::Lightning_Flash_Length' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Use_Sound_Effects) == 0x000714, "Member 'ABP_EnvMain_C::Use_Sound_Effects' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Current_Lightning_Intensity) == 0x000718, "Member 'ABP_EnvMain_C::Current_Lightning_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Flashing_Lightning) == 0x00071C, "Member 'ABP_EnvMain_C::Flashing_Lightning' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Max_Attenuation) == 0x000720, "Member 'ABP_EnvMain_C::Max_Attenuation' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Close_Thunder_Volume) == 0x000724, "Member 'ABP_EnvMain_C::Close_Thunder_Volume' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Current_Sound_Occlusion_Profile) == 0x000728, "Member 'ABP_EnvMain_C::Current_Sound_Occlusion_Profile' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Use_Occlusion_to_Attenuate_Sounds_in_Interiors) == 0x000738, "Member 'ABP_EnvMain_C::Use_Occlusion_to_Attenuate_Sounds_in_Interiors' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Min_LPF_Frequency) == 0x00073C, "Member 'ABP_EnvMain_C::Min_LPF_Frequency' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Use_Custom_Lightning_Location) == 0x000740, "Member 'ABP_EnvMain_C::Use_Custom_Lightning_Location' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Lightning_Flash_Curve) == 0x000748, "Member 'ABP_EnvMain_C::Lightning_Flash_Curve' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Maximum_Lightning_Flash_Light_Intensity) == 0x000750, "Member 'ABP_EnvMain_C::Maximum_Lightning_Flash_Light_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Flash_Light_Intensity_Factor) == 0x000754, "Member 'ABP_EnvMain_C::Flash_Light_Intensity_Factor' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Lightning_Flash_Light_Shaft_Intensity) == 0x000758, "Member 'ABP_EnvMain_C::Lightning_Flash_Light_Shaft_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Lightning_Flash_Light_Source_Color) == 0x00075C, "Member 'ABP_EnvMain_C::Lightning_Flash_Light_Source_Color' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, RemainLightningReservedTime) == 0x00076C, "Member 'ABP_EnvMain_C::RemainLightningReservedTime' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, LightningCustomDistance) == 0x000770, "Member 'ABP_EnvMain_C::LightningCustomDistance' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, LightningCustomHeight) == 0x000774, "Member 'ABP_EnvMain_C::LightningCustomHeight' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, LightningAngle) == 0x000778, "Member 'ABP_EnvMain_C::LightningAngle' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, NextLightningCheckTime) == 0x00077C, "Member 'ABP_EnvMain_C::NextLightningCheckTime' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, NextLightningTime) == 0x000780, "Member 'ABP_EnvMain_C::NextLightningTime' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, LightningEndTime) == 0x000784, "Member 'ABP_EnvMain_C::LightningEndTime' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, LightningShineColor) == 0x000788, "Member 'ABP_EnvMain_C::LightningShineColor' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, CurrentLightningComponent) == 0x000798, "Member 'ABP_EnvMain_C::CurrentLightningComponent' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, LightningSoundTime) == 0x0007A0, "Member 'ABP_EnvMain_C::LightningSoundTime' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, LightningNormalDistance) == 0x0007A4, "Member 'ABP_EnvMain_C::LightningNormalDistance' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, LightningColors) == 0x0007A8, "Member 'ABP_EnvMain_C::LightningColors' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, _____) == 0x0007B8, "Member 'ABP_EnvMain_C::_____' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, Cached_RainIntensity_For_Sound) == 0x0007C8, "Member 'ABP_EnvMain_C::Cached_RainIntensity_For_Sound' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, RainIntensity_Catchup_Upward_Alpha) == 0x0007CC, "Member 'ABP_EnvMain_C::RainIntensity_Catchup_Upward_Alpha' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, RainIntensity_Catchup_Downward_Alpha) == 0x0007D0, "Member 'ABP_EnvMain_C::RainIntensity_Catchup_Downward_Alpha' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, CanPlayThunderSound) == 0x0007D4, "Member 'ABP_EnvMain_C::CanPlayThunderSound' has a wrong offset!");
static_assert(offsetof(ABP_EnvMain_C, ActiveEnvironment) == 0x0007D5, "Member 'ABP_EnvMain_C::ActiveEnvironment' has a wrong offset!");

}

