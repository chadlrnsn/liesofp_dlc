#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ProjectPContentInfo

#include "Basic.hpp"


namespace SDK
{

// Enum ProjectPContentInfo.ELPhysicalSurfaceType
// NumValues: 0x001A
enum class ELPhysicalSurfaceType : uint8
{
	E_NONE                                   = 0,
	E_WATER                                  = 1,
	E_OIL                                    = 2,
	E_BLOOD                                  = 3,
	E_LIQUID                                 = 4,
	E_FLUID                                  = 5,
	E_ASH                                    = 6,
	E_SNOW                                   = 7,
	E_GRASS                                  = 8,
	E_DIRT                                   = 9,
	E_SKIN                                   = 10,
	E_PLASTIC                                = 11,
	E_CRYSTAL                                = 12,
	E_METAL                                  = 13,
	E_STONE                                  = 14,
	E_WOOD                                   = 15,
	E_GLASS                                  = 16,
	E_CARCASSSKIN                            = 17,
	E_CARPET                                 = 18,
	E_TREE                                   = 19,
	E_CARBON                                 = 20,
	E_WINE                                   = 21,
	E_EFFLUENT                               = 22,
	E_SAND                                   = 23,
	E_MAX                                    = 24,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELLinkedSkillUseType
// NumValues: 0x0005
enum class ELLinkedSkillUseType : uint8
{
	E_NONE                                   = 0,
	E_SUCCESS                                = 1,
	E_FAILED                                 = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELPartsAttachPointType
// NumValues: 0x0007
enum class ELPartsAttachPointType : uint8
{
	E_NONE                                   = 0,
	E_R                                      = 1,
	E_L                                      = 2,
	E_EX1                                    = 3,
	E_EX2                                    = 4,
	E_MAX                                    = 5,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELWeaponAttachPointType
// NumValues: 0x0008
enum class ELWeaponAttachPointType : uint8
{
	E_NONE                                   = 0,
	E_R                                      = 1,
	E_L                                      = 2,
	E_EX1                                    = 3,
	E_EX2                                    = 4,
	E_EX3                                    = 5,
	E_MAX                                    = 6,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELElementDamageType
// NumValues: 0x0006
enum class ELElementDamageType : uint8
{
	E_NONE                                   = 0,
	E_FIRE                                   = 1,
	E_ELECTRIC                               = 2,
	E_ACID                                   = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELEquipSlotType
// NumValues: 0x0017
enum class ELEquipSlotType : uint8
{
	E_NONE                                   = 0,
	E_WEAPON_1                               = 1,
	E_WEAPON_2                               = 2,
	E_LINER                                  = 3,
	E_FREAM                                  = 4,
	E_CONVERTER                              = 5,
	E_GEAR_EAR_1                             = 6,
	E_GEAR_EAR_2                             = 7,
	E_GEAR_WRIST                             = 8,
	E_GEAR_EAR_3                             = 9,
	E_SLAVEARM                               = 10,
	E_MONAD_UNIT_SLOT                        = 11,
	E_GRINDER_UNIT_SLOT                      = 12,
	E_SLAVEARM_2                             = 13,
	E_HEAD_COSTUME                           = 14,
	E_BODY_COSTUME                           = 15,
	E_CARTRIDGE                              = 16,
	E_WEAPON_3                               = 17,
	E_SLAVEARM_3                             = 18,
	E_GEAR_EAR_4                             = 19,
	E_EYEWEAR_COSTUME                        = 20,
	E_MAX                                    = 21,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELFirstStat
// NumValues: 0x000A
enum class ELFirstStat : uint8
{
	E_NONE                                   = 0,
	E_VITALITY                               = 1,
	E_VIGOR                                  = 2,
	E_TENACITY                               = 3,
	E_CAPACITY                               = 4,
	E_MOTIVITY                               = 5,
	E_TECHNIQUE                              = 6,
	E_ADVANCE                                = 7,
	E_MAX                                    = 8,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELMomentType
// NumValues: 0x000F
enum class ELMomentType : uint8
{
	E_NONE                                   = 0,
	E_MELEE_ATTACK_HIT                       = 1,
	E_MELEE_ATTACKED_HIT                     = 2,
	E_TORSION_COIL_RESURRECTION              = 3,
	E_PERFECT_GUARD                          = 4,
	E_NORMAL_GUARD                           = 5,
	E_CHANGE_WEAPON_SLOT1                    = 6,
	E_KILL                                   = 7,
	E_DOWN                                   = 8,
	E_USE_SKILL                              = 9,
	E_PROJECTILE_ATTACKED_HIT                = 10,
	E_FURY_ATTACKED_HIT                      = 11,
	E_PRE_PERFECT_GUARD                      = 12,
	E_MAX                                    = 13,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELSecondStat
// NumValues: 0x00C0
enum class ELSecondStat : uint8
{
	E_NONE                                   = 0,
	E_HEALTH_POINT_CURRENT                   = 1,
	E_STAMINA_POINT_CURRENT                  = 2,
	E_FRENZY_POINT_CURRENT                   = 3,
	E_ATTACK_SPEED                           = 4,
	E_SLAVE_MAGAZINE_POINT_CURRENT           = 5,
	E_PHYSICAL_ATTACK                        = 6,
	E_SPRINT_CONSUME_STAMINA_PER_SECOND      = 7,
	E_WEIGHT_LIMIT                           = 8,
	E_TOUGH_POINT_CURRENT                    = 9,
	E_PHYSICAL_SLASH_REDUCE                  = 10,
	E_PHYSICAL_STRIKE_REDUCE                 = 11,
	E_PHYSICAL_PIERCE_REDUCE                 = 12,
	E_FIRE_ATTACK                            = 13,
	E_ACID_ATTACK                            = 14,
	E_ELECTRIC_ATTACK                        = 15,
	E_FIRE_DEFENCE                           = 16,
	E_ACID_DEFENCE                           = 17,
	E_ELECTRIC_DEFENCE                       = 18,
	E_FIRE_REDUCE                            = 19,
	E_ACID_REDUCE                            = 20,
	E_ELECTRIC_REDUCE                        = 21,
	E_DASH_STAMINA_REDUCTION_RATIO           = 22,
	E_WEAPON_DURABLITY                       = 23,
	E_STAMINA_RESTORE_PER_SECOND             = 24,
	E_STAMINA_EXHAUST_TIME                   = 25,
	E_HALO_NORMAL_DECREASE_AMOUNT_PER_SECOND = 26,
	E_HALO_OVERFACE_DECREASE_AMOUNT_PER_SECOND = 27,
	E_DEBUFF_GAUGE_MAX                       = 28,
	E_TOUGH_ATTACK                           = 29,
	E_TOUGH_ATTACK_RATIO                     = 30,
	E_TOUGH_DEFENCE                          = 31,
	E_TOUGH_DEFENCE_RATIO                    = 32,
	E_TOUGH_REDUCTION_RATIO                  = 33,
	E_TOUGH_RESTORE_PER_SECOND               = 34,
	E_GUARD_POINT                            = 35,
	E_GUARD_REPULSE_POINT                    = 36,
	E_GUARD_PENETRATION                      = 37,
	E_GUARD_PENETRATION_RATIO                = 38,
	E_GUARD_STAMINA_REDUCTION_RATIO          = 39,
	E_GUARD_KNOCKBACK_DISTANCE_REDUCTION_RATIO = 40,
	E_GUARD_PHYSICALDAMAGE_REDUCTION_RATIO   = 41,
	E_PARALYZE_POINT_CURRENT                 = 42,
	E_PARALYZE_POINT_RESTORE_PER_SECOND      = 43,
	E_PARALYZE_POINT_RESTORE_STOP_TIME       = 44,
	E_PARALYZE_RESET_DELAY                   = 45,
	E_PARALYZE_ATTACK                        = 46,
	E_PARALYZE_ATTACK_RATIO                  = 47,
	E_GROGGY_POINT_CURRENT                   = 48,
	E_GROGGY_POINT_RESTORE_PER_SECOND        = 49,
	E_GROGGY_POINT_RESTORE_STOP_TIME         = 50,
	E_GROGGY_POINT_RESET_DELAY               = 51,
	E_GROGGY_ATTACK                          = 52,
	E_GROGGY_ATTACK_RATIO                    = 53,
	E_HUMANITY                               = 54,
	E_ABNORMAL_FIRE_POINT_CURRENT            = 55,
	E_DESTRUCTION_POWER                      = 56,
	E_PHYSICAL_SLASH_DEFENCE                 = 57,
	E_PHYSICAL_STRIKE_DEFENCE                = 58,
	E_PHYSICAL_PIERCE_DEFENCE                = 59,
	E_PHYSICAL_DAMAGE_INCREASE_RATIO         = 60,
	E_PHYSICAL_DAMAGE_REDUCTION_RATIO        = 61,
	E_ELEMENT_DAMAGE_INCREASE_RATIO          = 62,
	E_ELEMENT_DAMAGE_REDUCTION_RATIO         = 63,
	E_PERFECT_GUARD_GAIN_FRENZY_POINT        = 64,
	E_WALK_RUN_SPEED_RATIO                   = 65,
	E_CRITICAL_RATE                          = 66,
	E_CRITICAL_DAMAGE_RATIO                  = 67,
	E_CRITICAL_RESIST_RATE                   = 68,
	E_WEIGHT                                 = 69,
	E_ACTIVE_FP_DECREASE_PER_SECOND          = 70,
	E_HEALTH_POINT_MAX                       = 71,
	E_STAMINA_POINT_MAX                      = 72,
	E_FRENZY_POINT_MAX                       = 73,
	E_SPRINT_SPEED_RATIO                     = 74,
	E_SLAVE_MAGAZINE_POINT_MAX               = 75,
	E_TOUGH_POINT_MAX                        = 76,
	E_PARALYZE_POINT_MAX                     = 77,
	E_GROGGY_POINT_MAX                       = 78,
	E_ABNORMAL_FIRE_POINT_MAX                = 79,
	E_GUARD_FIREDAMAGE_REDUCTION_RATIO       = 80,
	E_GUARD_ELECTRICDAMAGE_REDUCTION_RATIO   = 81,
	E_GUARD_ACIDDAMAGE_REDUCTION_RATIO       = 82,
	E_SHARPNESS_BONUS                        = 83,
	E_ATTACK_STAMINA_REDUCTION_RATIO         = 84,
	E_FATAL_PHYSICAL_ATTACKPOWER             = 85,
	E_ATTACKRATIO_SLAVEARM                   = 86,
	E_ATTACK_SPEED_RATIO                     = 87,
	E_SLAVEARM_PHYSICAL_ATTACK               = 88,
	E_SLAVEARM_FIRE_ATTACK                   = 89,
	E_SLAVEARM_ACID_ATTACK                   = 90,
	E_SLAVEARM_ELECTRIC_ATTACK               = 91,
	E_SLAVEARM_DESTRUCTION_POWER             = 92,
	E_FALL_REDUCTION_DMG_RATIO               = 93,
	E_RIGIDITY                               = 94,
	E_MODIFICATION_DROP_ERGO_REMAIN_DECREASE = 95,
	E_GROGGY_ADD_DAMAGE_RATIO                = 96,
	E_GUARD_PARRY_COOLTIME                   = 97,
	E_DASH_PARRY_COOLTIME                    = 98,
	E_MOTION_SPEED_RATIO                     = 99,
	E_DOWN_GETUP_SPEED_RATIO                 = 100,
	E_PERFECT_GUARD_PARALYZE_ATK_MOD         = 101,
	E_PHYSICAL_SUB_SWING_MOD_ADD             = 102,
	E_PHYSICAL_SUB_THRUST_MOD_ADD            = 103,
	E_SUB_SWING_PARALYZE_ATK_MOD             = 104,
	E_SUB_THRUST_PARALYZE_ATK_MOD            = 105,
	E_BACK_ATTACK_DEFENCE                    = 106,
	E_TOUGH_RECOVERY_DELAY_TIME              = 107,
	E_TOUGH_RECOVERY_DELAY_REDUCTION         = 108,
	E_DROP_ERGO_REGAIN_MONKILL_RATIO         = 109,
	E_PULSE_RECHARGE_POINT_CURRENT           = 110,
	E_PULSE_RECHARGE_POINT_MAX               = 111,
	E_PULSE_RECHARGE_ATTACK                  = 112,
	E_INCREASE_PULSE_RECHARGE_RATIO          = 113,
	E_GUARD_REGAIN_POINT_CURRENT             = 114,
	E_GUARD_REGAIN_POINT_MAX                 = 115,
	E_GUARD_REGAIN_RECOVERY_RATIO            = 116,
	E_GUARD_REGAIN_RECOVERY_REDUCE_RATIO     = 117,
	E_GUARD_REGAIN_ATTACK_HEAL_INCREASE_RATIO = 118,
	E_PHYSICAL_DEFENCE                       = 119,
	E_PHYSICAL_REDUCE                        = 120,
	E_GUARD_DAMAGE_REDUCTION_RATIO           = 121,
	E_FIRE_DEBUFF_RESIST                     = 122,
	E_ELECTRIC_DEBUFF_RESIST                 = 123,
	E_ACID_DEBUFF_RESIST                     = 124,
	E_CURSE_DEBUFF_RESIST                    = 125,
	E_CONTAMINATION_DEBUFF_RESIST            = 126,
	E_STAMINA_RATE_HEAL_ON_GROGGY            = 127,
	E_BATTLE_ITEM_MAX_STACK_COUNT            = 128,
	E_PERFECT_GUARD_GROGGY_ATK_MOD           = 129,
	E_SUB_SWING_GROGGY_ATK_MOD               = 130,
	E_SUB_THRUST_GROGGY_ATK_MOD              = 131,
	E_MAX_FRENZY_GAUGE_PER_UNIT              = 132,
	E_FRENZY_UNIT_COUNT                      = 133,
	E_BUILD_UP_RECOVERY_SPEED                = 134,
	E_PULSE_RECHARGE_POINT_MIN               = 135,
	E_IMPACT_DEBUFF_RESIST                   = 136,
	E_BREAK_DEBUFF_RESIST                    = 137,
	E_DESTRUCTION_SLASH_REDUCE               = 138,
	E_DESTRUCTION_STRIKE_REDUCE              = 139,
	E_DESTRUCTION_PIERCE_REDUCE              = 140,
	E_DESTRUCTION_PHYSICAL_REDUCE            = 141,
	E_DESTRUCTION_FIRE_REDUCE                = 142,
	E_DESTRUCTION_ELECTRIC_REDUCE            = 143,
	E_DESTRUCTION_ACID_REDUCE                = 144,
	E_GROGGY_REDUCTION_RATIO                 = 145,
	E_FIRE_DAMAGE_INCREASE_RATIO             = 146,
	E_ELECTRIC_DAMAGE_INCREASE_RATIO         = 147,
	E_ACID_DAMAGE_INCREASE_RATIO             = 148,
	E_FIRE_DAMAGE_REDUCTION_RATIO            = 149,
	E_ELECTRIC_DAMAGE_REDUCTION_RATIO        = 150,
	E_ACID_DAMAGE_REDUCTION_RATIO            = 151,
	E_SHARPNESS_INCREASE_RATIO               = 152,
	E_DURABILITY_INCREASE_RATIO              = 153,
	E_GUARD_REGAIN_PERFECT_GUARD_HEAL_RATIO  = 154,
	E_ATTACK_GAIN_FRENZY_POINT_INCREASE_RATIO = 155,
	E_PERFECT_GUARD_GAIN_FRENZY_POINT_RATIO  = 156,
	E_PERFECT_GUARD_GAIN_FRENZY_FURYATTACK_INCREASE_RATIO = 157,
	E_REGAIN_HP_MAKE_REDUCTION_RATIO         = 158,
	E_GUARD_REGAIN_DAMAGE_REDUCE_RATIO       = 159,
	E_REGAINHP_HEAL_INCREASE_RATIO           = 160,
	E_SLASH_ATTACK_RATIO                     = 161,
	E_PIERCE_ATTACK_RATIO                    = 162,
	E_STRIKE_ATTACK_RATIO                    = 163,
	E_PERFECTGUARD_GROGGYENABLE_ADDTIME_RATIO = 164,
	E_FATAL_DAMAGE_RATIO                     = 165,
	E_MONPARTS_DAMAGE_INCREASE               = 166,
	E_MONPARTS_DAMAGE_REDUCE                 = 167,
	E_BUILDUP_FIRE_REDUCTION                 = 168,
	E_BUILDUP_ELECTRIC_REDUCTION             = 169,
	E_BUILDUP_ACID_REDUCTION                 = 170,
	E_BUILDUP_CURSE_REDUCTION                = 171,
	E_BUILDUP_CONTAMINATION_REDUCTION        = 172,
	E_BUILDUP_IMPACT_REDUCTION               = 173,
	E_BUILDUP_BREAK_REDUCTION                = 174,
	E_ABNORMALSTATE_PENALTY_BASE             = 175,
	E_BUILD_UP_RECOVER_INC_BASE              = 176,
	E_GAINEXP_MULADD                         = 177,
	E_SLAVE_MAGAZINE_REDUCTION_RATIO         = 178,
	E_ELEMENTAL_BUILD_UP_RECOVERY_RATIO      = 179,
	E_FABLE_ABNORMAL_DURATION_RATIO          = 180,
	E_GUARD_REPULSE_ANIM_RATIO               = 181,
	E_OBJECT_REPULSE_ANIM_RATIO              = 182,
	E_MONWP_DURABILITY_INCREASE_RATIO        = 183,
	E_FIRE_RATEDOT_REDUCE                    = 184,
	E_ELECTRIC_RATEDOT_REDUCE                = 185,
	E_ACID_RATEDOT_REDUCE                    = 186,
	E_ETC_RATEDOT_REDUCE                     = 187,
	E_SLAVEATTACK_GAIN_FRENZY_POINT_RATIO    = 188,
	E_FINAL_DAMAGE_REDUCE                    = 189,
	E_MAX                                    = 190,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELShotGunAmmoType
// NumValues: 0x0006
enum class ELShotGunAmmoType : uint8
{
	E_NORMAL                                 = 0,
	E_FIRE                                   = 1,
	E_ELECTRIC                               = 2,
	E_ACID                                   = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELAcidSpreadingModeType
// NumValues: 0x0004
enum class ELAcidSpreadingModeType : uint8
{
	E_HORIZONTAL                             = 0,
	E_VERTICAL                               = 1,
	E_MAX                                    = 2,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELFlameThrowerExplosionEnableStateType
// NumValues: 0x0004
enum class ELFlameThrowerExplosionEnableStateType : uint8
{
	E_ENABLE                                 = 0,
	E_NOT_READY                              = 1,
	E_MAX                                    = 2,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELAuraNPCKindType
// NumValues: 0x000B
enum class ELAuraNPCKindType : uint8
{
	E_NONE                                   = 0,
	E_PUPPET                                 = 1,
	E_CARCASS                                = 2,
	E_STALKER                                = 3,
	E_REBORNER                               = 4,
	E_EXILE                                  = 5,
	E_PCSLAVE                                = 6,
	E_PC                                     = 7,
	E_ALLPCTEAM                              = 8,
	E_MAX                                    = 9,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELAbnormalEnchantType
// NumValues: 0x000B
enum class ELAbnormalEnchantType : uint8
{
	E_NONE                                   = 0,
	E_FIRE                                   = 1,
	E_ELECTRIC                               = 2,
	E_ACID                                   = 3,
	E_GUARD                                  = 4,
	E_DESTRUCTION                            = 5,
	E_CRITICAL                               = 6,
	E_FRENZY                                 = 7,
	E_TOUGH                                  = 8,
	E_MAX                                    = 9,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELAbnormalExecType
// NumValues: 0x0007
enum class ELAbnormalExecType : uint8
{
	E_GIVE_ABNORMALSTATE                     = 0,
	E_CANCEL_ABNORMALSTATE                   = 1,
	E_RECHARGE_ITEM_FULL                     = 2,
	E_RECHARGE_ITEM_NUM                      = 3,
	E_GIVE_ABNORMALSTATE_BUILDUP_DMG         = 4,
	E_MAX                                    = 5,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELBuildupGuardType
// NumValues: 0x0007
enum class ELBuildupGuardType : uint8
{
	E_NONE                                   = 0,
	E_PHYSICAL                               = 1,
	E_FIRE                                   = 2,
	E_ELECTRIC                               = 3,
	E_ACID                                   = 4,
	E_MAX                                    = 5,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELStateEffectTargetType
// NumValues: 0x0005
enum class ELStateEffectTargetType : uint8
{
	E_NONE                                   = 0,
	E_MYSELF                                 = 1,
	E_OTHER                                  = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELAbnormalAttackType
// NumValues: 0x0009
enum class ELAbnormalAttackType : uint8
{
	E_NONE                                   = 0,
	E_PHYSICAL_SLASH                         = 1,
	E_PHYSICAL_PIERCE                        = 2,
	E_PHYSICAL_STRIKE                        = 3,
	E_FIRE_ATTACK                            = 4,
	E_ELECTRIC_ATTACK                        = 5,
	E_ACID_ATTACK                            = 6,
	E_MAX                                    = 7,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELAbnormalDamageHealTargetType
// NumValues: 0x000D
enum class ELAbnormalDamageHealTargetType : uint8
{
	E_NONE                                   = 0,
	E_HEALTH_POINT                           = 1,
	E_STAMINA_POINT                          = 2,
	E_FRENZY_POINT                           = 3,
	E_SLAVE_MAGAZINE_POINT                   = 4,
	E_ABNORMALSTATE_RESIST                   = 5,
	E_REGAINHP_POINT                         = 6,
	E_SHARPNESS_POINT                        = 7,
	E_DURABILITY                             = 8,
	E_PULSE_RECHARGE_POINT                   = 9,
	E_CURRENT_EXP                            = 10,
	E_MAX                                    = 11,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELAbnormalStackType
// NumValues: 0x0007
enum class ELAbnormalStackType : uint8
{
	E_NONE                                   = 0,
	E_DISALLOW                               = 1,
	E_OVERLAP                                = 2,
	E_OVERLAP_RESET_TIME                     = 3,
	E_OVERWRITE                              = 4,
	E_MAX                                    = 5,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELAbnormalBuffDebuffType
// NumValues: 0x0004
enum class ELAbnormalBuffDebuffType : uint8
{
	E_BUFF                                   = 0,
	E_DEBUFF                                 = 1,
	E_MAX                                    = 2,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELAbnormalActivation
// NumValues: 0x0006
enum class ELAbnormalActivation : uint8
{
	E_ACTIVE                                 = 0,
	E_PASSIVE                                = 1,
	E_FRENZY                                 = 2,
	E_GAUGE                                  = 4,
	E_MAX                                    = 5,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELAbnormalAbstateClass
// NumValues: 0x000A
enum class ELAbnormalAbstateClass : uint8
{
	E_NONE                                   = 0,
	E_FIRE                                   = 1,
	E_ELECTRIC                               = 2,
	E_ACID                                   = 3,
	E_CURSE                                  = 4,
	E_CONTAMINATION                          = 5,
	E_IMPACT                                 = 6,
	E_BREAK                                  = 7,
	E_MAX                                    = 8,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELAchieveGradeType
// NumValues: 0x0007
enum class ELAchieveGradeType : uint8
{
	E_NONE                                   = 0,
	E_GRADE_BRONZE                           = 1,
	E_GRADE_SILVER                           = 2,
	E_GRADE_GOLD                             = 3,
	E_GRADE_PLATINUM                         = 4,
	E_MAX                                    = 5,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.EContentInfoExecutePin
// NumValues: 0x0003
enum class EContentInfoExecutePin : uint8
{
	IsValid                                  = 0,
	IsNotValid                               = 1,
	EContentInfoExecutePin_MAX               = 2,
};

// Enum ProjectPContentInfo.EPatchRewardEnumType
// NumValues: 0x0002
enum class EPatchRewardEnumType : uint8
{
	EPatchRewardEnum_T_NIL                   = 0,
	EPatchRewardEnum_T_MAX                   = 1,
};

// Enum ProjectPContentInfo.EImageResourceEnumType
// NumValues: 0x0002
enum class EImageResourceEnumType : uint8
{
	EImageResourceEnum_T_NIL                 = 0,
	EImageResourceEnum_T_MAX                 = 1,
};

// Enum ProjectPContentInfo.EDLCEnumType
// NumValues: 0x0002
enum class EDLCEnumType : uint8
{
	EDLCEnum_T_NIL                           = 0,
	EDLCEnum_T_MAX                           = 1,
};

// Enum ProjectPContentInfo.EAchievementListEnumType
// NumValues: 0x0002
enum class EAchievementListEnumType : uint8
{
	EAchievementListEnum_T_NIL               = 0,
	EAchievementListEnum_T_MAX               = 1,
};

// Enum ProjectPContentInfo.ETitleSetEnumType
// NumValues: 0x0002
enum class ETitleSetEnumType : uint8
{
	ETitleSetEnum_T_NIL                      = 0,
	ETitleSetEnum_T_MAX                      = 1,
};

// Enum ProjectPContentInfo.EResetSystemSettingEnumType
// NumValues: 0x0002
enum class EResetSystemSettingEnumType : uint8
{
	EResetSystemSettingEnum_T_NIL            = 0,
	EResetSystemSettingEnum_T_MAX            = 1,
};

// Enum ProjectPContentInfo.ERecollectionEnumType
// NumValues: 0x0002
enum class ERecollectionEnumType : uint8
{
	ERecollectionEnum_T_NIL                  = 0,
	ERecollectionEnum_T_MAX                  = 1,
};

// Enum ProjectPContentInfo.ENGPKeepConfigEnumType
// NumValues: 0x0002
enum class ENGPKeepConfigEnumType : uint8
{
	ENGPKeepConfigEnum_T_NIL                 = 0,
	ENGPKeepConfigEnum_T_MAX                 = 1,
};

// Enum ProjectPContentInfo.EMovieResourceEnumType
// NumValues: 0x0002
enum class EMovieResourceEnumType : uint8
{
	EMovieResourceEnum_T_NIL                 = 0,
	EMovieResourceEnum_T_MAX                 = 1,
};

// Enum ProjectPContentInfo.EDialogMonsterMonologueEnumType
// NumValues: 0x0002
enum class EDialogMonsterMonologueEnumType : uint8
{
	EDialogMonsterMonologueEnum_T_NIL        = 0,
	EDialogMonsterMonologueEnum_T_MAX        = 1,
};

// Enum ProjectPContentInfo.ESpotMatchEnumType
// NumValues: 0x0002
enum class ESpotMatchEnumType : uint8
{
	ESpotMatchEnum_T_NIL                     = 0,
	ESpotMatchEnum_T_MAX                     = 1,
};

// Enum ProjectPContentInfo.ESpawnControllerEnumType
// NumValues: 0x0002
enum class ESpawnControllerEnumType : uint8
{
	ESpawnControllerEnum_T_NIL               = 0,
	ESpawnControllerEnum_T_MAX               = 1,
};

// Enum ProjectPContentInfo.EActionStateEnumType
// NumValues: 0x0002
enum class EActionStateEnumType : uint8
{
	EActionStateEnum_T_NIL                   = 0,
	EActionStateEnum_T_MAX                   = 1,
};

// Enum ProjectPContentInfo.EShopSpecialEnumType
// NumValues: 0x0002
enum class EShopSpecialEnumType : uint8
{
	EShopSpecialEnum_T_NIL                   = 0,
	EShopSpecialEnum_T_MAX                   = 1,
};

// Enum ProjectPContentInfo.EWorldZoneEnumType
// NumValues: 0x0002
enum class EWorldZoneEnumType : uint8
{
	EWorldZoneEnum_T_NIL                     = 0,
	EWorldZoneEnum_T_MAX                     = 1,
};

// Enum ProjectPContentInfo.EWeatherChangeEventEnumType
// NumValues: 0x0002
enum class EWeatherChangeEventEnumType : uint8
{
	EWeatherChangeEventEnum_T_NIL            = 0,
	EWeatherChangeEventEnum_T_MAX            = 1,
};

// Enum ProjectPContentInfo.EWeatherEnumType
// NumValues: 0x0002
enum class EWeatherEnumType : uint8
{
	EWeatherEnum_T_NIL                       = 0,
	EWeatherEnum_T_MAX                       = 1,
};

// Enum ProjectPContentInfo.EElementalAttackSettingEnumType
// NumValues: 0x0002
enum class EElementalAttackSettingEnumType : uint8
{
	EElementalAttackSettingEnum_T_NIL        = 0,
	EElementalAttackSettingEnum_T_MAX        = 1,
};

// Enum ProjectPContentInfo.EQuestDescEnumType
// NumValues: 0x0002
enum class EQuestDescEnumType : uint8
{
	EQuestDescEnum_T_NIL                     = 0,
	EQuestDescEnum_T_MAX                     = 1,
};

// Enum ProjectPContentInfo.EDynamicDamageVolumeEnumType
// NumValues: 0x0002
enum class EDynamicDamageVolumeEnumType : uint8
{
	EDynamicDamageVolumeEnum_T_NIL           = 0,
	EDynamicDamageVolumeEnum_T_MAX           = 1,
};

// Enum ProjectPContentInfo.ELevelSequenceEnumType
// NumValues: 0x0002
enum class ELevelSequenceEnumType : uint8
{
	ELevelSequenceEnum_T_NIL                 = 0,
	ELevelSequenceEnum_T_MAX                 = 1,
};

// Enum ProjectPContentInfo.ESlaveArmTreeEnumType
// NumValues: 0x0002
enum class ESlaveArmTreeEnumType : uint8
{
	ESlaveArmTreeEnum_T_NIL                  = 0,
	ESlaveArmTreeEnum_T_MAX                  = 1,
};

// Enum ProjectPContentInfo.ESlaveArmPageEnumType
// NumValues: 0x0002
enum class ESlaveArmPageEnumType : uint8
{
	ESlaveArmPageEnum_T_NIL                  = 0,
	ESlaveArmPageEnum_T_MAX                  = 1,
};

// Enum ProjectPContentInfo.EShopEnumType
// NumValues: 0x0002
enum class EShopEnumType : uint8
{
	EShopEnum_T_NIL                          = 0,
	EShopEnum_T_MAX                          = 1,
};

// Enum ProjectPContentInfo.ESpotTalkerMatchingEnumType
// NumValues: 0x0002
enum class ESpotTalkerMatchingEnumType : uint8
{
	ESpotTalkerMatchingEnum_T_NIL            = 0,
	ESpotTalkerMatchingEnum_T_MAX            = 1,
};

// Enum ProjectPContentInfo.ETalkerEnumType
// NumValues: 0x0002
enum class ETalkerEnumType : uint8
{
	ETalkerEnum_T_NIL                        = 0,
	ETalkerEnum_T_MAX                        = 1,
};

// Enum ProjectPContentInfo.EWeaponAnimStateEnumType
// NumValues: 0x0002
enum class EWeaponAnimStateEnumType : uint8
{
	EWeaponAnimStateEnum_T_NIL               = 0,
	EWeaponAnimStateEnum_T_MAX               = 1,
};

// Enum ProjectPContentInfo.EComboTypeEnumType
// NumValues: 0x0002
enum class EComboTypeEnumType : uint8
{
	EComboTypeEnum_T_NIL                     = 0,
	EComboTypeEnum_T_MAX                     = 1,
};

// Enum ProjectPContentInfo.ESpecialBuffEnumType
// NumValues: 0x0002
enum class ESpecialBuffEnumType : uint8
{
	ESpecialBuffEnum_T_NIL                   = 0,
	ESpecialBuffEnum_T_MAX                   = 1,
};

// Enum ProjectPContentInfo.ECommonConstantEnumType
// NumValues: 0x0002
enum class ECommonConstantEnumType : uint8
{
	ECommonConstantEnum_T_NIL                = 0,
	ECommonConstantEnum_T_MAX                = 1,
};

// Enum ProjectPContentInfo.EQuartzEffectEnumType
// NumValues: 0x0002
enum class EQuartzEffectEnumType : uint8
{
	EQuartzEffectEnum_T_NIL                  = 0,
	EQuartzEffectEnum_T_MAX                  = 1,
};

// Enum ProjectPContentInfo.EQuartzPocketEnumType
// NumValues: 0x0002
enum class EQuartzPocketEnumType : uint8
{
	EQuartzPocketEnum_T_NIL                  = 0,
	EQuartzPocketEnum_T_MAX                  = 1,
};

// Enum ProjectPContentInfo.EGlobalVariableEnumType
// NumValues: 0x0002
enum class EGlobalVariableEnumType : uint8
{
	EGlobalVariableEnum_T_NIL                = 0,
	EGlobalVariableEnum_T_MAX                = 1,
};

// Enum ProjectPContentInfo.EAbnormalStateCommonEnumType
// NumValues: 0x0002
enum class EAbnormalStateCommonEnumType : uint8
{
	EAbnormalStateCommonEnum_T_NIL           = 0,
	EAbnormalStateCommonEnum_T_MAX           = 1,
};

// Enum ProjectPContentInfo.ESkillHitEnumType
// NumValues: 0x0002
enum class ESkillHitEnumType : uint8
{
	ESkillHitEnum_T_NIL                      = 0,
	ESkillHitEnum_T_MAX                      = 1,
};

// Enum ProjectPContentInfo.ELocationEnumType
// NumValues: 0x0002
enum class ELocationEnumType : uint8
{
	ELocationEnum_T_NIL                      = 0,
	ELocationEnum_T_MAX                      = 1,
};

// Enum ProjectPContentInfo.ETeleportObjectEnumType
// NumValues: 0x0002
enum class ETeleportObjectEnumType : uint8
{
	ETeleportObjectEnum_T_NIL                = 0,
	ETeleportObjectEnum_T_MAX                = 1,
};

// Enum ProjectPContentInfo.ECommonActionMontageEnumType
// NumValues: 0x0002
enum class ECommonActionMontageEnumType : uint8
{
	ECommonActionMontageEnum_T_NIL           = 0,
	ECommonActionMontageEnum_T_MAX           = 1,
};

// Enum ProjectPContentInfo.EActionPathEnumType
// NumValues: 0x0002
enum class EActionPathEnumType : uint8
{
	EActionPathEnum_T_NIL                    = 0,
	EActionPathEnum_T_MAX                    = 1,
};

// Enum ProjectPContentInfo.EActionClassEnumType
// NumValues: 0x0002
enum class EActionClassEnumType : uint8
{
	EActionClassEnum_T_NIL                   = 0,
	EActionClassEnum_T_MAX                   = 1,
};

// Enum ProjectPContentInfo.EItemRedundancyExchangeEnumType
// NumValues: 0x0002
enum class EItemRedundancyExchangeEnumType : uint8
{
	EItemRedundancyExchangeEnum_T_NIL        = 0,
	EItemRedundancyExchangeEnum_T_MAX        = 1,
};

// Enum ProjectPContentInfo.EHandleStatCorrectionChangeEnumType
// NumValues: 0x0002
enum class EHandleStatCorrectionChangeEnumType : uint8
{
	EHandleStatCorrectionChangeEnum_T_NIL    = 0,
	EHandleStatCorrectionChangeEnum_T_MAX    = 1,
};

// Enum ProjectPContentInfo.EItemBladeEnumType
// NumValues: 0x0002
enum class EItemBladeEnumType : uint8
{
	EItemBladeEnum_T_NIL                     = 0,
	EItemBladeEnum_T_MAX                     = 1,
};

// Enum ProjectPContentInfo.EItemHandleEnumType
// NumValues: 0x0002
enum class EItemHandleEnumType : uint8
{
	EItemHandleEnum_T_NIL                    = 0,
	EItemHandleEnum_T_MAX                    = 1,
};

// Enum ProjectPContentInfo.EItemSlaveArmEnumType
// NumValues: 0x0002
enum class EItemSlaveArmEnumType : uint8
{
	EItemSlaveArmEnum_T_NIL                  = 0,
	EItemSlaveArmEnum_T_MAX                  = 1,
};

// Enum ProjectPContentInfo.EItemWeaponMonsterEnumType
// NumValues: 0x0002
enum class EItemWeaponMonsterEnumType : uint8
{
	EItemWeaponMonsterEnum_T_NIL             = 0,
	EItemWeaponMonsterEnum_T_MAX             = 1,
};

// Enum ProjectPContentInfo.EBladeWeightEnumType
// NumValues: 0x0002
enum class EBladeWeightEnumType : uint8
{
	EBladeWeightEnum_T_NIL                   = 0,
	EBladeWeightEnum_T_MAX                   = 1,
};

// Enum ProjectPContentInfo.EItemConsumeEnumType
// NumValues: 0x0002
enum class EItemConsumeEnumType : uint8
{
	EItemConsumeEnum_T_NIL                   = 0,
	EItemConsumeEnum_T_MAX                   = 1,
};

// Enum ProjectPContentInfo.EItemCollectionEnumType
// NumValues: 0x0002
enum class EItemCollectionEnumType : uint8
{
	EItemCollectionEnum_T_NIL                = 0,
	EItemCollectionEnum_T_MAX                = 1,
};

// Enum ProjectPContentInfo.EItemPartsEnumType
// NumValues: 0x0002
enum class EItemPartsEnumType : uint8
{
	EItemPartsEnum_T_NIL                     = 0,
	EItemPartsEnum_T_MAX                     = 1,
};

// Enum ProjectPContentInfo.ECorrectionWeaponFirstStatEnumType
// NumValues: 0x0002
enum class ECorrectionWeaponFirstStatEnumType : uint8
{
	ECorrectionWeaponFirstStatEnum_T_NIL     = 0,
	ECorrectionWeaponFirstStatEnum_T_MAX     = 1,
};

// Enum ProjectPContentInfo.EItemCostumeEnumType
// NumValues: 0x0002
enum class EItemCostumeEnumType : uint8
{
	EItemCostumeEnum_T_NIL                   = 0,
	EItemCostumeEnum_T_MAX                   = 1,
};

// Enum ProjectPContentInfo.EItemCommonEnumType
// NumValues: 0x0002
enum class EItemCommonEnumType : uint8
{
	EItemCommonEnum_T_NIL                    = 0,
	EItemCommonEnum_T_MAX                    = 1,
};

// Enum ProjectPContentInfo.EItemPackageEnumType
// NumValues: 0x0002
enum class EItemPackageEnumType : uint8
{
	EItemPackageEnum_T_NIL                   = 0,
	EItemPackageEnum_T_MAX                   = 1,
};

// Enum ProjectPContentInfo.EDefaultStatEnumType
// NumValues: 0x0002
enum class EDefaultStatEnumType : uint8
{
	EDefaultStatEnum_T_NIL                   = 0,
	EDefaultStatEnum_T_MAX                   = 1,
};

// Enum ProjectPContentInfo.ELevelHumanityEnumType
// NumValues: 0x0002
enum class ELevelHumanityEnumType : uint8
{
	ELevelHumanityEnum_T_NIL                 = 0,
	ELevelHumanityEnum_T_MAX                 = 1,
};

// Enum ProjectPContentInfo.ELevelExpEnumType
// NumValues: 0x0002
enum class ELevelExpEnumType : uint8
{
	ELevelExpEnum_T_NIL                      = 0,
	ELevelExpEnum_T_MAX                      = 1,
};

// Enum ProjectPContentInfo.ECommandEnumType
// NumValues: 0x0002
enum class ECommandEnumType : uint8
{
	ECommandEnum_T_NIL                       = 0,
	ECommandEnum_T_MAX                       = 1,
};

// Enum ProjectPContentInfo.EProjectileEnumType
// NumValues: 0x0002
enum class EProjectileEnumType : uint8
{
	EProjectileEnum_T_NIL                    = 0,
	EProjectileEnum_T_MAX                    = 1,
};

// Enum ProjectPContentInfo.ESkillMoveEnumType
// NumValues: 0x0002
enum class ESkillMoveEnumType : uint8
{
	ESkillMoveEnum_T_NIL                     = 0,
	ESkillMoveEnum_T_MAX                     = 1,
};

// Enum ProjectPContentInfo.EWorldRuleEnumType
// NumValues: 0x0002
enum class EWorldRuleEnumType : uint8
{
	EWorldRuleEnum_T_NIL                     = 0,
	EWorldRuleEnum_T_MAX                     = 1,
};

// Enum ProjectPContentInfo.ESkillEnumType
// NumValues: 0x0002
enum class ESkillEnumType : uint8
{
	ESkillEnum_T_NIL                         = 0,
	ESkillEnum_T_MAX                         = 1,
};

// Enum ProjectPContentInfo.EComboEnumType
// NumValues: 0x0002
enum class EComboEnumType : uint8
{
	EComboEnum_T_NIL                         = 0,
	EComboEnum_T_MAX                         = 1,
};

// Enum ProjectPContentInfo.EFlagFilterEnumType
// NumValues: 0x0002
enum class EFlagFilterEnumType : uint8
{
	EFlagFilterEnum_T_NIL                    = 0,
	EFlagFilterEnum_T_MAX                    = 1,
};

// Enum ProjectPContentInfo.EImmuneEnumType
// NumValues: 0x0002
enum class EImmuneEnumType : uint8
{
	EImmuneEnum_T_NIL                        = 0,
	EImmuneEnum_T_MAX                        = 1,
};

// Enum ProjectPContentInfo.EGameStringEnumType
// NumValues: 0x0002
enum class EGameStringEnumType : uint8
{
	EGameStringEnum_T_NIL                    = 0,
	EGameStringEnum_T_MAX                    = 1,
};

// Enum ProjectPContentInfo.ENPCBodyWeaponEnumType
// NumValues: 0x0002
enum class ENPCBodyWeaponEnumType : uint8
{
	ENPCBodyWeaponEnum_T_NIL                 = 0,
	ENPCBodyWeaponEnum_T_MAX                 = 1,
};

// Enum ProjectPContentInfo.ENpcStatEnumType
// NumValues: 0x0002
enum class ENpcStatEnumType : uint8
{
	ENpcStatEnum_T_NIL                       = 0,
	ENpcStatEnum_T_MAX                       = 1,
};

// Enum ProjectPContentInfo.ENpcSkillLinkEnumType
// NumValues: 0x0002
enum class ENpcSkillLinkEnumType : uint8
{
	ENpcSkillLinkEnum_T_NIL                  = 0,
	ENpcSkillLinkEnum_T_MAX                  = 1,
};

// Enum ProjectPContentInfo.ENpcEnumType
// NumValues: 0x0002
enum class ENpcEnumType : uint8
{
	ENpcEnum_T_NIL                           = 0,
	ENpcEnum_T_MAX                           = 1,
};

// Enum ProjectPContentInfo.ELoadingTipEnumType
// NumValues: 0x0002
enum class ELoadingTipEnumType : uint8
{
	ELoadingTipEnum_T_NIL                    = 0,
	ELoadingTipEnum_T_MAX                    = 1,
};

// Enum ProjectPContentInfo.ELoadingScreenEnumType
// NumValues: 0x0002
enum class ELoadingScreenEnumType : uint8
{
	ELoadingScreenEnum_T_NIL                 = 0,
	ELoadingScreenEnum_T_MAX                 = 1,
};

// Enum ProjectPContentInfo.ELocalDataEnumType
// NumValues: 0x0002
enum class ELocalDataEnumType : uint8
{
	ELocalDataEnum_T_NIL                     = 0,
	ELocalDataEnum_T_MAX                     = 1,
};

// Enum ProjectPContentInfo.ELLieType
// NumValues: 0x0004
enum class ELLieType : uint8
{
	E_LOW                                    = 0,
	E_HIGH                                   = 1,
	E_MAX                                    = 2,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELAgressiveRecoverType
// NumValues: 0x0005
enum class ELAgressiveRecoverType : uint8
{
	E_NONE                                   = 0,
	E_INSTANTLY_ON_PEACE                     = 1,
	E_NEXT_RESET                             = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELTalkStarterType
// NumValues: 0x0004
enum class ELTalkStarterType : uint8
{
	E_QUEST_DIALOG_STARTER                   = 0,
	E_ENTRY                                  = 1,
	E_MAX                                    = 2,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELDialogExecutionType
// NumValues: 0x0012
enum class ELDialogExecutionType : uint8
{
	E_LINK_DIALOG                            = 0,
	E_LINK_MENU                              = 1,
	E_LINK_CONTENT_UI                        = 2,
	E_EXIT                                   = 3,
	E_LINK_QUEST_STARTER                     = 4,
	E_LINK_SHOP                              = 5,
	E_LINK_SELL                              = 6,
	E_LINK_UPGRADE_CORE_LEVEL                = 7,
	E_LINK_LEVEL_RESET                       = 8,
	E_LINK_SPECIAL_SHOP                      = 9,
	E_LINK_P_SYSTEM_RESET                    = 10,
	E_LINK_SLAVEARM_REINFORCE_RESET          = 11,
	E_HAIR_WLONG                             = 12,
	E_HAIR_LONG                              = 13,
	E_HAIR_BASIC                             = 14,
	E_HAIR_WBASIC                            = 15,
	E_MAX                                    = 16,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELDialogDialogType
// NumValues: 0x0007
enum class ELDialogDialogType : uint8
{
	E_DIALOG                                 = 0,
	E_MENU_CAPTION                           = 1,
	E_MENU_ITEM                              = 2,
	E_LIST_CAPTION                           = 3,
	E_LIST                                   = 4,
	E_MAX                                    = 5,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELDialogStepType
// NumValues: 0x0008
enum class ELDialogStepType : uint8
{
	E_ENTRY                                  = 0,
	E_LOBBY                                  = 1,
	E_NORMAL                                 = 2,
	E_MONOLOGUE                              = 3,
	E_MONOLOGUE_ENTRY                        = 4,
	E_ESSENTIAL                              = 5,
	E_MAX                                    = 6,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELFableConsumeUIType
// NumValues: 0x0006
enum class ELFableConsumeUIType : uint8
{
	E_NONE                                   = 0,
	E_FABLE_HANDLE                           = 1,
	E_FABLE_BLADE                            = 2,
	E_FABLE_SLAVEARM                         = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELHumanityNoseStaffFormType
// NumValues: 0x0005
enum class ELHumanityNoseStaffFormType : uint8
{
	E_SMALL                                  = 0,
	E_MEDIUM                                 = 1,
	E_LARGE                                  = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELMessageAlertType
// NumValues: 0x0004
enum class ELMessageAlertType : uint8
{
	E_SYSTEM                                 = 0,
	E_NARRATION                              = 1,
	E_MAX                                    = 2,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELDialogLookatBone
// NumValues: 0x0006
enum class ELDialogLookatBone : uint8
{
	E_NONE                                   = 0,
	E_IDLE                                   = 1,
	E_PC                                     = 2,
	E_SPOT                                   = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELItemFirstCategory
// NumValues: 0x000E
enum class ELItemFirstCategory : uint8
{
	E_NONE                                   = 0,
	E_WEAPON                                 = 1,
	E_CONSUME                                = 2,
	E_MATERIAL                               = 3,
	E_COLLECTION                             = 4,
	E_WP_COMPONENT                           = 5,
	E_SLAVEARM                               = 6,
	E_PARTS                                  = 7,
	E_COSTUME                                = 8,
	E_GESTURE                                = 9,
	E_CORE_ITEM                              = 10,
	E_GEAR                                   = 11,
	E_MAX                                    = 12,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELGrapplegunHitType
// NumValues: 0x0006
enum class ELGrapplegunHitType : uint8
{
	E_NONE                                   = 0,
	E_PULLING_ONLY                           = 1,
	E_FOLLOWING_ONLY                         = 2,
	E_BOTH                                   = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELLinkedPropExecute
// NumValues: 0x0005
enum class ELLinkedPropExecute : uint8
{
	E_NONE                                   = 0,
	E_STATE_CHANGE                           = 1,
	E_INTERACTION                            = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELConditionLoadingType
// NumValues: 0x0006
enum class ELConditionLoadingType : uint8
{
	E_NONE                                   = 0,
	E_TITLE_ONLY                             = 1,
	E_NOT_TITLE                              = 2,
	E_MOVE_CHAPTER                           = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELTutorialWidgetType
// NumValues: 0x0007
enum class ELTutorialWidgetType : uint8
{
	E_NONE                                   = 0,
	E_MESSAGE                                = 1,
	E_WINDOW_CENTER                          = 2,
	E_WINDOW_LEFT                            = 3,
	E_WINDOW_RIGHT                           = 4,
	E_MAX                                    = 5,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELQuestState
// NumValues: 0x0006
enum class ELQuestState : uint8
{
	E_NONE                                   = 0,
	E_IN_PROGRESS                            = 1,
	E_COMPLETE_SUCCESS                       = 2,
	E_COMPLETE_FAIL                          = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELWeaponBreakMotionType
// NumValues: 0x0004
enum class ELWeaponBreakMotionType : uint8
{
	E_NORMAL                                 = 0,
	E_SPECIAL                                = 1,
	E_MAX                                    = 2,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELAIDamageType
// NumValues: 0x0007
enum class ELAIDamageType : uint8
{
	E_NONE                                   = 0,
	E_ONLY_DAMAGE                            = 1,
	E_ONLY_HITACTION                         = 2,
	E_PERPECT_GUARD                          = 3,
	E_ALL                                    = 4,
	E_MAX                                    = 5,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELWeaponPartType
// NumValues: 0x0006
enum class ELWeaponPartType : uint8
{
	E_NONE                                   = 0,
	E_HANDLE_ONLY                            = 1,
	E_BLADE_ONLY                             = 2,
	E_BOTH                                   = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELCrashType
// NumValues: 0x0007
enum class ELCrashType : uint8
{
	E_NONE                                   = 0,
	E_SMASH                                  = 1,
	E_SPARK                                  = 2,
	E_REPULSE                                = 3,
	E_HIT                                    = 4,
	E_MAX                                    = 5,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELCollisionOwnerType
// NumValues: 0x0009
enum class ELCollisionOwnerType : uint8
{
	E_NONE                                   = 0,
	E_ATTACK                                 = 1,
	E_DESTRUCTION_ONLY                       = 2,
	E_GUARD                                  = 3,
	E_GUARD_NOSTIFFEN                        = 4,
	E_GUARD_REFLECT                          = 5,
	E_GUARD_ALWAYS                           = 6,
	E_MAX                                    = 7,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELFatalEnableCondType
// NumValues: 0x0006
enum class ELFatalEnableCondType : uint8
{
	E_NONE                                   = 0,
	E_NOTIFY                                 = 1,
	E_GROGGYENABLE_ING                       = 2,
	E_ALWAYS                                 = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELTrackingDirectionType
// NumValues: 0x0005
enum class ELTrackingDirectionType : uint8
{
	E_NONE                                   = 0,
	E_LEFT                                   = 1,
	E_RIGHT                                  = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELPropVolumeStateCheckType
// NumValues: 0x0007
enum class ELPropVolumeStateCheckType : uint8
{
	E_NONE                                   = 0,
	E_ENTER_NEXT_STATE                       = 1,
	E_EXIT_NEXT_STATE                        = 2,
	E_ENTER_SET_STATE                        = 3,
	E_EXIT_SET_STATE                         = 4,
	E_MAX                                    = 5,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELWeatherType
// NumValues: 0x0006
enum class ELWeatherType : uint8
{
	E_DRY                                    = 0,
	E_RAINY                                  = 1,
	E_WET                                    = 2,
	E_DONT_CARE                              = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELTimeZoneType
// NumValues: 0x0008
enum class ELTimeZoneType : uint8
{
	E_DAY                                    = 0,
	E_EVENING                                = 1,
	E_SUNSET                                 = 2,
	E_DAWN                                   = 3,
	E_NIGHT                                  = 4,
	E_DONT_CARE                              = 5,
	E_MAX                                    = 6,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELWorldZoneType
// NumValues: 0x000A
enum class ELWorldZoneType : uint8
{
	E_A                                      = 0,
	E_B                                      = 1,
	E_C                                      = 2,
	E_D                                      = 3,
	E_E                                      = 4,
	E_H                                      = 5,
	E_I                                      = 6,
	E_S                                      = 7,
	E_MAX                                    = 8,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELLightScenarioType
// NumValues: 0x0005
enum class ELLightScenarioType : uint8
{
	E_NIGHT                                  = 0,
	E_DAY                                    = 1,
	E_DONT_CARE                              = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELAIRangeCheckType
// NumValues: 0x0008
enum class ELAIRangeCheckType : uint8
{
	E_NONE                                   = 0,
	E_NORMAL                                 = 1,
	E_PATH_DIRECT                            = 2,
	E_PATH_NAVI                              = 3,
	E_PATH_DIRECT_NAVI                       = 4,
	E_PATH_DIRECT_PROJECTILE                 = 5,
	E_MAX                                    = 6,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELAISkillRangeCheckType
// NumValues: 0x0005
enum class ELAISkillRangeCheckType : uint8
{
	E_NORMAL                                 = 0,
	E_PATH_DIRECT                            = 1,
	E_PATH_NAVI                              = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELDropType
// NumValues: 0x0005
enum class ELDropType : uint8
{
	E_ITEM                                   = 0,
	E_DROPSET                                = 1,
	E_DROPSET_REPEAT                         = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELFirstKillRewardType
// NumValues: 0x0005
enum class ELFirstKillRewardType : uint8
{
	E_NONE                                   = 0,
	E_RESET_FINISH_GAME                      = 1,
	E_NO_RESET                               = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELFxVictimType
// NumValues: 0x0006
enum class ELFxVictimType : uint8
{
	E_ALL                                    = 0,
	E_PC                                     = 1,
	E_NPC                                    = 2,
	E_ELSE                                   = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELCommonActionType
// NumValues: 0x0005
enum class ELCommonActionType : uint8
{
	E_NONE                                   = 0,
	E_COMMON                                 = 1,
	E_LOCOMOTION                             = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELExplosionPowerType
// NumValues: 0x0006
enum class ELExplosionPowerType : uint8
{
	E_NONE                                   = 0,
	E_LIGHT                                  = 1,
	E_MEDIUM                                 = 2,
	E_HEAVY                                  = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELExplosionDirectionType
// NumValues: 0x0007
enum class ELExplosionDirectionType : uint8
{
	E_NONE                                   = 0,
	E_HIT_DIRECTION                          = 1,
	E_VICTIM_CENTER                          = 2,
	E_ATTACKER_FORWARD                       = 3,
	E_ATTACKER_BACKWARD                      = 4,
	E_MAX                                    = 5,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELNPCType
// NumValues: 0x000A
enum class ELNPCType : uint8
{
	E_NONE                                   = 0,
	E_PUPPET                                 = 1,
	E_CARCASS                                = 2,
	E_STALKER                                = 3,
	E_REBORNER                               = 4,
	E_EXILE                                  = 5,
	E_PCSLAVE                                = 6,
	E_ETC                                    = 7,
	E_MAX                                    = 8,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELParryType
// NumValues: 0x0006
enum class ELParryType : uint8
{
	E_NONE                                   = 0,
	E_GUARD_ONLY                             = 1,
	E_DASH_ONLY                              = 2,
	E_BOTH                                   = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELAbnomalStateApplyType
// NumValues: 0x0005
enum class ELAbnomalStateApplyType : uint8
{
	E_NONE                                   = 0,
	E_BUILDUP                                = 1,
	E_DIRECT_APPLY                           = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELInteractionEvokeType
// NumValues: 0x0006
enum class ELInteractionEvokeType : uint8
{
	E_NONE                                   = 0,
	E_ENTER                                  = 1,
	E_EXIT                                   = 2,
	E_ENTER_EXIT                             = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELPropInteractType
// NumValues: 0x0005
enum class ELPropInteractType : uint8
{
	E_NONE                                   = 0,
	E_BUTTON                                 = 1,
	E_INTERACTION_VOLUME_OVERLAP             = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELPropLiftStateType
// NumValues: 0x0006
enum class ELPropLiftStateType : uint8
{
	E_BROKEN                                 = 0,
	E_POINT_A_WAITING                        = 1,
	E_MOVE_STATE                             = 2,
	E_POINT_B_WAITING                        = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELHpDiscountMethod
// NumValues: 0x0004
enum class ELHpDiscountMethod : uint8
{
	E_HP                                     = 0,
	E_COUNT                                  = 1,
	E_MAX                                    = 2,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELDestructionConditionActionType
// NumValues: 0x0005
enum class ELDestructionConditionActionType : uint8
{
	E_ALL                                    = 0,
	E_SKILL                                  = 1,
	E_SKILLHIT                               = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELReserveType
// NumValues: 0x0005
enum class ELReserveType : uint8
{
	E_NONE                                   = 0,
	E_APPLY                                  = 1,
	E_ALLOW                                  = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELSpecialBuffType
// NumValues: 0x003D
enum class ELSpecialBuffType : uint8
{
	E_NONE                                   = 0,
	E_ABNORMALSTATE                          = 1,
	E_ABNORMALSTATE_BUILDUP_DAMAGE_MULADD    = 2,
	E_ABNORMALSTATE_FRENZYACTIVE_CONDITION   = 3,
	E_ABNORMALSTATE_HP_CONDITION             = 4,
	E_ABNORMALSTATE_USEITEM_CONDITION        = 5,
	E_BACK_ATTACK_MULADD                     = 6,
	E_CHANGEWEAPON_ATTACK_MULADD             = 7,
	E_CHARGING_ATTACK_MULADD                 = 8,
	E_DEPRECIATED_CHARGING_PARALYZE_DAMAGE_MULADD = 9,
	E_DEFENCE_MULADD_HP_FULL_CONDITION       = 10,
	E_FALL_ATTACK_MULADD                     = 11,
	E_FALLDAMAGE_MULADD                      = 12,
	E_FATAL_ATTACK_HP_HEAL                   = 13,
	E_FATAL_ATTACK_MULADD                    = 14,
	E_FIRST_MONHIT_ATTACK_MULADD             = 15,
	E_GAINEXP_MULADD                         = 16,
	E_GAINFP_KILLMON                         = 17,
	E_GUARD_DAMAGE_MULADD                    = 18,
	E_GUARD_STAMINA_MULADD                   = 19,
	E_ITEMPRICE_MULADD                       = 20,
	E_LOCKON_BACK_MOVE_SPEED_MULADD          = 21,
	E_LOCKON_DISPLAY_MONSTER_TYPE            = 22,
	E_MON_ITEM_DROP_RATE_MULADD              = 23,
	E_DEPRECIATED_PUREWEAPON_ATTACK_MULADD   = 24,
	E_RAPIDHIT_ATTACK_MULADD                 = 25,
	E_RECHARGEABLE_MAX_STACK_ADD             = 26,
	E_SHARPNESS_RECOVER_OFFHAND              = 27,
	E_SLAVEMAGAZINE_CONSUME_MULADD           = 28,
	E_SPRINT_STAMINA_MULADD                  = 29,
	E_DROP_ERGO_RATE_WHEN_DIE_WITHOUT_RETRIEVAL_ERGO_MULADD = 30,
	E_DEPRECIATED_ENABLE_GUARD_FURY_ATTACK_WHEN_FRENZY_MODE = 31,
	E_PERFECT_GUARD_DECREASE_ENEMY_WEAPON_DURABILITY_MULADD = 32,
	E_STAMINA_RECOVER_WHEN_COUNTER_FURY_ATTACK_BY_FRENZY_ATTACK = 33,
	E_CHARGING_GROGGY_DAMAGE_MULADD          = 34,
	E_FURYATTACK_PERFECTGUARD_ADD_ABNORMALSTATE = 35,
	E_PULSE_RECHARGEBLE_COUNT_ADD            = 36,
	E_RESURRECTION                           = 37,
	E_FRENZY_MULADD                          = 38,
	E_COMPLEX_GROUP_RECHARGEABLE_MAX_STACK_ADD = 39,
	E_COMPLEX_GROUP_CONSUME_BUFF_DURATION_ADD = 40,
	E_FATAL_ATTACK_SMP_HEAL                  = 41,
	E_PULSE_RECHARGE_STATE_ADD_ABNORMALSTATE = 42,
	E_DEBUFF_STATE_ADD_ABNORMALSTATE         = 43,
	E_FABLEARTS_ACTIVE_ADD_ABNORMALSTATE     = 44,
	E_ITEM_CATEGORY_MAX_STACK_ADD            = 45,
	E_EQUIP_SLOT_UNLOCK                      = 46,
	E_GOLDENTREE_TIME_SUB                    = 47,
	E_GOLD_STACK_LIMIT_ADD                   = 48,
	E_ACTIONSTATE                            = 49,
	E_SHARPNESS_MAX_CONDITION_ATTACK_MULADD  = 50,
	E_GROGGY_ENABLE_ADD_TIME_RATIO           = 51,
	E_GROGGY_ADD_TIME_RATIO                  = 52,
	E_ABNORMAL_GROUP_DURATION_ADD            = 53,
	E_FRENZY_POINT_CURRENT_ATTACKUP          = 54,
	E_IGNORE_CONSUME_RECHARGEABLE_RATE       = 55,
	E_UPGRADE_ALL_CORRECTION_CODE            = 56,
	E_ABNORMALSTATE_PULSE_EMPTY_COUNT_CONDITION = 57,
	E_ABNORMAL_GROUP_DURATION_MULADD         = 58,
	E_MAX                                    = 59,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELPropLadderStateType
// NumValues: 0x0004
enum class ELPropLadderStateType : uint8
{
	E_LOCKED                                 = 0,
	E_USABLE                                 = 1,
	E_MAX                                    = 2,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELBladeShapeType
// NumValues: 0x0008
enum class ELBladeShapeType : uint8
{
	E_NONE                                   = 0,
	E_DAGGER                                 = 1,
	E_SWORD                                  = 2,
	E_GREATSWORD                             = 3,
	E_BLUNT                                  = 4,
	E_GREATBLUNT                             = 5,
	E_MAX                                    = 6,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELSwingPowerType
// NumValues: 0x0008
enum class ELSwingPowerType : uint8
{
	E_LIGHT                                  = 0,
	E_MEDIUM                                 = 1,
	E_HEAVY                                  = 2,
	E_VERYLIGHT                              = 3,
	E_VERYHEAVY                              = 4,
	E_NONE                                   = 99,
	E_MAX                                    = 100,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELAbnormalACalcType
// NumValues: 0x0007
enum class ELAbnormalACalcType : uint8
{
	E_HP_RATE                                = 0,
	E_ABS                                    = 1,
	E_DEFENCE_RATE                           = 2,
	E_ABS_AFTER_DIVIDE                       = 3,
	E_STAT_RATE                              = 4,
	E_MAX                                    = 5,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELAbnormalDHCalcType
// NumValues: 0x0006
enum class ELAbnormalDHCalcType : uint8
{
	E_RATE                                   = 0,
	E_ABS                                    = 1,
	E_ABS_REGAINBASE                         = 2,
	E_RATE_REGAINBASE                        = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELAbnormalCSCalcType
// NumValues: 0x0005
enum class ELAbnormalCSCalcType : uint8
{
	E_MUL_ADD                                = 0,
	E_MUL                                    = 1,
	E_ADD                                    = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELAdditiveHitType
// NumValues: 0x0005
enum class ELAdditiveHitType : uint8
{
	E_NONE                                   = 0,
	E_UPPER                                  = 1,
	E_FULLBODY                               = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELFxHitDirectionType
// NumValues: 0x0007
enum class ELFxHitDirectionType : uint8
{
	E_NONE                                   = 0,
	E_LEFT                                   = 1,
	E_RIGHT                                  = 2,
	E_FRONT                                  = 3,
	E_BACK                                   = 4,
	E_MAX                                    = 5,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELFatalEnableRangeType
// NumValues: 0x0005
enum class ELFatalEnableRangeType : uint8
{
	E_NONE                                   = 0,
	E_CYLINDER                               = 1,
	E_BOX                                    = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELFatalHitType
// NumValues: 0x0005
enum class ELFatalHitType : uint8
{
	E_NONE                                   = 0,
	E_NORMAL                                 = 1,
	E_SPECIAL                                = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELGroggyType
// NumValues: 0x0005
enum class ELGroggyType : uint8
{
	E_NONE                                   = 0,
	E_NORMAL                                 = 1,
	E_SPECIAL                                = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELToughMotionType
// NumValues: 0x0006
enum class ELToughMotionType : uint8
{
	E_NONE                                   = 0,
	E_NORMAL                                 = 1,
	E_SPECIAL                                = 2,
	E_NORMAL_FULL                            = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELParalyzeType
// NumValues: 0x0005
enum class ELParalyzeType : uint8
{
	E_NONE                                   = 0,
	E_NORMAL                                 = 1,
	E_SPECIAL                                = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELNPCCommonDirectionType
// NumValues: 0x0006
enum class ELNPCCommonDirectionType : uint8
{
	E_NONE                                   = 0,
	E_ALL                                    = 1,
	E_FRONT                                  = 2,
	E_BACK                                   = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELQuartzEffectType
// NumValues: 0x0006
enum class ELQuartzEffectType : uint8
{
	E_RED                                    = 0,
	E_BLUE                                   = 1,
	E_GREEN                                  = 2,
	E_YELLOW                                 = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELQuartzOptionType
// NumValues: 0x000B
enum class ELQuartzOptionType : uint8
{
	E_NONE                                   = 0,
	E_INCREASE_FP_GAIN_RATIO                 = 1,
	E_INCREASE_BACK_ATTACK_DAMAGE_RATIO      = 2,
	E_INCREASE_DOLL_ATTACK_DAMAGE_RATIO      = 3,
	E_REDUCE_FIRE_AMOUNT_GAIN_RATIO          = 4,
	E_REDUCE_DAMAGE_ON_DOWN_RATIO            = 5,
	E_INCREASE_WEIGHT                        = 6,
	E_REDUCE_SLAVE_ARM_USE_GAUGE_RATIO       = 7,
	E_INCREASE_STAMINA_RECOVER_PER_SEC       = 8,
	E_MAX                                    = 9,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELCallBackEventType
// NumValues: 0x0042
enum class ELCallBackEventType : uint8
{
	E_NONE                                   = 0,
	E_PC_ON_ENTER_VOLUME                     = 1,
	E_PC_ON_EXIT_VOLUME                      = 2,
	E_ON_DIE                                 = 3,
	E_ON_PROB_STATE_CHANGE                   = 4,
	E_ON_DIALOG                              = 5,
	E_ON_DIALOG_END                          = 6,
	E_ON_DIALOG_MENUITEM                     = 7,
	E_ON_GET_ITEM                            = 8,
	E_ON_USE_ITEM                            = 9,
	E_QUEST_DESC_ONLY_INIT                   = 10,
	E_QUEST_STEP_ONLY_PASS                   = 11,
	E_QUEST_STEP_ONLY_CUSTOM                 = 12,
	E_RECEIVE_TRIGGER_NPCSIGNAL              = 13,
	E_ON_NPC_FACTION_CHANGE                  = 14,
	E_ON_EQUIP                               = 15,
	E_HP_RATE_BELOW                          = 16,
	E_USE_SKILL                              = 17,
	E_GET_AGGRO                              = 18,
	E_PUT_ON_BUFF                            = 19,
	E_ON_QUEST_COMPLETE                      = 20,
	E_DEAD_IN_BOSSROOM                       = 21,
	E_ON_GET_WEAPON                          = 22,
	E_PC_ON_REVIVE                           = 23,
	E_TUTO_FABLEARTS_POSSIBLE_BLD            = 24,
	E_TUTO_FABLEARTS_POSSIBLE_HND            = 25,
	E_TUTO_GROGGY_GAGE_ZERO                  = 26,
	E_ON_END_SEQUENCE                        = 27,
	E_ON_QUEST_STEP_CHANGE                   = 28,
	E_ON_COMPLETE_BOSSROOM                   = 29,
	E_ON_HUMAN_GRADE_ABOVE                   = 30,
	E_ON_DIE_BY_TARGET                       = 31,
	E_ON_PULSE_RECHARGE_POSSIBLE             = 32,
	E_ON_END_MOVIE                           = 33,
	E_ON_QUARTZ_UNLOCK                       = 34,
	E_ON_WEAPON_BREAK                        = 35,
	E_USE_FATAL_ATTACK                       = 36,
	E_ON_RECORD_PLAY                         = 37,
	E_ON_STARGAZER_RESTORE                   = 38,
	E_ON_REINFORCE_WEAPON                    = 39,
	E_ON_REINFORCE_HERO_WEAPON               = 40,
	E_ON_REINFORCE_SLAVEARM                  = 41,
	E_ON_WEAPON_COMBINE                      = 42,
	E_ON_GET_ITEM_CATEGORY                   = 43,
	E_ON_USE_ITEM_CATEGORY                   = 44,
	E_ON_EQUIP_SLOT                          = 45,
	E_PC_USE_ACTION                          = 46,
	E_TUTO_USE_BELT_ITEM                     = 47,
	E_TUTO_USE_POUCH_ITEM                    = 48,
	E_TUTO_EQUIP_BELT_SLOT                   = 49,
	E_TUTO_EQUIP_POUCH_SLOT                  = 50,
	E_TUTO_MONARD_LAMP                       = 51,
	E_TUTO_INPUT_LOCKON                      = 52,
	E_TUTO_ON_GROGGY                         = 53,
	E_TUTO_REVIVE_HIT_FURY_ATTACK            = 54,
	E_TUTO_REVIVE_HAVE_BUFF                  = 55,
	E_TUTO_GET_AGGRO                         = 56,
	E_ON_RECEIVE_NOTIFY                      = 57,
	E_NOT_USE_ON_COMPLETE_BOSSROOM_AFTER     = 58,
	E_ON_ALL_RESET                           = 59,
	E_ON_CLOSE_DIALOG                        = 60,
	E_MONO_COMBAT_TIME                       = 61,
	E_ON_CLOSE_LEVELUP_UI                    = 62,
	E_ON_FABLE_FULL                          = 63,
	E_MAX                                    = 64,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELContentCommandType
// NumValues: 0x006C
enum class ELContentCommandType : uint8
{
	E_NONE                                   = 0,
	E_REGISTER_EVENT_CALLBACK                = 1,
	E_GLOBAL_VARIABLE_ADD                    = 2,
	E_GLOBAL_VARIABLE_ASIGN                  = 3,
	E_SPAWN                                  = 4,
	E_DESPAWN                                = 5,
	E_SPAWN_RESERVE                          = 6,
	E_DESPAWN_RESERVE                        = 7,
	E_USE_PROB                               = 8,
	E_SET_PROB_STATE                         = 9,
	E_DESTRUCT_PROP                          = 10,
	E_SEND_NPC_WORLD_TRIGGER                 = 11,
	E_CANCEL_ABNORMAL_STATE                  = 12,
	E_ATTACK_ABNORMAL_STATE                  = 13,
	E_GIVE_ABNORMAL_STATE                    = 14,
	E_ADD_ITEM                               = 15,
	E_DEL_ITEM                               = 16,
	E_ADD_WEAPON                             = 17,
	E_ADD_HUMANITY                           = 18,
	E_PRINT_HUD_TEXT                         = 19,
	E_CHANGE_FACTION                         = 20,
	E_TALKER_SET                             = 21,
	E_TALKER_OFF                             = 22,
	E_PLAY_CUT_SCENE                         = 23,
	E_PLAY_LEVEL_SEQUENCE                    = 24,
	E_BGM_PLAY                               = 25,
	E_BGM_STOP                               = 26,
	E_PLAY_LEVEL_SEQUENCE_BY_SPOT            = 27,
	E_ADD_QUEST                              = 28,
	E_COMPLETE_QUEST                         = 29,
	E_REMOVE_QUEST                           = 30,
	E_QUEST_STEP_INCREASE                    = 31,
	E_QUEST_STEP_SET                         = 32,
	E_SET_QUEST_VARIABLE                     = 33,
	E_SET_QUEST_DIALOG_SELECT                = 34,
	E_QUEST_TASK_COMPLETE                    = 35,
	E_STOP_LOOP_LEVEL_SEQUENCE_BY_SPOT       = 36,
	E_CHANGE_WEATHER                         = 37,
	E_CHANGE_WEATHER_RESERVE                 = 38,
	E_PAUSE_LEVEL_SEQUENCE_BY_SPOT           = 39,
	E_ALLOW_PULSE_RECHARGE                   = 40,
	E_SET_CHANGE_STAT                        = 41,
	E_EQUIP                                  = 42,
	E_GOLDENTREE_BOOST_SHOT                  = 43,
	E_GOLDENTREE_HARVEST                     = 44,
	E_GOLDENTREE_ROBBED                      = 45,
	E_NPC_SPAWNIDLE_END                      = 46,
	E_DIALOG_START                           = 47,
	E_ADD_SPECIALBUFF                        = 48,
	E_DEL_SPECIALBUFF                        = 49,
	E_COMMAND_EXEC                           = 50,
	E_ATTACH_PCLAMP                          = 51,
	E_UI_ALERT_BLOCK                         = 52,
	E_UI_ALERT_ADD_ITEM                      = 53,
	E_SET_PC_LOCATION_ON_TP                  = 54,
	E_SET_PC_LOCATION                        = 55,
	E_ALLOW_GETUP_DASH                       = 56,
	E_ALLOW_DOUBLE_DASH                      = 57,
	E_USE_SKILL                              = 58,
	E_DIALOG_START_REPEAT                    = 59,
	E_RECHARGE_ITEM                          = 60,
	E_USE_ITEM                               = 61,
	E_PLAY_MOTION                            = 62,
	E_TALKER_ON                              = 63,
	E_ADD_QUICKSLOT                          = 64,
	E_TUTORIAL_START                         = 65,
	E_TELEPORT_OBJECT_FORCE_SAVE             = 66,
	E_DIALOG_LAMP_ON                         = 67,
	E_DIALOG_LAMP_OFF                        = 68,
	E_REINFORCE_BLADE_ALL                    = 69,
	E_ENABLE_QUARTZ_SYSTEM                   = 70,
	E_TOGGLE_LEVEL_SEQUENCE_BY_SPOT          = 71,
	E_PLAY_MOVIE                             = 72,
	E_PLAY_MOVIE_RESERVE                     = 73,
	E_GOLDENTREE_BOOST_SHOT_REPEAT           = 74,
	E_NEW_GAME_PLUS_EXEC                     = 75,
	E_CHANGE_HAIR                            = 76,
	E_UNEQUIP                                = 77,
	E_UNLOCK_RECOLLECTION                    = 78,
	E_ENABLE_GOLDTREE_STATUS_UI              = 79,
	E_LIE_FX_PLAY                            = 80,
	E_GLOBAL_VARIABLE_RANDOM                 = 81,
	E_ACTIVE_TELEPORT_OBJECT                 = 82,
	E_GOLDENTREE_BOOST_ACCEL                 = 83,
	E_ENDING_FLOW_START_EVENT                = 84,
	E_END_CREDIT_EXEC                        = 85,
	E_SWAP_NPC_SPOT                          = 86,
	E_NEW_GAME_PLUS_P_ORGAN_RESET            = 87,
	E_AFTER_STARTER_PACK                     = 88,
	E_PLAY_SOUNDCUE                          = 89,
	E_PLAY_LEVEL_SEQUENCE_BY_SPOT_RESERVE    = 90,
	E_POP_UI_DEMO_END                        = 91,
	E_POP_UI_NPC_DIE                         = 92,
	E_ACTIVE_BOSSROOM                        = 93,
	E_CHANGE_SPAWNIDLE                       = 94,
	E_STOP_LEVEL_SEQUENCE                    = 95,
	E_STOP_ALL_LEVEL_SEQUENCE_BY_SPOT        = 96,
	E_CHANGE_CHARACTER_COLLISION_TYPE        = 97,
	E_RAXASIA_SHIELD_CHECK                   = 98,
	E_DESTROY_BOSSROOM                       = 99,
	E_UI_FADE_OUT                            = 100,
	E_CHANGE_EYE_COLOR                       = 101,
	E_EQUIP_SEQUENCE_SLAVEARM                = 102,
	E_ADD_DEAD_INVINCIBLE                    = 103,
	E_REMOVE_DEAD_INVINCIBLE                 = 104,
	E_GOLDENTREE_FLASH                       = 105,
	E_MAX                                    = 106,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELConditionCheckType
// NumValues: 0x0006
enum class ELConditionCheckType : uint8
{
	E_NONE                                   = 0,
	E_INCLUSIVE                              = 1,
	E_EXCLUSIVE                              = 2,
	E_OR                                     = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELConditionCompareType
// NumValues: 0x002B
enum class ELConditionCompareType : uint8
{
	E_NONE                                   = 0,
	E_STAT_ABS_ABOVE                         = 1,
	E_STAT_RATE_ABOVE                        = 2,
	E_STAT_ABS_EQUAL                         = 3,
	E_STAT_RATE_EQUAL                        = 4,
	E_HAVE_STATE                             = 5,
	E_PROP_STATE_ABOVE                       = 6,
	E_PROP_STATE_EQUAL                       = 7,
	E_DEAD_CHECK                             = 8,
	E_ITEM_NUM_ABOVE                         = 9,
	E_ITEM_NUM_EQUAL                         = 10,
	E_GLOBAL_VARIABLE_ABOVE                  = 11,
	E_GLOBAL_VARIABLE_EQUAL                  = 12,
	E_HAVE_QUEST                             = 13,
	E_HAVE_QUEST_STEP_EQUAL                  = 14,
	E_HAVE_QUEST_STEP_ABOVE                  = 15,
	E_HAVE_QUEST_STEP_UNDER                  = 16,
	E_HAVE_SUCCESS_QUEST                     = 17,
	E_HAVE_FAILURE_QUEST                     = 18,
	E_IS_SPAWN                               = 19,
	E_IS_SPAWNABLE                           = 20,
	E_IS_SLAVEARM_EQUIPED                    = 21,
	E_CONDITION_EXEC                         = 22,
	E_PC_WEAPON_EQUIP_SLOT                   = 23,
	E_PC_WEAPON_SHARPNESS                    = 24,
	E_LEVEL_ABOVE                            = 25,
	E_IS_TELEPORT_REGISTER                   = 26,
	E_IN_P_MAP                               = 27,
	E_HUMANITY_LEVEL_ABOVE                   = 28,
	E_HUMANITY_LEVEL_EQUAL                   = 29,
	E_HAVE_HAIR                              = 30,
	E_IS_HAIR                                = 31,
	E_IS_RECORD_PLAYING                      = 32,
	E_TARGET_IN_PC_SIGHT                     = 33,
	E_IS_EQUIPED                             = 34,
	E_NEWGAME_ROUND_ABOVE                    = 35,
	E_TIME_GOLDTREE_OVER                     = 36,
	E_IS_CHUNK_INSTALL_COMPLETE              = 37,
	E_ITEM_ALL_NUM_ABOVE                     = 38,
	E_ITEM_ALL_NUM_EQUAL                     = 39,
	E_PLAY_TIME_ABOVE                        = 40,
	E_MAX                                    = 41,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELHitMotionDirectionType
// NumValues: 0x0007
enum class ELHitMotionDirectionType : uint8
{
	E_NONE                                   = 0,
	E_FRONT                                  = 1,
	E_FRONTR                                 = 2,
	E_FRONTL                                 = 3,
	E_BACK                                   = 4,
	E_MAX                                    = 5,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELRepulseDirectionType
// NumValues: 0x0005
enum class ELRepulseDirectionType : uint8
{
	E_NONE                                   = 0,
	E_LEFT                                   = 1,
	E_RIGHT                                  = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELHitDirectionType
// NumValues: 0x0005
enum class ELHitDirectionType : uint8
{
	E_ATTACKER                               = 0,
	E_HITCOLLISION                           = 1,
	E_HITPOSITION                            = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELElementHitFxType
// NumValues: 0x0006
enum class ELElementHitFxType : uint8
{
	E_NONE                                   = 0,
	E_FIRE                                   = 1,
	E_ELECTRIC                               = 2,
	E_ACID                                   = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELPhysicalHitFxType
// NumValues: 0x0009
enum class ELPhysicalHitFxType : uint8
{
	E_NONE                                   = 0,
	E_SLASH_LIGHT                            = 1,
	E_SLASH_HEAVY                            = 2,
	E_BLUNT_LIGHT                            = 3,
	E_BLUNT_HEAVY                            = 4,
	E_PIERCE_LIGHT                           = 5,
	E_PIERCE_HEAVY                           = 6,
	E_MAX                                    = 7,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELPhysicalDamageType
// NumValues: 0x0006
enum class ELPhysicalDamageType : uint8
{
	E_NONE                                   = 0,
	E_STRIKE                                 = 1,
	E_SLASH                                  = 2,
	E_PIERCE                                 = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELSkillHitType
// NumValues: 0x000F
enum class ELSkillHitType : uint8
{
	E_NONE                                   = 0,
	E_WEAPON                                 = 1,
	E_SLAVEARM                               = 2,
	E_CHARACTER                              = 3,
	E_FATAL                                  = 4,
	E_PROJECTILE                             = 5,
	E_DYNAMICDAMAGEVOLUME                    = 6,
	E_WEAPON_L                               = 7,
	E_WEAPON_R                               = 8,
	E_WEAPON_SLAVEARM                        = 9,
	E_FATAL_END                              = 10,
	E_SLAVEARM_FATAL                         = 11,
	E_SLAVEARM_FATAL_END                     = 12,
	E_MAX                                    = 13,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELDieCauseFall
// NumValues: 0x0007
enum class ELDieCauseFall : uint8
{
	E_NONE                                   = 0,
	E_0_25_RATE                              = 1,
	E_25_50_RATE                             = 2,
	E_50_75_RATE                             = 3,
	E_75_MORE_RATE                           = 4,
	E_MAX                                    = 5,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELDieCauseElement
// NumValues: 0x0007
enum class ELDieCauseElement : uint8
{
	E_NONE                                   = 0,
	E_PHYSICAL                               = 1,
	E_FIRE                                   = 2,
	E_ELECTRIC                               = 3,
	E_ACID                                   = 4,
	E_MAX                                    = 5,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELDieCauseHitDirection
// NumValues: 0x0007
enum class ELDieCauseHitDirection : uint8
{
	E_NONE                                   = 0,
	E_FRONT                                  = 1,
	E_BACK                                   = 2,
	E_LEFT                                   = 3,
	E_RIGHT                                  = 4,
	E_MAX                                    = 5,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELStargazerType
// NumValues: 0x0006
enum class ELStargazerType : uint8
{
	E_NONE                                   = 0,
	E_BROKEN_INACTIVE                        = 1,
	E_BROKEN_WAITING                         = 2,
	E_ACTIVE_IDLE                            = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELTeleportType
// NumValues: 0x0006
enum class ELTeleportType : uint8
{
	E_NONE                                   = 0,
	E_TORSIONCOIL_DEPLOY                     = 1,
	E_TORSIONCOIL_SPAWN                      = 2,
	E_PORTAL_DEPLOY                          = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELMontageSlotType
// NumValues: 0x0006
enum class ELMontageSlotType : uint8
{
	E_NONE                                   = 0,
	E_DEFAULTSLOT                            = 1,
	E_LIGHTSLOT                              = 2,
	E_HEAVYSLOT                              = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELBloodEffectType
// NumValues: 0x0006
enum class ELBloodEffectType : uint8
{
	E_NONE                                   = 0,
	E_CARCASS_FX                             = 1,
	E_REDBLOOD_FX                            = 2,
	E_OIL_FX                                 = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELAlwaysGuardDirection
// NumValues: 0x0005
enum class ELAlwaysGuardDirection : uint8
{
	E_NONE                                   = 0,
	E_FRONT                                  = 1,
	E_BACK                                   = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELDieCauseType
// NumValues: 0x0008
enum class ELDieCauseType : uint8
{
	E_NONE                                   = 0,
	E_PHYSICAL_DMG                           = 1,
	E_DEBUFF_DOT                             = 2,
	E_SPECIAL_ACTION_EVENT                   = 3,
	E_FALL                                   = 4,
	E_CURSE                                  = 5,
	E_MAX                                    = 6,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELAssignedBoneType
// NumValues: 0x0005
enum class ELAssignedBoneType : uint8
{
	E_NONE                                   = 0,
	E_HEAD                                   = 1,
	E_UPPERBODYSPINE                         = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELDeathByOwnerFaction
// NumValues: 0x0008
enum class ELDeathByOwnerFaction : uint8
{
	E_NONE                                   = 0,
	E_ALL                                    = 1,
	E_USER_FACTION                           = 2,
	E_MONSTER_FACTION                        = 3,
	E_SPECIFIC_MONSTER                       = 4,
	E_SPECIFIC_ACTION_EVENT                  = 5,
	E_MAX                                    = 6,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELItemUnitUseType
// NumValues: 0x0005
enum class ELItemUnitUseType : uint8
{
	E_NONE                                   = 0,
	E_REPLACE_USE                            = 1,
	E_MULTI_USE                              = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELItemComplexGroup
// NumValues: 0x0005
enum class ELItemComplexGroup : uint8
{
	E_NONE                                   = 0,
	E_MONAD_BUFFF                            = 1,
	E_UNIQUE_GRINDER                         = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELItemComplexType
// NumValues: 0x0005
enum class ELItemComplexType : uint8
{
	E_NONE                                   = 0,
	E_MAIN_DEVICE                            = 1,
	E_UNIT_DEVICE                            = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.EGaugeType
// NumValues: 0x0009
enum class EGaugeType : uint8
{
	E_NONE                                   = 0,
	E_HEALTH_POINT                           = 1,
	E_STAMINA_POINT                          = 2,
	E_FRENZY_PROTOCOL_SLOT                   = 3,
	E_HALO_POINT                             = 4,
	E_SLAVE_MAGAZINE_POINT                   = 5,
	E_PULSE_RECHARGE_POINT                   = 6,
	E_MAX                                    = 7,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.EFxBranchType
// NumValues: 0x0005
enum class EFxBranchType : uint8
{
	E_NONE                                   = 0,
	E_BASE                                   = 1,
	E_STONE                                  = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.EPackageOfferMethodType
// NumValues: 0x0005
enum class EPackageOfferMethodType : uint8
{
	E_NONE                                   = 0,
	E_DROP                                   = 1,
	E_AUTO                                   = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.EPackageOfferReasonType
// NumValues: 0x0006
enum class EPackageOfferReasonType : uint8
{
	E_NONE                                   = 0,
	E_DIE                                    = 1,
	E_MOTION_NOTIFY                          = 2,
	E_PROPS_INTERACTION                      = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.EPackageOwnerType
// NumValues: 0x0007
enum class EPackageOwnerType : uint8
{
	E_NONE                                   = 0,
	E_MONSTER                                = 1,
	E_PROPS                                  = 2,
	E_TALK                                   = 3,
	E_PLAYER                                 = 4,
	E_MAX                                    = 5,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELInputType
// NumValues: 0x0008
enum class ELInputType : uint32
{
	E_NONE                                   = 0,
	E_ORB                                    = 1,
	E_SPRINT                                 = 2,
	E_COMMON                                 = 3,
	E_SLAVEARM                               = 4,
	E_FRENZYCHARGE                           = 5,
	E_MAX                                    = 6,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELAnimFSMState
// NumValues: 0x000D
enum class ELAnimFSMState : uint8
{
	E_NONE                                   = 0,
	E_IDLE_MOVE                              = 1,
	E_FOCUS_MOVE                             = 2,
	E_COMBAT_MOVE                            = 3,
	E_FALLING                                = 4,
	E_IDLE                                   = 5,
	E_LANDING                                = 6,
	E_JUMP                                   = 7,
	E_DEAD                                   = 8,
	E_FOCUS_WALK                             = 9,
	E_GUARD_WALK                             = 10,
	E_MAX                                    = 11,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELBooleanOrIgnore
// NumValues: 0x0006
enum class ELBooleanOrIgnore : uint32
{
	E_NONE                                   = 0,
	E_FALSE                                  = 1,
	E_IGNORE                                 = 2,
	E_TRUE                                   = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELWeaponStance
// NumValues: 0x0011
enum class ELWeaponStance : uint8
{
	E_NONE                                   = 0,
	E_ONEHAND_BLADE                          = 1,
	E_ONEHAND_AXE                            = 2,
	E_ONEHAND_DAGGER                         = 3,
	E_ONEHAND_KNIFE                          = 4,
	E_ONEHAND_SNAKESWORD                     = 5,
	E_ONEHAND_SWORDPISTOL                    = 6,
	E_ONEHAND_BLADEPISTOL                    = 7,
	E_TWOHAND_SWORD                          = 8,
	E_TWOHAND_BLADE                          = 9,
	E_TWOHAND_GREATSWORD                     = 10,
	E_TWOHAND_GREATAXE                       = 11,
	E_POLE_SPEAR                             = 12,
	E_POLE_GLAVE                             = 13,
	E_ONEHAND_SWORD                          = 14,
	E_MAX                                    = 15,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELStartRotationType
// NumValues: 0x0005
enum class ELStartRotationType : uint32
{
	E_NONE                                   = 0,
	E_CURR_LEVER                             = 1,
	E_LOCK_ON_DIRECTION                      = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELActionCategory
// NumValues: 0x0032
enum class ELActionCategory : uint8
{
	E_NONE                                   = 0,
	E_COMMON                                 = 1,
	E_LIGHT_ATTACK                           = 2,
	E_STRONG_ATTACK                          = 3,
	E_FALLING_ATTACK                         = 4,
	E_SPRINT_ATTACK                          = 5,
	E_DIE                                    = 6,
	E_DMG_STAND                              = 7,
	E_DOWN_STAMP                             = 8,
	E_KNOCKBACK                              = 9,
	E_DOWN_AWAY                              = 10,
	E_DOWN_DRAG                              = 11,
	E_DOWN_UP                                = 12,
	E_SPRINT                                 = 13,
	E_JUMP                                   = 14,
	E_GUARD                                  = 15,
	E_GUARD_HIT_NORMAL                       = 16,
	E_GUARD_HIT_HEAVY                        = 17,
	E_GUARD_REPULSE                          = 18,
	E_GUARD_BREAK                            = 19,
	E_PARALYZATION                           = 20,
	E_GROGGY                                 = 21,
	E_ORB                                    = 22,
	E_WEAPON_CHANGE                          = 23,
	E_USE_ITEM                               = 24,
	E_DASH                                   = 25,
	E_GAME_START                             = 26,
	E_ORB_CHARGING                           = 27,
	E_FALLING                                = 28,
	E_LANDING                                = 29,
	E_DECORATE                               = 30,
	E_INTERACTION                            = 31,
	E_FRONT_DASH                             = 32,
	E_BACK_DASH                              = 33,
	E_FRENZYCOUNTER                          = 34,
	E_RISINGATTACK                           = 35,
	E_SLAVEARM                               = 36,
	E_LOCKON_DASH                            = 37,
	E_TOUGHSPECIALHIT                        = 38,
	E_GUARD_REFLECT                          = 39,
	E_NPC_SKILL                              = 40,
	E_FABLE_ARTS                             = 41,
	E_SLAVEARM_CHANGE                        = 42,
	E_SLAVEARM_VISUAL                        = 43,
	E_MOVE_VISUAL                            = 44,
	E_FABLE_ARTS_DEF                         = 45,
	E_FABLE_ARTS_UTIL                        = 46,
	E_GESTURE                                = 47,
	E_MAX                                    = 48,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELGuardAttackType
// NumValues: 0x0006
enum class ELGuardAttackType : uint8
{
	E_NONE                                   = 0,
	E_HEAVY                                  = 1,
	E_NORMAL                                 = 2,
	E_STRONG                                 = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELKnockBackDirectionType
// NumValues: 0x000A
enum class ELKnockBackDirectionType : uint8
{
	E_NONE                                   = 0,
	E_DEFENDER                               = 1,
	E_INTERACTIVE                            = 2,
	E_ATTACKER_DIRECTION                     = 3,
	E_ATTACKER_POSITION                      = 4,
	E_SKILLHIT_POSITION                      = 5,
	E_TRACE_DIRECTION                        = 6,
	E_PROJECTILE_DIRECTION                   = 7,
	E_MAX                                    = 8,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELHitSound_SecondaryType
// NumValues: 0x0013
enum class ELHitSound_SecondaryType : uint8
{
	E_NONE                                   = 0,
	E_NORMALATTACK                           = 1,
	E_FRENZYATTACK                           = 2,
	E_ELEMENTATTACK                          = 3,
	E_PHYSICALGUARD                          = 4,
	E_ELEMENTGUARD                           = 5,
	E_PHYSICALPERFECTGUARD                   = 6,
	E_ELEMENTPERFECTGUARD                    = 7,
	E_DASHPARRY                              = 8,
	E_GUARDPARRY                             = 9,
	E_GUARDBREAK                             = 10,
	E_WEAPONBREAK                            = 11,
	E_PARALYZATION                           = 12,
	E_DEAD                                   = 13,
	E_CRITICAL                               = 14,
	E_FATAL                                  = 15,
	E_COUNTER                                = 16,
	E_MAX                                    = 17,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELHitSoundType
// NumValues: 0x0008
enum class ELHitSoundType : uint8
{
	E_NONE                                   = 0,
	E_HIT                                    = 1,
	E_GUARD                                  = 2,
	E_PERFECTGUARD                           = 3,
	E_PARRY                                  = 4,
	E_ADDITIONAL                             = 5,
	E_MAX                                    = 6,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELHitFX_SecondaryType
// NumValues: 0x000C
enum class ELHitFX_SecondaryType : uint8
{
	E_NONE                                   = 0,
	E_NORMALATTACK                           = 1,
	E_FRENZYATTACK                           = 2,
	E_DEFENCE                                = 3,
	E_PHYSICALNORMAL                         = 4,
	E_PHYSICALDEAD                           = 5,
	E_ELEMENTALNORMAL                        = 6,
	E_ELEMENTALDEAD                          = 7,
	E_SPECIAL                                = 8,
	E_FATAL                                  = 9,
	E_MAX                                    = 10,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELHitFXType
// NumValues: 0x0007
enum class ELHitFXType : uint8
{
	E_NONE                                   = 0,
	E_BASE                                   = 1,
	E_PHYSICAL                               = 2,
	E_ELEMENTAL                              = 3,
	E_ADDITIONAL                             = 4,
	E_MAX                                    = 5,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELHostileType
// NumValues: 0x000A
enum class ELHostileType : uint8
{
	E_NONE                                   = 0,
	E_ENEMY                                  = 1,
	E_FRIEND                                 = 2,
	E_FRIEND_AND_SELF                        = 3,
	E_ALL                                    = 4,
	E_ALL_AND_SELF                           = 5,
	E_SELF                                   = 6,
	E_FATAL_ONLY                             = 7,
	E_MAX                                    = 8,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELHitMotionType
// NumValues: 0x0010
enum class ELHitMotionType : uint8
{
	E_NONE                                   = 0,
	E_KNOCKBACK                              = 1,
	E_DOWN_AWAY                              = 2,
	E_DOWN_UP                                = 3,
	E_DOWN_STAMP                             = 4,
	E_DOWN_DRAG                              = 5,
	E_DMG_STAND                              = 6,
	E_ENDURE                                 = 7,
	E_HIT                                    = 8,
	E_KNOCKBACK_WEAK                         = 9,
	E_KNOCKBACK_STRONG                       = 10,
	E_WIRE_HIT                               = 11,
	E_WIRE_PULLING                           = 12,
	E_DISABLE_MOTION                         = 13,
	E_MAX                                    = 14,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELBladeFatalType
// NumValues: 0x0009
enum class ELBladeFatalType : uint8
{
	E_NONE                                   = 0,
	E_FATAL_WEAPON_LIGHT_THRUST              = 1,
	E_FATAL_WEAPON_LIGHT_SWING               = 2,
	E_FATAL_WEAPON_MIDDLE_THRUST             = 3,
	E_FATAL_WEAPON_MIDDLE_SWING              = 4,
	E_FATAL_WEAPON_HEAVY_THRUST              = 5,
	E_FATAL_WEAPON_HEAVY_SWING               = 6,
	E_MAX                                    = 7,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.EFactionType
// NumValues: 0x000E
enum class EFactionType : uint8
{
	E_NONE                                   = 0,
	E_PLAYER                                 = 1,
	E_MONSTER                                = 2,
	E_ALLENEMY                               = 3,
	E_NEUTRAL                                = 4,
	E_PLAYER_HITENABLE                       = 5,
	E_MONSTER_PUPPET                         = 6,
	E_MONSTER_CARCASS                        = 7,
	E_MONSTER_REBORNER                       = 8,
	E_MONSTER_STALKER                        = 9,
	E_ENEMY_TOONLYPLAYER                     = 10,
	E_MONSTER_CARCASSNPUPPET                 = 11,
	E_MAX                                    = 12,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELHairCategoryType
// NumValues: 0x0006
enum class ELHairCategoryType : uint8
{
	E_HAIR_BASIC                             = 0,
	E_HAIR_LONG                              = 1,
	E_HAIR_WLONG                             = 2,
	E_HAIR_WBASIC                            = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELInputTypeHudOnly
// NumValues: 0x0008
enum class ELInputTypeHudOnly : uint8
{
	E_NONE                                   = 0,
	E_NORMAL                                 = 1,
	E_HOLD                                   = 2,
	E_HOLD_HANDLE                            = 3,
	E_COMBO_2                                = 4,
	E_COMBO_3                                = 5,
	E_MAX                                    = 6,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELItemConsumeTargetType
// NumValues: 0x0005
enum class ELItemConsumeTargetType : uint8
{
	E_SELF                                   = 0,
	E_HELPMATE                               = 1,
	E_BOTH                                   = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELTooltipIconType
// NumValues: 0x0005
enum class ELTooltipIconType : uint8
{
	E_NONE                                   = 0,
	E_SPECIALBUFF                            = 1,
	E_ABNORMALSTATE                          = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELSlavearmAlterItemUseType
// NumValues: 0x0004
enum class ELSlavearmAlterItemUseType : uint8
{
	E_WAIT_SELECT                            = 0,
	E_JUST_USE                               = 1,
	E_MAX                                    = 2,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELStatCorrectChangeType
// NumValues: 0x0007
enum class ELStatCorrectChangeType : uint8
{
	E_NONE                                   = 0,
	E_MOTIVITY                               = 1,
	E_TECHNIQUE                              = 2,
	E_ADVANCE                                = 3,
	E_CLEAR                                  = 4,
	E_MAX                                    = 5,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELItemMaterial
// NumValues: 0x0007
enum class ELItemMaterial : uint8
{
	E_COPPER                                 = 0,
	E_WOOD                                   = 1,
	E_TUNGSTEN                               = 2,
	E_URANIUM                                = 3,
	E_VIBRANIUM                              = 4,
	E_MAX                                    = 5,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELItemPartsSlot
// NumValues: 0x0006
enum class ELItemPartsSlot : uint8
{
	E_FRAME_UPPER                            = 0,
	E_FRAME_HEAD                             = 1,
	E_FRAME_LOWER                            = 2,
	E_FRAME_FOOT                             = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELBladeSharpnessType
// NumValues: 0x0006
enum class ELBladeSharpnessType : uint8
{
	E_BREAK                                  = 0,
	E_BAD                                    = 1,
	E_NORMAL                                 = 2,
	E_FINE                                   = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELItemCollectionType
// NumValues: 0x0005
enum class ELItemCollectionType : uint8
{
	E_NONE                                   = 0,
	E_PAGE                                   = 1,
	E_RECORD                                 = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELWeaponCorrectionPhysicalGrade
// NumValues: 0x0009
enum class ELWeaponCorrectionPhysicalGrade : uint8
{
	E_NONE                                   = 0,
	E_D                                      = 1,
	E_C                                      = 2,
	E_B                                      = 3,
	E_A                                      = 4,
	E_S                                      = 5,
	E_NOT_APPLICABLE                         = 99,
	E_MAX                                    = 100,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELWeaponShapeType
// NumValues: 0x0009
enum class ELWeaponShapeType : uint8
{
	E_NONE                                   = 0,
	E_SHORTGRIP                              = 1,
	E_MIDGRIP                                = 2,
	E_LONGGRIP                               = 3,
	E_SHORTSHAFT                             = 4,
	E_MIDSHAFT                               = 5,
	E_LONGSHAFT                              = 6,
	E_MAX                                    = 7,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELWeaponStyleType
// NumValues: 0x0005
enum class ELWeaponStyleType : uint8
{
	E_NONE                                   = 0,
	E_FORMAL                                 = 1,
	E_SAVAGE                                 = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELWeaponPostureType
// NumValues: 0x0007
enum class ELWeaponPostureType : uint8
{
	E_NONE                                   = 0,
	E_ONEHAND                                = 1,
	E_TWOHAND                                = 2,
	E_POLE                                   = 3,
	E_BAREHAND                               = 4,
	E_MAX                                    = 5,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELItemSecondCategory
// NumValues: 0x0032
enum class ELItemSecondCategory : uint8
{
	E_NONE                                   = 0,
	E_RECOVERY                               = 1,
	E_MEDICINE                               = 2,
	E_SPECIAL                                = 3,
	E_BUFF                                   = 4,
	E_BETTLE_SUB                             = 5,
	E_ERGO                                   = 6,
	E_UPGRADE                                = 7,
	E_BLADE_REINFORCE                        = 8,
	E_EXCHANGE                               = 9,
	E_GRINDER_UNIT                           = 10,
	E_MONAD_UNIT                             = 11,
	E_UNLOCK                                 = 12,
	E_KEY                                    = 13,
	E_EPIC                                   = 14,
	E_RECORD                                 = 15,
	E_BOOK                                   = 16,
	E_DOCUMENT                               = 17,
	E_NOTE                                   = 18,
	E_LETTER                                 = 19,
	E_NEWS                                   = 20,
	E_SCROLL                                 = 21,
	E_POSTER                                 = 22,
	E_GENERAL                                = 23,
	E_HERO                                   = 24,
	E_HANDLE_ONEHAND                         = 25,
	E_HANDLE_TWOHAND                         = 26,
	E_HANDLE_POLE                            = 27,
	E_BLADE_DAGGER                           = 28,
	E_BLADE_SWORD                            = 29,
	E_BLADE_GSWROD                           = 30,
	E_BLADE_BLUNT                            = 31,
	E_BLADE_GBLUNT                           = 32,
	E_SLAVEARM                               = 33,
	E_FRAME                                  = 34,
	E_LINER                                  = 35,
	E_CONVERTER                              = 36,
	E_HANDLE_REINFORCE                       = 37,
	E_RARE_GEAR                              = 38,
	E_GEAR                                   = 39,
	E_GESTURE                                = 40,
	E_HEAD_COSTUME                           = 41,
	E_BODY_COSTUME                           = 42,
	E_CARTRIDGE                              = 43,
	E_CORE_UPGRADE                           = 44,
	E_CORE_MATERIAL                          = 45,
	E_CORE_ERGO                              = 46,
	E_EYEWEAR_COSTUME                        = 47,
	E_MAX                                    = 48,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELHeadTagVisibleType
// NumValues: 0x0005
enum class ELHeadTagVisibleType : uint8
{
	E_NORMAL                                 = 0,
	E_ALWAYS                                 = 1,
	E_EXCEPTNPC                              = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELHPUIType
// NumValues: 0x0006
enum class ELHPUIType : uint8
{
	E_NONE                                   = 0,
	E_FLOATING                               = 1,
	E_FIXED                                  = 2,
	E_BOTH                                   = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELNpcTargetDecisionType
// NumValues: 0x0004
enum class ELNpcTargetDecisionType : uint8
{
	E_NONE                                   = 0,
	E_RANDOM                                 = 1,
	E_MAX                                    = 2,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELNpcPartsHitDirectionType
// NumValues: 0x0005
enum class ELNpcPartsHitDirectionType : uint8
{
	E_NONE                                   = 0,
	E_DEFENCER                               = 1,
	E_PARTS                                  = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELNpcFXSizeType
// NumValues: 0x0006
enum class ELNpcFXSizeType : uint8
{
	E_NONE                                   = 0,
	E_SMALL                                  = 1,
	E_MEDIUM                                 = 2,
	E_LARGE                                  = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELNpcDisappearType
// NumValues: 0x0006
enum class ELNpcDisappearType : uint8
{
	E_NONE                                   = 0,
	E_COMMON                                 = 1,
	E_PUPPET_HIGHGRADE                       = 2,
	E_CARCASS_HIGHGRADE                      = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ENPCGradeType
// NumValues: 0x0008
enum class ENPCGradeType : uint8
{
	E_NONE                                   = 0,
	E_NORMAL                                 = 1,
	E_ELITE                                  = 2,
	E_NAMED                                  = 3,
	E_SEED                                   = 4,
	E_BOSS                                   = 5,
	E_MAX                                    = 6,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELNPCResourceType
// NumValues: 0x0005
enum class ELNPCResourceType : uint8
{
	E_NONE                                   = 0,
	E_NPC                                    = 1,
	E_MONSTER                                = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELPathWayType
// NumValues: 0x0006
enum class ELPathWayType : uint8
{
	E_NONE                                   = 0,
	E_ONEWAY                                 = 1,
	E_PATROLWAY                              = 2,
	E_BELTWAY                                = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELProjectileMoveTargetType
// NumValues: 0x000A
enum class ELProjectileMoveTargetType : uint8
{
	E_NONE                                   = 0,
	E_FIXED                                  = 1,
	E_TO_TARGET                              = 2,
	E_TO_INSTIGATOR                          = 3,
	E_FORWARD                                = 4,
	E_ATTACH_TO_TARGET_SOCKET                = 5,
	E_ATTACH_TO_TARGET_NEAREST_SOCKET        = 6,
	E_ATTACH_TO_INSTIGATOR_SOCKET            = 7,
	E_MAX                                    = 8,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELProjectileGenerateType
// NumValues: 0x0005
enum class ELProjectileGenerateType : uint8
{
	E_NONE                                   = 0,
	E_FROM_INSTIGATOR                        = 1,
	E_FROM_TARGET                            = 2,
	E_MAX                                    = 3,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELProjectileHitFactionType
// NumValues: 0x0007
enum class ELProjectileHitFactionType : uint8
{
	E_NONE                                   = 0,
	E_ENEMY                                  = 1,
	E_ALLY                                   = 2,
	E_ALLY_EXCEPT_INSTIGATOR                 = 3,
	E_ALL                                    = 4,
	E_MAX                                    = 5,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELProjectileType
// NumValues: 0x0008
enum class ELProjectileType : uint8
{
	E_NONE                                   = 0,
	E_DIRECT                                 = 1,
	E_ANGLE                                  = 2,
	E_CHASE                                  = 3,
	E_FIXED                                  = 4,
	E_CUSTOM                                 = 5,
	E_MAX                                    = 6,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELNextStepType
// NumValues: 0x0007
enum class ELNextStepType : uint8
{
	E_STEP_NOCHANGE                          = 0,
	E_NEXT_STEP                              = 1,
	E_COMPLETE                               = 2,
	E_COMPLETE_AND_ADDQUEST                  = 3,
	E_JUMP_STEP                              = 4,
	E_MAX                                    = 5,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELTaskResultCheckType
// NumValues: 0x0006
enum class ELTaskResultCheckType : uint8
{
	E_NONE                                   = 0,
	E_DIALOG_SELECT_CHECK                    = 1,
	E_QUEST_VARIABLE                         = 2,
	E_CUSTOM                                 = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELRecollectionCategory
// NumValues: 0x0008
enum class ELRecollectionCategory : uint8
{
	E_CHARACTER                              = 0,
	E_CREATURE                               = 1,
	E_WEAPON                                 = 2,
	E_SLAVEARM                               = 3,
	E_COSTUME                                = 4,
	E_MASK                                   = 5,
	E_MAX                                    = 6,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELSkillMotionType
// NumValues: 0x0007
enum class ELSkillMotionType : uint8
{
	E_NONE                                   = 0,
	E_SWING                                  = 1,
	E_THRUST                                 = 2,
	E_WEAPON_ON                              = 3,
	E_WEAPON_OFF                             = 4,
	E_MAX                                    = 5,
	E_DEFAULT                                = 1,
};

// Enum ProjectPContentInfo.ELTutorialListOnConditionType
// NumValues: 0x0006
enum class ELTutorialListOnConditionType : uint8
{
	E_NONE                                   = 0,
	E_PLAYCOUNT                              = 1,
	E_PLAYMAX                                = 2,
	E_PRECEDENT                              = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 0,
};

// Enum ProjectPContentInfo.ELTutorialPlayCountAssignType
// NumValues: 0x0006
enum class ELTutorialPlayCountAssignType : uint8
{
	E_NONE                                   = 0,
	E_ADD                                    = 1,
	E_RESET                                  = 2,
	E_PLAYMAX                                = 3,
	E_MAX                                    = 4,
	E_DEFAULT                                = 0,
};

// ScriptStruct ProjectPContentInfo.HumanizationBuffAlterInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FHumanizationBuffAlterInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHumanizationBuffAlterInfoPtr) == 0x000008, "Wrong alignment on FHumanizationBuffAlterInfoPtr");
static_assert(sizeof(FHumanizationBuffAlterInfoPtr) == 0x000008, "Wrong size on FHumanizationBuffAlterInfoPtr");

// ScriptStruct ProjectPContentInfo.XmlPersistObject
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FXmlPersistObject
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FXmlPersistObject) == 0x000008, "Wrong alignment on FXmlPersistObject");
static_assert(sizeof(FXmlPersistObject) == 0x000008, "Wrong size on FXmlPersistObject");

// ScriptStruct ProjectPContentInfo.ContentInfoBase
// 0x0020 (0x0028 - 0x0008)
struct FContentInfoBase : public FXmlPersistObject
{
public:
	uint8                                         Pad_8[0x20];                                       // 0x0008(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContentInfoBase) == 0x000008, "Wrong alignment on FContentInfoBase");
static_assert(sizeof(FContentInfoBase) == 0x000028, "Wrong size on FContentInfoBase");

// ScriptStruct ProjectPContentInfo.AchievementDetailInfo
// 0x0030 (0x0058 - 0x0028)
struct FAchievementDetailInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _detail_index;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELCallBackEventType                           _callback_event_type;                              // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _callback_event_param;                             // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _callback_event_param2;                            // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAchievementDetailInfo) == 0x000008, "Wrong alignment on FAchievementDetailInfo");
static_assert(sizeof(FAchievementDetailInfo) == 0x000058, "Wrong size on FAchievementDetailInfo");
static_assert(offsetof(FAchievementDetailInfo, _code_name) == 0x000028, "Member 'FAchievementDetailInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FAchievementDetailInfo, _detail_index) == 0x000030, "Member 'FAchievementDetailInfo::_detail_index' has a wrong offset!");
static_assert(offsetof(FAchievementDetailInfo, _callback_event_type) == 0x000034, "Member 'FAchievementDetailInfo::_callback_event_type' has a wrong offset!");
static_assert(offsetof(FAchievementDetailInfo, _callback_event_param) == 0x000038, "Member 'FAchievementDetailInfo::_callback_event_param' has a wrong offset!");
static_assert(offsetof(FAchievementDetailInfo, _callback_event_param2) == 0x000048, "Member 'FAchievementDetailInfo::_callback_event_param2' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.QuestDescInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FQuestDescInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestDescInfoPtr) == 0x000008, "Wrong alignment on FQuestDescInfoPtr");
static_assert(sizeof(FQuestDescInfoPtr) == 0x000008, "Wrong size on FQuestDescInfoPtr");

// ScriptStruct ProjectPContentInfo.SubtitleInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSubtitleInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSubtitleInfoPtr) == 0x000008, "Wrong alignment on FSubtitleInfoPtr");
static_assert(sizeof(FSubtitleInfoPtr) == 0x000008, "Wrong size on FSubtitleInfoPtr");

// ScriptStruct ProjectPContentInfo.LocationInfo
// 0x0058 (0x0080 - 0x0028)
struct FLocationInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_name;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_name_cn;                               // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _persistent_level;                                 // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _world_zone;                                       // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _location_list_image;                              // 0x0058(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocationInfo) == 0x000008, "Wrong alignment on FLocationInfo");
static_assert(sizeof(FLocationInfo) == 0x000080, "Wrong size on FLocationInfo");
static_assert(offsetof(FLocationInfo, _code_name) == 0x000028, "Member 'FLocationInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FLocationInfo, _local_text_name) == 0x000030, "Member 'FLocationInfo::_local_text_name' has a wrong offset!");
static_assert(offsetof(FLocationInfo, _local_text_name_cn) == 0x000040, "Member 'FLocationInfo::_local_text_name_cn' has a wrong offset!");
static_assert(offsetof(FLocationInfo, _persistent_level) == 0x000048, "Member 'FLocationInfo::_persistent_level' has a wrong offset!");
static_assert(offsetof(FLocationInfo, _world_zone) == 0x000050, "Member 'FLocationInfo::_world_zone' has a wrong offset!");
static_assert(offsetof(FLocationInfo, _location_list_image) == 0x000058, "Member 'FLocationInfo::_location_list_image' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ActionStateInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FActionStateInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActionStateInfoPtr) == 0x000008, "Wrong alignment on FActionStateInfoPtr");
static_assert(sizeof(FActionStateInfoPtr) == 0x000008, "Wrong size on FActionStateInfoPtr");

// ScriptStruct ProjectPContentInfo.Skill_IndicatorInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSkill_IndicatorInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkill_IndicatorInfoPtr) == 0x000008, "Wrong alignment on FSkill_IndicatorInfoPtr");
static_assert(sizeof(FSkill_IndicatorInfoPtr) == 0x000008, "Wrong size on FSkill_IndicatorInfoPtr");

// ScriptStruct ProjectPContentInfo.AchievementDetailInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FAchievementDetailInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAchievementDetailInfoPtr) == 0x000008, "Wrong alignment on FAchievementDetailInfoPtr");
static_assert(sizeof(FAchievementDetailInfoPtr) == 0x000008, "Wrong size on FAchievementDetailInfoPtr");

// ScriptStruct ProjectPContentInfo.ComboTypeInfo
// 0x0008 (0x0030 - 0x0028)
struct FComboTypeInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComboTypeInfo) == 0x000008, "Wrong alignment on FComboTypeInfo");
static_assert(sizeof(FComboTypeInfo) == 0x000030, "Wrong size on FComboTypeInfo");
static_assert(offsetof(FComboTypeInfo, _code_name) == 0x000028, "Member 'FComboTypeInfo::_code_name' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ComboTypeInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FComboTypeInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FComboTypeInfo>                 _ComboTypeInfo_array;                              // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComboTypeInfoDB) == 0x000008, "Wrong alignment on FComboTypeInfoDB");
static_assert(sizeof(FComboTypeInfoDB) == 0x0000A0, "Wrong size on FComboTypeInfoDB");
static_assert(offsetof(FComboTypeInfoDB, _ComboTypeInfo_array) == 0x000078, "Member 'FComboTypeInfoDB::_ComboTypeInfo_array' has a wrong offset!");
static_assert(offsetof(FComboTypeInfoDB, _version) == 0x000088, "Member 'FComboTypeInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FComboTypeInfoDB, _comment) == 0x000090, "Member 'FComboTypeInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.FallingSurfaceDamageInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FFallingSurfaceDamageInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFallingSurfaceDamageInfoPtr) == 0x000008, "Wrong alignment on FFallingSurfaceDamageInfoPtr");
static_assert(sizeof(FFallingSurfaceDamageInfoPtr) == 0x000008, "Wrong size on FFallingSurfaceDamageInfoPtr");

// ScriptStruct ProjectPContentInfo.ContentCommandInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FContentCommandInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContentCommandInfoPtr) == 0x000008, "Wrong alignment on FContentCommandInfoPtr");
static_assert(sizeof(FContentCommandInfoPtr) == 0x000008, "Wrong size on FContentCommandInfoPtr");

// ScriptStruct ProjectPContentInfo.SlaveArmPageInfo
// 0x0038 (0x0060 - 0x0028)
struct FSlaveArmPageInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _page_index;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _icon;                                             // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _local_text_tooltip;                               // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_tooltip_cn;                            // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _activate_require_item_code_name;                  // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSlaveArmPageInfo) == 0x000008, "Wrong alignment on FSlaveArmPageInfo");
static_assert(sizeof(FSlaveArmPageInfo) == 0x000060, "Wrong size on FSlaveArmPageInfo");
static_assert(offsetof(FSlaveArmPageInfo, _code_name) == 0x000028, "Member 'FSlaveArmPageInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FSlaveArmPageInfo, _page_index) == 0x000030, "Member 'FSlaveArmPageInfo::_page_index' has a wrong offset!");
static_assert(offsetof(FSlaveArmPageInfo, _icon) == 0x000034, "Member 'FSlaveArmPageInfo::_icon' has a wrong offset!");
static_assert(offsetof(FSlaveArmPageInfo, _local_text_tooltip) == 0x000040, "Member 'FSlaveArmPageInfo::_local_text_tooltip' has a wrong offset!");
static_assert(offsetof(FSlaveArmPageInfo, _local_text_tooltip_cn) == 0x000050, "Member 'FSlaveArmPageInfo::_local_text_tooltip_cn' has a wrong offset!");
static_assert(offsetof(FSlaveArmPageInfo, _activate_require_item_code_name) == 0x000058, "Member 'FSlaveArmPageInfo::_activate_require_item_code_name' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.SlaveArmPageInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FSlaveArmPageInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSlaveArmPageInfo>              _SlaveArmPageInfo_array;                           // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSlaveArmPageInfoDB) == 0x000008, "Wrong alignment on FSlaveArmPageInfoDB");
static_assert(sizeof(FSlaveArmPageInfoDB) == 0x0000A0, "Wrong size on FSlaveArmPageInfoDB");
static_assert(offsetof(FSlaveArmPageInfoDB, _SlaveArmPageInfo_array) == 0x000078, "Member 'FSlaveArmPageInfoDB::_SlaveArmPageInfo_array' has a wrong offset!");
static_assert(offsetof(FSlaveArmPageInfoDB, _version) == 0x000088, "Member 'FSlaveArmPageInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FSlaveArmPageInfoDB, _comment) == 0x000090, "Member 'FSlaveArmPageInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.AchievementListInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FAchievementListInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAchievementListInfoPtr) == 0x000008, "Wrong alignment on FAchievementListInfoPtr");
static_assert(sizeof(FAchievementListInfoPtr) == 0x000008, "Wrong size on FAchievementListInfoPtr");

// ScriptStruct ProjectPContentInfo.WorldEventInfo
// 0x0048 (0x0070 - 0x0028)
struct FWorldEventInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _detail_index;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELCallBackEventType                           _callback_event_type;                              // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _callback_event_param;                             // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _callback_event_param2;                            // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _condition_code_name;                              // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _commandset_code_name;                             // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _callback_count;                                   // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWorldEventInfo) == 0x000008, "Wrong alignment on FWorldEventInfo");
static_assert(sizeof(FWorldEventInfo) == 0x000070, "Wrong size on FWorldEventInfo");
static_assert(offsetof(FWorldEventInfo, _code_name) == 0x000028, "Member 'FWorldEventInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FWorldEventInfo, _detail_index) == 0x000030, "Member 'FWorldEventInfo::_detail_index' has a wrong offset!");
static_assert(offsetof(FWorldEventInfo, _callback_event_type) == 0x000034, "Member 'FWorldEventInfo::_callback_event_type' has a wrong offset!");
static_assert(offsetof(FWorldEventInfo, _callback_event_param) == 0x000038, "Member 'FWorldEventInfo::_callback_event_param' has a wrong offset!");
static_assert(offsetof(FWorldEventInfo, _callback_event_param2) == 0x000048, "Member 'FWorldEventInfo::_callback_event_param2' has a wrong offset!");
static_assert(offsetof(FWorldEventInfo, _condition_code_name) == 0x000058, "Member 'FWorldEventInfo::_condition_code_name' has a wrong offset!");
static_assert(offsetof(FWorldEventInfo, _commandset_code_name) == 0x000060, "Member 'FWorldEventInfo::_commandset_code_name' has a wrong offset!");
static_assert(offsetof(FWorldEventInfo, _callback_count) == 0x000068, "Member 'FWorldEventInfo::_callback_count' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ActionClassInfo
// 0x0048 (0x0070 - 0x0028)
struct FActionClassInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   _action_class;                                     // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELActionCategory                              _system_category;                                  // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _immune_code_name;                                 // 0x005C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _disable_fatal_attack;                             // 0x0064(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _use_head_look_at;                                 // 0x0065(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _use_upperbody_look_at;                            // 0x0066(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _Immediately_cancel_by_die;                        // 0x0067(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _preload;                                          // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActionClassInfo) == 0x000008, "Wrong alignment on FActionClassInfo");
static_assert(sizeof(FActionClassInfo) == 0x000070, "Wrong size on FActionClassInfo");
static_assert(offsetof(FActionClassInfo, _code_name) == 0x000028, "Member 'FActionClassInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FActionClassInfo, _action_class) == 0x000030, "Member 'FActionClassInfo::_action_class' has a wrong offset!");
static_assert(offsetof(FActionClassInfo, _system_category) == 0x000058, "Member 'FActionClassInfo::_system_category' has a wrong offset!");
static_assert(offsetof(FActionClassInfo, _immune_code_name) == 0x00005C, "Member 'FActionClassInfo::_immune_code_name' has a wrong offset!");
static_assert(offsetof(FActionClassInfo, _disable_fatal_attack) == 0x000064, "Member 'FActionClassInfo::_disable_fatal_attack' has a wrong offset!");
static_assert(offsetof(FActionClassInfo, _use_head_look_at) == 0x000065, "Member 'FActionClassInfo::_use_head_look_at' has a wrong offset!");
static_assert(offsetof(FActionClassInfo, _use_upperbody_look_at) == 0x000066, "Member 'FActionClassInfo::_use_upperbody_look_at' has a wrong offset!");
static_assert(offsetof(FActionClassInfo, _Immediately_cancel_by_die) == 0x000067, "Member 'FActionClassInfo::_Immediately_cancel_by_die' has a wrong offset!");
static_assert(offsetof(FActionClassInfo, _preload) == 0x000068, "Member 'FActionClassInfo::_preload' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PackageConfigureInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FPackageConfigureInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPackageConfigureInfoPtr) == 0x000008, "Wrong alignment on FPackageConfigureInfoPtr");
static_assert(sizeof(FPackageConfigureInfoPtr) == 0x000008, "Wrong size on FPackageConfigureInfoPtr");

// ScriptStruct ProjectPContentInfo.ContentConditionInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FContentConditionInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContentConditionInfoPtr) == 0x000008, "Wrong alignment on FContentConditionInfoPtr");
static_assert(sizeof(FContentConditionInfoPtr) == 0x000008, "Wrong size on FContentConditionInfoPtr");

// ScriptStruct ProjectPContentInfo.RecollectionInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FRecollectionInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRecollectionInfoPtr) == 0x000008, "Wrong alignment on FRecollectionInfoPtr");
static_assert(sizeof(FRecollectionInfoPtr) == 0x000008, "Wrong size on FRecollectionInfoPtr");

// ScriptStruct ProjectPContentInfo.ItemCollectionInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FItemCollectionInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemCollectionInfoPtr) == 0x000008, "Wrong alignment on FItemCollectionInfoPtr");
static_assert(sizeof(FItemCollectionInfoPtr) == 0x000008, "Wrong size on FItemCollectionInfoPtr");

// ScriptStruct ProjectPContentInfo.ComboInfo
// 0x0080 (0x00A8 - 0x0028)
struct FComboInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _curr_skill;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELActionCategory                              _curr_action_category;                             // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _filter;                                           // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELWeaponPostureType                           _posture_type;                                     // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _combo_type;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _action_group;                                     // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _cmd_light_attack;                                 // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _cmd_strong_attack;                                // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _cmd_weapon_change;                                // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _cmd_guard;                                        // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _cmd_dash;                                         // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _cmd_orb_skill_charging;                           // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _cmd_orb_level_1;                                  // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _cmd_orb_level_2;                                  // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _cmd_charge_cancel;                                // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _cmd_guard_end;                                    // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComboInfo) == 0x000008, "Wrong alignment on FComboInfo");
static_assert(sizeof(FComboInfo) == 0x0000A8, "Wrong size on FComboInfo");
static_assert(offsetof(FComboInfo, _code_name) == 0x000028, "Member 'FComboInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FComboInfo, _curr_skill) == 0x000030, "Member 'FComboInfo::_curr_skill' has a wrong offset!");
static_assert(offsetof(FComboInfo, _curr_action_category) == 0x000038, "Member 'FComboInfo::_curr_action_category' has a wrong offset!");
static_assert(offsetof(FComboInfo, _filter) == 0x00003C, "Member 'FComboInfo::_filter' has a wrong offset!");
static_assert(offsetof(FComboInfo, _posture_type) == 0x000044, "Member 'FComboInfo::_posture_type' has a wrong offset!");
static_assert(offsetof(FComboInfo, _combo_type) == 0x000048, "Member 'FComboInfo::_combo_type' has a wrong offset!");
static_assert(offsetof(FComboInfo, _action_group) == 0x000050, "Member 'FComboInfo::_action_group' has a wrong offset!");
static_assert(offsetof(FComboInfo, _cmd_light_attack) == 0x000058, "Member 'FComboInfo::_cmd_light_attack' has a wrong offset!");
static_assert(offsetof(FComboInfo, _cmd_strong_attack) == 0x000060, "Member 'FComboInfo::_cmd_strong_attack' has a wrong offset!");
static_assert(offsetof(FComboInfo, _cmd_weapon_change) == 0x000068, "Member 'FComboInfo::_cmd_weapon_change' has a wrong offset!");
static_assert(offsetof(FComboInfo, _cmd_guard) == 0x000070, "Member 'FComboInfo::_cmd_guard' has a wrong offset!");
static_assert(offsetof(FComboInfo, _cmd_dash) == 0x000078, "Member 'FComboInfo::_cmd_dash' has a wrong offset!");
static_assert(offsetof(FComboInfo, _cmd_orb_skill_charging) == 0x000080, "Member 'FComboInfo::_cmd_orb_skill_charging' has a wrong offset!");
static_assert(offsetof(FComboInfo, _cmd_orb_level_1) == 0x000088, "Member 'FComboInfo::_cmd_orb_level_1' has a wrong offset!");
static_assert(offsetof(FComboInfo, _cmd_orb_level_2) == 0x000090, "Member 'FComboInfo::_cmd_orb_level_2' has a wrong offset!");
static_assert(offsetof(FComboInfo, _cmd_charge_cancel) == 0x000098, "Member 'FComboInfo::_cmd_charge_cancel' has a wrong offset!");
static_assert(offsetof(FComboInfo, _cmd_guard_end) == 0x0000A0, "Member 'FComboInfo::_cmd_guard_end' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ComboInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FComboInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FComboInfo>                     _ComboInfo_array;                                  // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComboInfoDB) == 0x000008, "Wrong alignment on FComboInfoDB");
static_assert(sizeof(FComboInfoDB) == 0x0000A0, "Wrong size on FComboInfoDB");
static_assert(offsetof(FComboInfoDB, _ComboInfo_array) == 0x000078, "Member 'FComboInfoDB::_ComboInfo_array' has a wrong offset!");
static_assert(offsetof(FComboInfoDB, _version) == 0x000088, "Member 'FComboInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FComboInfoDB, _comment) == 0x000090, "Member 'FComboInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.DialogInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FDialogInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogInfoPtr) == 0x000008, "Wrong alignment on FDialogInfoPtr");
static_assert(sizeof(FDialogInfoPtr) == 0x000008, "Wrong size on FDialogInfoPtr");

// ScriptStruct ProjectPContentInfo.QuartzEffectInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FQuartzEffectInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuartzEffectInfoPtr) == 0x000008, "Wrong alignment on FQuartzEffectInfoPtr");
static_assert(sizeof(FQuartzEffectInfoPtr) == 0x000008, "Wrong size on FQuartzEffectInfoPtr");

// ScriptStruct ProjectPContentInfo.SkillIndicatorInfo
// 0x0068 (0x0090 - 0x0028)
struct FSkillIndicatorInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _attach_socket;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _fx_path;                                          // 0x0040(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _sound_path;                                       // 0x0068(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillIndicatorInfo) == 0x000008, "Wrong alignment on FSkillIndicatorInfo");
static_assert(sizeof(FSkillIndicatorInfo) == 0x000090, "Wrong size on FSkillIndicatorInfo");
static_assert(offsetof(FSkillIndicatorInfo, _code_name) == 0x000028, "Member 'FSkillIndicatorInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FSkillIndicatorInfo, _attach_socket) == 0x000030, "Member 'FSkillIndicatorInfo::_attach_socket' has a wrong offset!");
static_assert(offsetof(FSkillIndicatorInfo, _fx_path) == 0x000040, "Member 'FSkillIndicatorInfo::_fx_path' has a wrong offset!");
static_assert(offsetof(FSkillIndicatorInfo, _sound_path) == 0x000068, "Member 'FSkillIndicatorInfo::_sound_path' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.SkillIndicatorInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FSkillIndicatorInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSkillIndicatorInfo>            _SkillIndicator_array;                             // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillIndicatorInfoDB) == 0x000008, "Wrong alignment on FSkillIndicatorInfoDB");
static_assert(sizeof(FSkillIndicatorInfoDB) == 0x0000A0, "Wrong size on FSkillIndicatorInfoDB");
static_assert(offsetof(FSkillIndicatorInfoDB, _SkillIndicator_array) == 0x000078, "Member 'FSkillIndicatorInfoDB::_SkillIndicator_array' has a wrong offset!");
static_assert(offsetof(FSkillIndicatorInfoDB, _version) == 0x000088, "Member 'FSkillIndicatorInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FSkillIndicatorInfoDB, _comment) == 0x000090, "Member 'FSkillIndicatorInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.AbnormalStateChangeStatusInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FAbnormalStateChangeStatusInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbnormalStateChangeStatusInfoPtr) == 0x000008, "Wrong alignment on FAbnormalStateChangeStatusInfoPtr");
static_assert(sizeof(FAbnormalStateChangeStatusInfoPtr) == 0x000008, "Wrong size on FAbnormalStateChangeStatusInfoPtr");

// ScriptStruct ProjectPContentInfo.FloatRangeValue
// 0x0008 (0x0030 - 0x0028)
struct FFloatRangeValue final : public FContentInfoBase
{
public:
	float                                         _min;                                              // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _max;                                              // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFloatRangeValue) == 0x000008, "Wrong alignment on FFloatRangeValue");
static_assert(sizeof(FFloatRangeValue) == 0x000030, "Wrong size on FFloatRangeValue");
static_assert(offsetof(FFloatRangeValue, _min) == 0x000028, "Member 'FFloatRangeValue::_min' has a wrong offset!");
static_assert(offsetof(FFloatRangeValue, _max) == 0x00002C, "Member 'FFloatRangeValue::_max' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.QuestStepInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FQuestStepInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestStepInfoPtr) == 0x000008, "Wrong alignment on FQuestStepInfoPtr");
static_assert(sizeof(FQuestStepInfoPtr) == 0x000008, "Wrong size on FQuestStepInfoPtr");

// ScriptStruct ProjectPContentInfo.AbnormalStateChangeStatusInfo
// 0x0018 (0x0040 - 0x0028)
struct FAbnormalStateChangeStatusInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSecondStat                                  _target_stat_code_name;                            // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELFirstStat                                   _target_first_stat_code_name;                      // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAbnormalCSCalcType                          _calculate_type;                                   // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _value;                                            // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSecondStat                                  _mul_add_base_stat_code_name;                      // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbnormalStateChangeStatusInfo) == 0x000008, "Wrong alignment on FAbnormalStateChangeStatusInfo");
static_assert(sizeof(FAbnormalStateChangeStatusInfo) == 0x000040, "Wrong size on FAbnormalStateChangeStatusInfo");
static_assert(offsetof(FAbnormalStateChangeStatusInfo, _code_name) == 0x000028, "Member 'FAbnormalStateChangeStatusInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FAbnormalStateChangeStatusInfo, _target_stat_code_name) == 0x000030, "Member 'FAbnormalStateChangeStatusInfo::_target_stat_code_name' has a wrong offset!");
static_assert(offsetof(FAbnormalStateChangeStatusInfo, _target_first_stat_code_name) == 0x000031, "Member 'FAbnormalStateChangeStatusInfo::_target_first_stat_code_name' has a wrong offset!");
static_assert(offsetof(FAbnormalStateChangeStatusInfo, _calculate_type) == 0x000032, "Member 'FAbnormalStateChangeStatusInfo::_calculate_type' has a wrong offset!");
static_assert(offsetof(FAbnormalStateChangeStatusInfo, _value) == 0x000034, "Member 'FAbnormalStateChangeStatusInfo::_value' has a wrong offset!");
static_assert(offsetof(FAbnormalStateChangeStatusInfo, _mul_add_base_stat_code_name) == 0x000038, "Member 'FAbnormalStateChangeStatusInfo::_mul_add_base_stat_code_name' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.TutorialInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FTutorialInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTutorialInfoPtr) == 0x000008, "Wrong alignment on FTutorialInfoPtr");
static_assert(sizeof(FTutorialInfoPtr) == 0x000008, "Wrong size on FTutorialInfoPtr");

// ScriptStruct ProjectPContentInfo.PatchItemPackage
// 0x0010 (0x0038 - 0x0028)
struct FPatchItemPackage final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _count;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _print_order;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPatchItemPackage) == 0x000008, "Wrong alignment on FPatchItemPackage");
static_assert(sizeof(FPatchItemPackage) == 0x000038, "Wrong size on FPatchItemPackage");
static_assert(offsetof(FPatchItemPackage, _code_name) == 0x000028, "Member 'FPatchItemPackage::_code_name' has a wrong offset!");
static_assert(offsetof(FPatchItemPackage, _count) == 0x000030, "Member 'FPatchItemPackage::_count' has a wrong offset!");
static_assert(offsetof(FPatchItemPackage, _print_order) == 0x000034, "Member 'FPatchItemPackage::_print_order' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PatchWeaponPackage
// 0x0018 (0x0040 - 0x0028)
struct FPatchWeaponPackage final : public FContentInfoBase
{
public:
	class FName                                   _handle_code_name;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _blade_code_name;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _print_order;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPatchWeaponPackage) == 0x000008, "Wrong alignment on FPatchWeaponPackage");
static_assert(sizeof(FPatchWeaponPackage) == 0x000040, "Wrong size on FPatchWeaponPackage");
static_assert(offsetof(FPatchWeaponPackage, _handle_code_name) == 0x000028, "Member 'FPatchWeaponPackage::_handle_code_name' has a wrong offset!");
static_assert(offsetof(FPatchWeaponPackage, _blade_code_name) == 0x000030, "Member 'FPatchWeaponPackage::_blade_code_name' has a wrong offset!");
static_assert(offsetof(FPatchWeaponPackage, _print_order) == 0x000038, "Member 'FPatchWeaponPackage::_print_order' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PatchRewardInfo
// 0x0070 (0x0098 - 0x0028)
struct FPatchRewardInfo final : public FContentInfoBase
{
public:
	TArray<struct FPatchItemPackage>              _item_list_array;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FPatchWeaponPackage>            _weapon_list_array;                                // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FName                                   _code_name;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _order;                                            // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _version;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _version_ps4;                                      // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _version_ps5;                                      // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _version_mac;                                      // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPatchRewardInfo) == 0x000008, "Wrong alignment on FPatchRewardInfo");
static_assert(sizeof(FPatchRewardInfo) == 0x000098, "Wrong size on FPatchRewardInfo");
static_assert(offsetof(FPatchRewardInfo, _item_list_array) == 0x000028, "Member 'FPatchRewardInfo::_item_list_array' has a wrong offset!");
static_assert(offsetof(FPatchRewardInfo, _weapon_list_array) == 0x000038, "Member 'FPatchRewardInfo::_weapon_list_array' has a wrong offset!");
static_assert(offsetof(FPatchRewardInfo, _code_name) == 0x000048, "Member 'FPatchRewardInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FPatchRewardInfo, _order) == 0x000050, "Member 'FPatchRewardInfo::_order' has a wrong offset!");
static_assert(offsetof(FPatchRewardInfo, _version) == 0x000058, "Member 'FPatchRewardInfo::_version' has a wrong offset!");
static_assert(offsetof(FPatchRewardInfo, _version_ps4) == 0x000068, "Member 'FPatchRewardInfo::_version_ps4' has a wrong offset!");
static_assert(offsetof(FPatchRewardInfo, _version_ps5) == 0x000078, "Member 'FPatchRewardInfo::_version_ps5' has a wrong offset!");
static_assert(offsetof(FPatchRewardInfo, _version_mac) == 0x000088, "Member 'FPatchRewardInfo::_version_mac' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PatchRewardInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FPatchRewardInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPatchRewardInfo>               _PatchRewardInfo_array;                            // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPatchRewardInfoDB) == 0x000008, "Wrong alignment on FPatchRewardInfoDB");
static_assert(sizeof(FPatchRewardInfoDB) == 0x0000A0, "Wrong size on FPatchRewardInfoDB");
static_assert(offsetof(FPatchRewardInfoDB, _PatchRewardInfo_array) == 0x000078, "Member 'FPatchRewardInfoDB::_PatchRewardInfo_array' has a wrong offset!");
static_assert(offsetof(FPatchRewardInfoDB, _version) == 0x000088, "Member 'FPatchRewardInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FPatchRewardInfoDB, _comment) == 0x000090, "Member 'FPatchRewardInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ActionStateInfo
// 0x0010 (0x0038 - 0x0028)
struct FActionStateInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _dummy;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActionStateInfo) == 0x000008, "Wrong alignment on FActionStateInfo");
static_assert(sizeof(FActionStateInfo) == 0x000038, "Wrong size on FActionStateInfo");
static_assert(offsetof(FActionStateInfo, _code_name) == 0x000028, "Member 'FActionStateInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FActionStateInfo, _dummy) == 0x000030, "Member 'FActionStateInfo::_dummy' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ActionStateInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FActionStateInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActionStateInfo>               _ActionState_array;                                // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionStateInfoDB) == 0x000008, "Wrong alignment on FActionStateInfoDB");
static_assert(sizeof(FActionStateInfoDB) == 0x0000A0, "Wrong size on FActionStateInfoDB");
static_assert(offsetof(FActionStateInfoDB, _ActionState_array) == 0x000078, "Member 'FActionStateInfoDB::_ActionState_array' has a wrong offset!");
static_assert(offsetof(FActionStateInfoDB, _version) == 0x000088, "Member 'FActionStateInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FActionStateInfoDB, _comment) == 0x000090, "Member 'FActionStateInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.WorldEventInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FWorldEventInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWorldEventInfoPtr) == 0x000008, "Wrong alignment on FWorldEventInfoPtr");
static_assert(sizeof(FWorldEventInfoPtr) == 0x000008, "Wrong size on FWorldEventInfoPtr");

// ScriptStruct ProjectPContentInfo.SpawnControllerInfo
// 0x0040 (0x0068 - 0x0028)
struct FSpawnControllerInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _spawn_cond_weather;                               // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELLightScenarioType                           _spawn_cond_AMPM;                                  // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTimeZoneType                                _spawn_cond_timezone;                              // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELWeatherType                                 _spawn_cond_DryWet;                                // 0x003A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _spawn_cond_haveitem;                              // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _spawn_cond_human_point;                           // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _spawn_cond_have_quest;                            // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _spawn_cond_have_quest_step;                       // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _spawn_cond_complete_quest;                        // 0x0054(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELQuestState                                  _spawn_cond_complete_quest_result;                 // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _spawn_cond_custom;                                // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnControllerInfo) == 0x000008, "Wrong alignment on FSpawnControllerInfo");
static_assert(sizeof(FSpawnControllerInfo) == 0x000068, "Wrong size on FSpawnControllerInfo");
static_assert(offsetof(FSpawnControllerInfo, _code_name) == 0x000028, "Member 'FSpawnControllerInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FSpawnControllerInfo, _spawn_cond_weather) == 0x000030, "Member 'FSpawnControllerInfo::_spawn_cond_weather' has a wrong offset!");
static_assert(offsetof(FSpawnControllerInfo, _spawn_cond_AMPM) == 0x000038, "Member 'FSpawnControllerInfo::_spawn_cond_AMPM' has a wrong offset!");
static_assert(offsetof(FSpawnControllerInfo, _spawn_cond_timezone) == 0x000039, "Member 'FSpawnControllerInfo::_spawn_cond_timezone' has a wrong offset!");
static_assert(offsetof(FSpawnControllerInfo, _spawn_cond_DryWet) == 0x00003A, "Member 'FSpawnControllerInfo::_spawn_cond_DryWet' has a wrong offset!");
static_assert(offsetof(FSpawnControllerInfo, _spawn_cond_haveitem) == 0x00003C, "Member 'FSpawnControllerInfo::_spawn_cond_haveitem' has a wrong offset!");
static_assert(offsetof(FSpawnControllerInfo, _spawn_cond_human_point) == 0x000044, "Member 'FSpawnControllerInfo::_spawn_cond_human_point' has a wrong offset!");
static_assert(offsetof(FSpawnControllerInfo, _spawn_cond_have_quest) == 0x000048, "Member 'FSpawnControllerInfo::_spawn_cond_have_quest' has a wrong offset!");
static_assert(offsetof(FSpawnControllerInfo, _spawn_cond_have_quest_step) == 0x000050, "Member 'FSpawnControllerInfo::_spawn_cond_have_quest_step' has a wrong offset!");
static_assert(offsetof(FSpawnControllerInfo, _spawn_cond_complete_quest) == 0x000054, "Member 'FSpawnControllerInfo::_spawn_cond_complete_quest' has a wrong offset!");
static_assert(offsetof(FSpawnControllerInfo, _spawn_cond_complete_quest_result) == 0x00005C, "Member 'FSpawnControllerInfo::_spawn_cond_complete_quest_result' has a wrong offset!");
static_assert(offsetof(FSpawnControllerInfo, _spawn_cond_custom) == 0x000060, "Member 'FSpawnControllerInfo::_spawn_cond_custom' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.SpotMatchInfo
// 0x0020 (0x0048 - 0x0028)
struct FSpotMatchInfo final : public FContentInfoBase
{
public:
	class FString                                 _npc_spot_id;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _NPC_Spawn_Controller_code_name;                   // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELConditionCheckType                          _NPC_Spawn_Controller_check_type;                  // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpotMatchInfo) == 0x000008, "Wrong alignment on FSpotMatchInfo");
static_assert(sizeof(FSpotMatchInfo) == 0x000048, "Wrong size on FSpotMatchInfo");
static_assert(offsetof(FSpotMatchInfo, _npc_spot_id) == 0x000028, "Member 'FSpotMatchInfo::_npc_spot_id' has a wrong offset!");
static_assert(offsetof(FSpotMatchInfo, _NPC_Spawn_Controller_code_name) == 0x000038, "Member 'FSpotMatchInfo::_NPC_Spawn_Controller_code_name' has a wrong offset!");
static_assert(offsetof(FSpotMatchInfo, _NPC_Spawn_Controller_check_type) == 0x000040, "Member 'FSpotMatchInfo::_NPC_Spawn_Controller_check_type' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.NPCSpawnControllerInfoDB
// 0x00D8 (0x0100 - 0x0028)
struct FNPCSpawnControllerInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSpawnControllerInfo>           _SpawnControllerInfo_array;                        // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x50];                                      // 0x0088(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSpotMatchInfo>                 _SpotMatchInfo_array;                              // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNPCSpawnControllerInfoDB) == 0x000008, "Wrong alignment on FNPCSpawnControllerInfoDB");
static_assert(sizeof(FNPCSpawnControllerInfoDB) == 0x000100, "Wrong size on FNPCSpawnControllerInfoDB");
static_assert(offsetof(FNPCSpawnControllerInfoDB, _SpawnControllerInfo_array) == 0x000078, "Member 'FNPCSpawnControllerInfoDB::_SpawnControllerInfo_array' has a wrong offset!");
static_assert(offsetof(FNPCSpawnControllerInfoDB, _SpotMatchInfo_array) == 0x0000D8, "Member 'FNPCSpawnControllerInfoDB::_SpotMatchInfo_array' has a wrong offset!");
static_assert(offsetof(FNPCSpawnControllerInfoDB, _version) == 0x0000E8, "Member 'FNPCSpawnControllerInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FNPCSpawnControllerInfoDB, _comment) == 0x0000F0, "Member 'FNPCSpawnControllerInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ResetNeedItemInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FResetNeedItemInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FResetNeedItemInfoPtr) == 0x000008, "Wrong alignment on FResetNeedItemInfoPtr");
static_assert(sizeof(FResetNeedItemInfoPtr) == 0x000008, "Wrong size on FResetNeedItemInfoPtr");

// ScriptStruct ProjectPContentInfo.ActionStateType
// 0x0008 (0x0030 - 0x0028)
struct FActionStateType final : public FContentInfoBase
{
public:
	class FName                                   _value;                                            // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionStateType) == 0x000008, "Wrong alignment on FActionStateType");
static_assert(sizeof(FActionStateType) == 0x000030, "Wrong size on FActionStateType");
static_assert(offsetof(FActionStateType, _value) == 0x000028, "Member 'FActionStateType::_value' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.AbnormalStateCommonInfo
// 0x01F8 (0x0220 - 0x0028)
struct FAbnormalStateCommonInfo final : public FContentInfoBase
{
public:
	TArray<struct FActionStateType>               _action_state_array;                               // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FName                                   _code_name;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _group_code_name;                                  // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _name;                                             // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _tooltip;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _name_cn;                                          // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _tooltip_cn;                                       // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_weapon_enchant;                                // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_fable_buff;                                    // 0x0079(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _priority_group_id;                                // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _priority;                                         // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAbnormalAbstateClass                        _abstate_class;                                    // 0x0084(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAbnormalActivation                          _activation_type;                                  // 0x0085(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAbnormalBuffDebuffType                      _abstate_buffdebuff_type;                          // 0x0086(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_87[0x1];                                       // 0x0087(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _contentcondition_code_name;                       // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _disable_contentcondition_code_name;               // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _momentcondition_code_name;                        // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _momentcondition_count;                            // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELStateEffectTargetType                       _momentcondition_target;                           // 0x00A4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _duration;                                         // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _duration_modify_moment;                           // 0x00AC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELStateEffectTargetType                       _duration_modify_moment_target;                    // 0x00B4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAbnormalCSCalcType                          _duration_modify_cal_type;                         // 0x00B5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B6[0x2];                                       // 0x00B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _duration_modify_value;                            // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _tick;                                             // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _timeout_buff_code_name;                           // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _show_ui;                                          // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 _icon_resource;                                    // 0x00D0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _keep_logout;                                      // 0x00F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _keep_dead;                                        // 0x00F9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _keep_respawn;                                     // 0x00FA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB[0x1];                                       // 0x00FB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _build_up_attack;                                  // 0x00FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAbnormalStackType                           _stack_type;                                       // 0x0100(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 _attach_motion;                                    // 0x0108(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _loop_motion;                                      // 0x0130(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _detach_motion;                                    // 0x0158(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _attach_fx_socket;                                 // 0x0180(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _attach_fx_code_name;                              // 0x0188(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _loop_fx_socket;                                   // 0x0190(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _loop_fx_code_name;                                // 0x0198(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _detach_fx_socket;                                 // 0x01A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _detach_fx_code_name;                              // 0x01A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _material_fx_code_name;                            // 0x01B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _varying_fx_code_name;                             // 0x01B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ignore_sensitive_range;                           // 0x01C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELBuildupGuardType                            _build_up_attack_guard_type;                       // 0x01C1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELWeaponAttachPointType                       _weapon_attach_point_type;                         // 0x01C2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELWeaponPartType                              _weapon_anim_parts_type;                           // 0x01C3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _weapon_anim_state;                                // 0x01C4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _weapon_anim_state_exit;                           // 0x01CC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _decrease_frenzy_point_per_second;                 // 0x01D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _weapon_material_fx_code_name;                     // 0x01D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _humanization_buff_alter_code_name;                // 0x01E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _attach_action_command;                            // 0x01E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _build_up_recover_delay_override;                  // 0x01F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _build_up_recover_override;                        // 0x01F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _aura_abnormal_code_name;                          // 0x01F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _aura_radius;                                      // 0x0200(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAuraNPCKindType                             _aura_npc_kind;                                    // 0x0204(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELElementDamageType                           _weapon_element_override;                          // 0x0205(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _apply_duration_penalty;                           // 0x0206(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _apply_tick_penalty;                               // 0x0207(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _apply_build_up_recover_increase;                  // 0x0208(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_209[0x3];                                      // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _momentcondition_probability;                      // 0x020C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAbnormalEnchantType                         _enchant_sd_type;                                  // 0x0210(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211[0x3];                                      // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _build_up_attack_modify;                           // 0x0214(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _attach_fx_all_weapon;                             // 0x0218(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219[0x7];                                      // 0x0219(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbnormalStateCommonInfo) == 0x000008, "Wrong alignment on FAbnormalStateCommonInfo");
static_assert(sizeof(FAbnormalStateCommonInfo) == 0x000220, "Wrong size on FAbnormalStateCommonInfo");
static_assert(offsetof(FAbnormalStateCommonInfo, _action_state_array) == 0x000028, "Member 'FAbnormalStateCommonInfo::_action_state_array' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _code_name) == 0x000038, "Member 'FAbnormalStateCommonInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _group_code_name) == 0x000040, "Member 'FAbnormalStateCommonInfo::_group_code_name' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _name) == 0x000048, "Member 'FAbnormalStateCommonInfo::_name' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _tooltip) == 0x000058, "Member 'FAbnormalStateCommonInfo::_tooltip' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _name_cn) == 0x000068, "Member 'FAbnormalStateCommonInfo::_name_cn' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _tooltip_cn) == 0x000070, "Member 'FAbnormalStateCommonInfo::_tooltip_cn' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _is_weapon_enchant) == 0x000078, "Member 'FAbnormalStateCommonInfo::_is_weapon_enchant' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _is_fable_buff) == 0x000079, "Member 'FAbnormalStateCommonInfo::_is_fable_buff' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _priority_group_id) == 0x00007C, "Member 'FAbnormalStateCommonInfo::_priority_group_id' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _priority) == 0x000080, "Member 'FAbnormalStateCommonInfo::_priority' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _abstate_class) == 0x000084, "Member 'FAbnormalStateCommonInfo::_abstate_class' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _activation_type) == 0x000085, "Member 'FAbnormalStateCommonInfo::_activation_type' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _abstate_buffdebuff_type) == 0x000086, "Member 'FAbnormalStateCommonInfo::_abstate_buffdebuff_type' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _contentcondition_code_name) == 0x000088, "Member 'FAbnormalStateCommonInfo::_contentcondition_code_name' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _disable_contentcondition_code_name) == 0x000090, "Member 'FAbnormalStateCommonInfo::_disable_contentcondition_code_name' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _momentcondition_code_name) == 0x000098, "Member 'FAbnormalStateCommonInfo::_momentcondition_code_name' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _momentcondition_count) == 0x0000A0, "Member 'FAbnormalStateCommonInfo::_momentcondition_count' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _momentcondition_target) == 0x0000A4, "Member 'FAbnormalStateCommonInfo::_momentcondition_target' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _duration) == 0x0000A8, "Member 'FAbnormalStateCommonInfo::_duration' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _duration_modify_moment) == 0x0000AC, "Member 'FAbnormalStateCommonInfo::_duration_modify_moment' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _duration_modify_moment_target) == 0x0000B4, "Member 'FAbnormalStateCommonInfo::_duration_modify_moment_target' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _duration_modify_cal_type) == 0x0000B5, "Member 'FAbnormalStateCommonInfo::_duration_modify_cal_type' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _duration_modify_value) == 0x0000B8, "Member 'FAbnormalStateCommonInfo::_duration_modify_value' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _tick) == 0x0000BC, "Member 'FAbnormalStateCommonInfo::_tick' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _timeout_buff_code_name) == 0x0000C0, "Member 'FAbnormalStateCommonInfo::_timeout_buff_code_name' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _show_ui) == 0x0000C8, "Member 'FAbnormalStateCommonInfo::_show_ui' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _icon_resource) == 0x0000D0, "Member 'FAbnormalStateCommonInfo::_icon_resource' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _keep_logout) == 0x0000F8, "Member 'FAbnormalStateCommonInfo::_keep_logout' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _keep_dead) == 0x0000F9, "Member 'FAbnormalStateCommonInfo::_keep_dead' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _keep_respawn) == 0x0000FA, "Member 'FAbnormalStateCommonInfo::_keep_respawn' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _build_up_attack) == 0x0000FC, "Member 'FAbnormalStateCommonInfo::_build_up_attack' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _stack_type) == 0x000100, "Member 'FAbnormalStateCommonInfo::_stack_type' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _attach_motion) == 0x000108, "Member 'FAbnormalStateCommonInfo::_attach_motion' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _loop_motion) == 0x000130, "Member 'FAbnormalStateCommonInfo::_loop_motion' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _detach_motion) == 0x000158, "Member 'FAbnormalStateCommonInfo::_detach_motion' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _attach_fx_socket) == 0x000180, "Member 'FAbnormalStateCommonInfo::_attach_fx_socket' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _attach_fx_code_name) == 0x000188, "Member 'FAbnormalStateCommonInfo::_attach_fx_code_name' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _loop_fx_socket) == 0x000190, "Member 'FAbnormalStateCommonInfo::_loop_fx_socket' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _loop_fx_code_name) == 0x000198, "Member 'FAbnormalStateCommonInfo::_loop_fx_code_name' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _detach_fx_socket) == 0x0001A0, "Member 'FAbnormalStateCommonInfo::_detach_fx_socket' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _detach_fx_code_name) == 0x0001A8, "Member 'FAbnormalStateCommonInfo::_detach_fx_code_name' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _material_fx_code_name) == 0x0001B0, "Member 'FAbnormalStateCommonInfo::_material_fx_code_name' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _varying_fx_code_name) == 0x0001B8, "Member 'FAbnormalStateCommonInfo::_varying_fx_code_name' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _ignore_sensitive_range) == 0x0001C0, "Member 'FAbnormalStateCommonInfo::_ignore_sensitive_range' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _build_up_attack_guard_type) == 0x0001C1, "Member 'FAbnormalStateCommonInfo::_build_up_attack_guard_type' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _weapon_attach_point_type) == 0x0001C2, "Member 'FAbnormalStateCommonInfo::_weapon_attach_point_type' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _weapon_anim_parts_type) == 0x0001C3, "Member 'FAbnormalStateCommonInfo::_weapon_anim_parts_type' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _weapon_anim_state) == 0x0001C4, "Member 'FAbnormalStateCommonInfo::_weapon_anim_state' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _weapon_anim_state_exit) == 0x0001CC, "Member 'FAbnormalStateCommonInfo::_weapon_anim_state_exit' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _decrease_frenzy_point_per_second) == 0x0001D4, "Member 'FAbnormalStateCommonInfo::_decrease_frenzy_point_per_second' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _weapon_material_fx_code_name) == 0x0001D8, "Member 'FAbnormalStateCommonInfo::_weapon_material_fx_code_name' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _humanization_buff_alter_code_name) == 0x0001E0, "Member 'FAbnormalStateCommonInfo::_humanization_buff_alter_code_name' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _attach_action_command) == 0x0001E8, "Member 'FAbnormalStateCommonInfo::_attach_action_command' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _build_up_recover_delay_override) == 0x0001F0, "Member 'FAbnormalStateCommonInfo::_build_up_recover_delay_override' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _build_up_recover_override) == 0x0001F4, "Member 'FAbnormalStateCommonInfo::_build_up_recover_override' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _aura_abnormal_code_name) == 0x0001F8, "Member 'FAbnormalStateCommonInfo::_aura_abnormal_code_name' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _aura_radius) == 0x000200, "Member 'FAbnormalStateCommonInfo::_aura_radius' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _aura_npc_kind) == 0x000204, "Member 'FAbnormalStateCommonInfo::_aura_npc_kind' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _weapon_element_override) == 0x000205, "Member 'FAbnormalStateCommonInfo::_weapon_element_override' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _apply_duration_penalty) == 0x000206, "Member 'FAbnormalStateCommonInfo::_apply_duration_penalty' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _apply_tick_penalty) == 0x000207, "Member 'FAbnormalStateCommonInfo::_apply_tick_penalty' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _apply_build_up_recover_increase) == 0x000208, "Member 'FAbnormalStateCommonInfo::_apply_build_up_recover_increase' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _momentcondition_probability) == 0x00020C, "Member 'FAbnormalStateCommonInfo::_momentcondition_probability' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _enchant_sd_type) == 0x000210, "Member 'FAbnormalStateCommonInfo::_enchant_sd_type' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _build_up_attack_modify) == 0x000214, "Member 'FAbnormalStateCommonInfo::_build_up_attack_modify' has a wrong offset!");
static_assert(offsetof(FAbnormalStateCommonInfo, _attach_fx_all_weapon) == 0x000218, "Member 'FAbnormalStateCommonInfo::_attach_fx_all_weapon' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.AbnormalStateDamageHealInfo
// 0x0020 (0x0048 - 0x0028)
struct FAbnormalStateDamageHealInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAbnormalDamageHealTargetType                _target_type;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAbnormalDHCalcType                          _calculate_type;                                   // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _value;                                            // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _abnormal_state_code_name;                         // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSecondStat                                  _rate_base_stat_code_name;                         // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _apply_rate_dot_reduce;                            // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _NGP_Detail_index;                                 // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbnormalStateDamageHealInfo) == 0x000008, "Wrong alignment on FAbnormalStateDamageHealInfo");
static_assert(sizeof(FAbnormalStateDamageHealInfo) == 0x000048, "Wrong size on FAbnormalStateDamageHealInfo");
static_assert(offsetof(FAbnormalStateDamageHealInfo, _code_name) == 0x000028, "Member 'FAbnormalStateDamageHealInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FAbnormalStateDamageHealInfo, _target_type) == 0x000030, "Member 'FAbnormalStateDamageHealInfo::_target_type' has a wrong offset!");
static_assert(offsetof(FAbnormalStateDamageHealInfo, _calculate_type) == 0x000031, "Member 'FAbnormalStateDamageHealInfo::_calculate_type' has a wrong offset!");
static_assert(offsetof(FAbnormalStateDamageHealInfo, _value) == 0x000034, "Member 'FAbnormalStateDamageHealInfo::_value' has a wrong offset!");
static_assert(offsetof(FAbnormalStateDamageHealInfo, _abnormal_state_code_name) == 0x000038, "Member 'FAbnormalStateDamageHealInfo::_abnormal_state_code_name' has a wrong offset!");
static_assert(offsetof(FAbnormalStateDamageHealInfo, _rate_base_stat_code_name) == 0x000040, "Member 'FAbnormalStateDamageHealInfo::_rate_base_stat_code_name' has a wrong offset!");
static_assert(offsetof(FAbnormalStateDamageHealInfo, _apply_rate_dot_reduce) == 0x000041, "Member 'FAbnormalStateDamageHealInfo::_apply_rate_dot_reduce' has a wrong offset!");
static_assert(offsetof(FAbnormalStateDamageHealInfo, _NGP_Detail_index) == 0x000044, "Member 'FAbnormalStateDamageHealInfo::_NGP_Detail_index' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.AbnormalStateAttackInfo
// 0x0018 (0x0040 - 0x0028)
struct FAbnormalStateAttackInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAbnormalAttackType                          _attack_type;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAbnormalACalcType                           _calculate_type;                                   // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _value;                                            // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSecondStat                                  _mul_base_stat_code_name;                          // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _NGP_Detail_index;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbnormalStateAttackInfo) == 0x000008, "Wrong alignment on FAbnormalStateAttackInfo");
static_assert(sizeof(FAbnormalStateAttackInfo) == 0x000040, "Wrong size on FAbnormalStateAttackInfo");
static_assert(offsetof(FAbnormalStateAttackInfo, _code_name) == 0x000028, "Member 'FAbnormalStateAttackInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FAbnormalStateAttackInfo, _attack_type) == 0x000030, "Member 'FAbnormalStateAttackInfo::_attack_type' has a wrong offset!");
static_assert(offsetof(FAbnormalStateAttackInfo, _calculate_type) == 0x000031, "Member 'FAbnormalStateAttackInfo::_calculate_type' has a wrong offset!");
static_assert(offsetof(FAbnormalStateAttackInfo, _value) == 0x000034, "Member 'FAbnormalStateAttackInfo::_value' has a wrong offset!");
static_assert(offsetof(FAbnormalStateAttackInfo, _mul_base_stat_code_name) == 0x000038, "Member 'FAbnormalStateAttackInfo::_mul_base_stat_code_name' has a wrong offset!");
static_assert(offsetof(FAbnormalStateAttackInfo, _NGP_Detail_index) == 0x00003C, "Member 'FAbnormalStateAttackInfo::_NGP_Detail_index' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.AbnormalStateChainInfo
// 0x0018 (0x0040 - 0x0028)
struct FAbnormalStateChainInfo final : public FContentInfoBase
{
public:
	class FName                                   _abnormal_state_code_name_1;                       // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _abnormal_state_code_name_2;                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _abnormal_state_code_name_result;                  // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbnormalStateChainInfo) == 0x000008, "Wrong alignment on FAbnormalStateChainInfo");
static_assert(sizeof(FAbnormalStateChainInfo) == 0x000040, "Wrong size on FAbnormalStateChainInfo");
static_assert(offsetof(FAbnormalStateChainInfo, _abnormal_state_code_name_1) == 0x000028, "Member 'FAbnormalStateChainInfo::_abnormal_state_code_name_1' has a wrong offset!");
static_assert(offsetof(FAbnormalStateChainInfo, _abnormal_state_code_name_2) == 0x000030, "Member 'FAbnormalStateChainInfo::_abnormal_state_code_name_2' has a wrong offset!");
static_assert(offsetof(FAbnormalStateChainInfo, _abnormal_state_code_name_result) == 0x000038, "Member 'FAbnormalStateChainInfo::_abnormal_state_code_name_result' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.AbnormalStateExecInfo
// 0x0040 (0x0068 - 0x0028)
struct FAbnormalStateExecInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAbnormalExecType                            _exec_type;                                        // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _param1;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param2;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param3;                                           // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbnormalStateExecInfo) == 0x000008, "Wrong alignment on FAbnormalStateExecInfo");
static_assert(sizeof(FAbnormalStateExecInfo) == 0x000068, "Wrong size on FAbnormalStateExecInfo");
static_assert(offsetof(FAbnormalStateExecInfo, _code_name) == 0x000028, "Member 'FAbnormalStateExecInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FAbnormalStateExecInfo, _exec_type) == 0x000030, "Member 'FAbnormalStateExecInfo::_exec_type' has a wrong offset!");
static_assert(offsetof(FAbnormalStateExecInfo, _param1) == 0x000038, "Member 'FAbnormalStateExecInfo::_param1' has a wrong offset!");
static_assert(offsetof(FAbnormalStateExecInfo, _param2) == 0x000048, "Member 'FAbnormalStateExecInfo::_param2' has a wrong offset!");
static_assert(offsetof(FAbnormalStateExecInfo, _param3) == 0x000058, "Member 'FAbnormalStateExecInfo::_param3' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.AbnormalStateReplaceEffectInfo
// 0x0050 (0x0078 - 0x0028)
struct FAbnormalStateReplaceEffectInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _chk_stack_num;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 _loop_motion;                                      // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _loop_fx_code_name;                                // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _material_fx_code_name;                            // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbnormalStateReplaceEffectInfo) == 0x000008, "Wrong alignment on FAbnormalStateReplaceEffectInfo");
static_assert(sizeof(FAbnormalStateReplaceEffectInfo) == 0x000078, "Wrong size on FAbnormalStateReplaceEffectInfo");
static_assert(offsetof(FAbnormalStateReplaceEffectInfo, _code_name) == 0x000028, "Member 'FAbnormalStateReplaceEffectInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FAbnormalStateReplaceEffectInfo, _chk_stack_num) == 0x000030, "Member 'FAbnormalStateReplaceEffectInfo::_chk_stack_num' has a wrong offset!");
static_assert(offsetof(FAbnormalStateReplaceEffectInfo, _loop_motion) == 0x000038, "Member 'FAbnormalStateReplaceEffectInfo::_loop_motion' has a wrong offset!");
static_assert(offsetof(FAbnormalStateReplaceEffectInfo, _loop_fx_code_name) == 0x000060, "Member 'FAbnormalStateReplaceEffectInfo::_loop_fx_code_name' has a wrong offset!");
static_assert(offsetof(FAbnormalStateReplaceEffectInfo, _material_fx_code_name) == 0x000068, "Member 'FAbnormalStateReplaceEffectInfo::_material_fx_code_name' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.AbnormalStateInfoDB
// 0x00D8 (0x0100 - 0x0028)
struct FAbnormalStateInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAbnormalStateCommonInfo>       _AbnormalStateCommon_array;                        // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FAbnormalStateChangeStatusInfo> _AbnormalStateChangeStatus_array;                  // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FAbnormalStateDamageHealInfo>   _AbnormalStateDamageHeal_array;                    // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FAbnormalStateAttackInfo>       _AbnormalStateAttack_array;                        // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FAbnormalStateChainInfo>        _AbnormalStateChain_array;                         // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FAbnormalStateExecInfo>         _AbnormalStateExec_array;                          // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FAbnormalStateReplaceEffectInfo> _AbnormalStateReplaceEffect_array;                 // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbnormalStateInfoDB) == 0x000008, "Wrong alignment on FAbnormalStateInfoDB");
static_assert(sizeof(FAbnormalStateInfoDB) == 0x000100, "Wrong size on FAbnormalStateInfoDB");
static_assert(offsetof(FAbnormalStateInfoDB, _AbnormalStateCommon_array) == 0x000078, "Member 'FAbnormalStateInfoDB::_AbnormalStateCommon_array' has a wrong offset!");
static_assert(offsetof(FAbnormalStateInfoDB, _AbnormalStateChangeStatus_array) == 0x000088, "Member 'FAbnormalStateInfoDB::_AbnormalStateChangeStatus_array' has a wrong offset!");
static_assert(offsetof(FAbnormalStateInfoDB, _AbnormalStateDamageHeal_array) == 0x000098, "Member 'FAbnormalStateInfoDB::_AbnormalStateDamageHeal_array' has a wrong offset!");
static_assert(offsetof(FAbnormalStateInfoDB, _AbnormalStateAttack_array) == 0x0000A8, "Member 'FAbnormalStateInfoDB::_AbnormalStateAttack_array' has a wrong offset!");
static_assert(offsetof(FAbnormalStateInfoDB, _AbnormalStateChain_array) == 0x0000B8, "Member 'FAbnormalStateInfoDB::_AbnormalStateChain_array' has a wrong offset!");
static_assert(offsetof(FAbnormalStateInfoDB, _AbnormalStateExec_array) == 0x0000C8, "Member 'FAbnormalStateInfoDB::_AbnormalStateExec_array' has a wrong offset!");
static_assert(offsetof(FAbnormalStateInfoDB, _AbnormalStateReplaceEffect_array) == 0x0000D8, "Member 'FAbnormalStateInfoDB::_AbnormalStateReplaceEffect_array' has a wrong offset!");
static_assert(offsetof(FAbnormalStateInfoDB, _version) == 0x0000E8, "Member 'FAbnormalStateInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FAbnormalStateInfoDB, _comment) == 0x0000F0, "Member 'FAbnormalStateInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.GeneralCallBackEventInfo
// 0x0028 (0x0050 - 0x0028)
struct FGeneralCallBackEventInfo final : public FContentInfoBase
{
public:
	ELCallBackEventType                           _callback_event_type;                              // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _callback_event_param1;                            // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _callback_event_param2;                            // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeneralCallBackEventInfo) == 0x000008, "Wrong alignment on FGeneralCallBackEventInfo");
static_assert(sizeof(FGeneralCallBackEventInfo) == 0x000050, "Wrong size on FGeneralCallBackEventInfo");
static_assert(offsetof(FGeneralCallBackEventInfo, _callback_event_type) == 0x000028, "Member 'FGeneralCallBackEventInfo::_callback_event_type' has a wrong offset!");
static_assert(offsetof(FGeneralCallBackEventInfo, _callback_event_param1) == 0x000030, "Member 'FGeneralCallBackEventInfo::_callback_event_param1' has a wrong offset!");
static_assert(offsetof(FGeneralCallBackEventInfo, _callback_event_param2) == 0x000040, "Member 'FGeneralCallBackEventInfo::_callback_event_param2' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.GeneralConditionInfo
// 0x0038 (0x0060 - 0x0028)
struct FGeneralConditionInfo final : public FContentInfoBase
{
public:
	ELConditionCompareType                        _condition_type;                                   // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _param1;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param2;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param3;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeneralConditionInfo) == 0x000008, "Wrong alignment on FGeneralConditionInfo");
static_assert(sizeof(FGeneralConditionInfo) == 0x000060, "Wrong size on FGeneralConditionInfo");
static_assert(offsetof(FGeneralConditionInfo, _condition_type) == 0x000028, "Member 'FGeneralConditionInfo::_condition_type' has a wrong offset!");
static_assert(offsetof(FGeneralConditionInfo, _param1) == 0x000030, "Member 'FGeneralConditionInfo::_param1' has a wrong offset!");
static_assert(offsetof(FGeneralConditionInfo, _param2) == 0x000040, "Member 'FGeneralConditionInfo::_param2' has a wrong offset!");
static_assert(offsetof(FGeneralConditionInfo, _param3) == 0x000050, "Member 'FGeneralConditionInfo::_param3' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.GeneralCommandInfo
// 0x00A8 (0x00D0 - 0x0028)
struct FGeneralCommandInfo final : public FContentInfoBase
{
public:
	ELContentCommandType                          _command_enum;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _param1;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param2;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param3;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param4;                                           // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param5;                                           // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param6;                                           // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param7;                                           // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param8;                                           // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param9;                                           // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param10;                                          // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeneralCommandInfo) == 0x000008, "Wrong alignment on FGeneralCommandInfo");
static_assert(sizeof(FGeneralCommandInfo) == 0x0000D0, "Wrong size on FGeneralCommandInfo");
static_assert(offsetof(FGeneralCommandInfo, _command_enum) == 0x000028, "Member 'FGeneralCommandInfo::_command_enum' has a wrong offset!");
static_assert(offsetof(FGeneralCommandInfo, _param1) == 0x000030, "Member 'FGeneralCommandInfo::_param1' has a wrong offset!");
static_assert(offsetof(FGeneralCommandInfo, _param2) == 0x000040, "Member 'FGeneralCommandInfo::_param2' has a wrong offset!");
static_assert(offsetof(FGeneralCommandInfo, _param3) == 0x000050, "Member 'FGeneralCommandInfo::_param3' has a wrong offset!");
static_assert(offsetof(FGeneralCommandInfo, _param4) == 0x000060, "Member 'FGeneralCommandInfo::_param4' has a wrong offset!");
static_assert(offsetof(FGeneralCommandInfo, _param5) == 0x000070, "Member 'FGeneralCommandInfo::_param5' has a wrong offset!");
static_assert(offsetof(FGeneralCommandInfo, _param6) == 0x000080, "Member 'FGeneralCommandInfo::_param6' has a wrong offset!");
static_assert(offsetof(FGeneralCommandInfo, _param7) == 0x000090, "Member 'FGeneralCommandInfo::_param7' has a wrong offset!");
static_assert(offsetof(FGeneralCommandInfo, _param8) == 0x0000A0, "Member 'FGeneralCommandInfo::_param8' has a wrong offset!");
static_assert(offsetof(FGeneralCommandInfo, _param9) == 0x0000B0, "Member 'FGeneralCommandInfo::_param9' has a wrong offset!");
static_assert(offsetof(FGeneralCommandInfo, _param10) == 0x0000C0, "Member 'FGeneralCommandInfo::_param10' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.QuestRewardItemInfo
// 0x0010 (0x0038 - 0x0028)
struct FQuestRewardItemInfo final : public FContentInfoBase
{
public:
	class FName                                   _item_code_name;                                   // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _item_count;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestRewardItemInfo) == 0x000008, "Wrong alignment on FQuestRewardItemInfo");
static_assert(sizeof(FQuestRewardItemInfo) == 0x000038, "Wrong size on FQuestRewardItemInfo");
static_assert(offsetof(FQuestRewardItemInfo, _item_code_name) == 0x000028, "Member 'FQuestRewardItemInfo::_item_code_name' has a wrong offset!");
static_assert(offsetof(FQuestRewardItemInfo, _item_count) == 0x000030, "Member 'FQuestRewardItemInfo::_item_count' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.QuestStepInfo
// 0x0110 (0x0138 - 0x0028)
struct FQuestStepInfo final : public FContentInfoBase
{
public:
	TArray<struct FGeneralCallBackEventInfo>      _task_list_array;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FGeneralConditionInfo>          _quest_fail_check_list_array;                      // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FGeneralCommandInfo>            _quest_fail_exec_list_array;                       // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FGeneralCommandInfo>            _dontcare_exec_list_array;                         // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FQuestRewardItemInfo>           _true_reward_item_array;                           // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FGeneralCommandInfo>            _true_result_list_array;                           // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FQuestRewardItemInfo>           _false_reward_item_array;                          // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FGeneralCommandInfo>            _false_result_list_array;                          // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FName                                   _code_name;                                        // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _step;                                             // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           _talker_Dialog;                                    // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FName>                           _teleportlist_on;                                  // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FName                                   _teleportlist_icon;                                // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _quest_fail_or;                                    // 0x00E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTaskResultCheckType                         _task_result_check;                                // 0x00E1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _task_result_check_data;                           // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _true_reward_human_point;                          // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELNextStepType                                _true_nextstep_type;                               // 0x00FC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _true_nextstep_data;                               // 0x0100(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _true_result_gemini;                               // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _false_reward_human_point;                         // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELNextStepType                                _false_nextstep_type;                              // 0x011C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _false_nextstep_data;                              // 0x0120(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _false_result_gemini;                              // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestStepInfo) == 0x000008, "Wrong alignment on FQuestStepInfo");
static_assert(sizeof(FQuestStepInfo) == 0x000138, "Wrong size on FQuestStepInfo");
static_assert(offsetof(FQuestStepInfo, _task_list_array) == 0x000028, "Member 'FQuestStepInfo::_task_list_array' has a wrong offset!");
static_assert(offsetof(FQuestStepInfo, _quest_fail_check_list_array) == 0x000038, "Member 'FQuestStepInfo::_quest_fail_check_list_array' has a wrong offset!");
static_assert(offsetof(FQuestStepInfo, _quest_fail_exec_list_array) == 0x000048, "Member 'FQuestStepInfo::_quest_fail_exec_list_array' has a wrong offset!");
static_assert(offsetof(FQuestStepInfo, _dontcare_exec_list_array) == 0x000058, "Member 'FQuestStepInfo::_dontcare_exec_list_array' has a wrong offset!");
static_assert(offsetof(FQuestStepInfo, _true_reward_item_array) == 0x000068, "Member 'FQuestStepInfo::_true_reward_item_array' has a wrong offset!");
static_assert(offsetof(FQuestStepInfo, _true_result_list_array) == 0x000078, "Member 'FQuestStepInfo::_true_result_list_array' has a wrong offset!");
static_assert(offsetof(FQuestStepInfo, _false_reward_item_array) == 0x000088, "Member 'FQuestStepInfo::_false_reward_item_array' has a wrong offset!");
static_assert(offsetof(FQuestStepInfo, _false_result_list_array) == 0x000098, "Member 'FQuestStepInfo::_false_result_list_array' has a wrong offset!");
static_assert(offsetof(FQuestStepInfo, _code_name) == 0x0000A8, "Member 'FQuestStepInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FQuestStepInfo, _step) == 0x0000B0, "Member 'FQuestStepInfo::_step' has a wrong offset!");
static_assert(offsetof(FQuestStepInfo, _talker_Dialog) == 0x0000B8, "Member 'FQuestStepInfo::_talker_Dialog' has a wrong offset!");
static_assert(offsetof(FQuestStepInfo, _teleportlist_on) == 0x0000C8, "Member 'FQuestStepInfo::_teleportlist_on' has a wrong offset!");
static_assert(offsetof(FQuestStepInfo, _teleportlist_icon) == 0x0000D8, "Member 'FQuestStepInfo::_teleportlist_icon' has a wrong offset!");
static_assert(offsetof(FQuestStepInfo, _quest_fail_or) == 0x0000E0, "Member 'FQuestStepInfo::_quest_fail_or' has a wrong offset!");
static_assert(offsetof(FQuestStepInfo, _task_result_check) == 0x0000E1, "Member 'FQuestStepInfo::_task_result_check' has a wrong offset!");
static_assert(offsetof(FQuestStepInfo, _task_result_check_data) == 0x0000E8, "Member 'FQuestStepInfo::_task_result_check_data' has a wrong offset!");
static_assert(offsetof(FQuestStepInfo, _true_reward_human_point) == 0x0000F8, "Member 'FQuestStepInfo::_true_reward_human_point' has a wrong offset!");
static_assert(offsetof(FQuestStepInfo, _true_nextstep_type) == 0x0000FC, "Member 'FQuestStepInfo::_true_nextstep_type' has a wrong offset!");
static_assert(offsetof(FQuestStepInfo, _true_nextstep_data) == 0x000100, "Member 'FQuestStepInfo::_true_nextstep_data' has a wrong offset!");
static_assert(offsetof(FQuestStepInfo, _true_result_gemini) == 0x000110, "Member 'FQuestStepInfo::_true_result_gemini' has a wrong offset!");
static_assert(offsetof(FQuestStepInfo, _false_reward_human_point) == 0x000118, "Member 'FQuestStepInfo::_false_reward_human_point' has a wrong offset!");
static_assert(offsetof(FQuestStepInfo, _false_nextstep_type) == 0x00011C, "Member 'FQuestStepInfo::_false_nextstep_type' has a wrong offset!");
static_assert(offsetof(FQuestStepInfo, _false_nextstep_data) == 0x000120, "Member 'FQuestStepInfo::_false_nextstep_data' has a wrong offset!");
static_assert(offsetof(FQuestStepInfo, _false_result_gemini) == 0x000130, "Member 'FQuestStepInfo::_false_result_gemini' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.LoadingTipInfo
// 0x0020 (0x0048 - 0x0028)
struct FLoadingTipInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _text_code_name;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _condition_quest;                                  // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELConditionLoadingType                        _condition_loading_type;                           // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _reset_condition_new_game_plus;                    // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLoadingTipInfo) == 0x000008, "Wrong alignment on FLoadingTipInfo");
static_assert(sizeof(FLoadingTipInfo) == 0x000048, "Wrong size on FLoadingTipInfo");
static_assert(offsetof(FLoadingTipInfo, _code_name) == 0x000028, "Member 'FLoadingTipInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FLoadingTipInfo, _text_code_name) == 0x000030, "Member 'FLoadingTipInfo::_text_code_name' has a wrong offset!");
static_assert(offsetof(FLoadingTipInfo, _condition_quest) == 0x000038, "Member 'FLoadingTipInfo::_condition_quest' has a wrong offset!");
static_assert(offsetof(FLoadingTipInfo, _condition_loading_type) == 0x000040, "Member 'FLoadingTipInfo::_condition_loading_type' has a wrong offset!");
static_assert(offsetof(FLoadingTipInfo, _reset_condition_new_game_plus) == 0x000041, "Member 'FLoadingTipInfo::_reset_condition_new_game_plus' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.TitleSetInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FTitleSetInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTitleSetInfoPtr) == 0x000008, "Wrong alignment on FTitleSetInfoPtr");
static_assert(sizeof(FTitleSetInfoPtr) == 0x000008, "Wrong size on FTitleSetInfoPtr");

// ScriptStruct ProjectPContentInfo.ItemWeaponMonster
// 0x00B0 (0x00D8 - 0x0028)
struct FItemWeaponMonster final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _weapon_bp_code_name;                              // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _add_skill_range_after_broken;                     // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _minimum_skill_range_min_after_broken;             // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _minimum_skill_range_max_after_broken;             // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _mulple_rate_atk_power_after_boken;                // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _mulple_rate_rigidity_after_boken;                 // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _mulple_rate_destruction_power_after_broken;       // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _durability;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _add_skill_hit_code_name;                          // 0x0054(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSwingPowerType                              _hit_fx_level;                                     // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPhysicalDamageType                          _physical_subtype_with_swing;                      // 0x005D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPhysicalDamageType                          _physical_subtype_with_thrust;                     // 0x005E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F[0x1];                                       // 0x005F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _guard_point;                                      // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_physicaldamage_reduction_ratio;             // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_firedamage_reduction_ratio;                 // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_electricdamage_reduction_ratio;             // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_aciddamage_reduction_ratio;                 // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_knockback_duration_reduction_ratio;         // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_knockback_distance_reduction_ratio;         // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_success_durability_reduction_ratio;         // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_durability_defence;                         // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _rigidity;                                         // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _tough_recovery_delay_time;                        // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _use_blunt_trail;                                  // 0x008C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _weapon_equip_motion_speed_rate;                   // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _weapon_equip_motion_speed_rate_after_broken;      // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _weapon_equip_skill_range_min_rate;                // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _weapon_equip_skill_range_max_rate;                // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _weapon_equip_atk_power_rate;                      // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _weapon_equip_abnormal_state_code_name;            // 0x00A4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _remove_abnormal_state_after_broken;               // 0x00AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _critical_rate;                                    // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _hide_at_spawn;                                    // 0x00B4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELElementDamageType                           _element_damage_type;                              // 0x00B5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B6[0x2];                                       // 0x00B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _skillhit_abnormal_state_override;                 // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _swing_sound_codename;                             // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _broken_swing_sound_codename;                      // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _NGP_Detail_index;                                 // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemWeaponMonster) == 0x000008, "Wrong alignment on FItemWeaponMonster");
static_assert(sizeof(FItemWeaponMonster) == 0x0000D8, "Wrong size on FItemWeaponMonster");
static_assert(offsetof(FItemWeaponMonster, _code_name) == 0x000028, "Member 'FItemWeaponMonster::_code_name' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _weapon_bp_code_name) == 0x000030, "Member 'FItemWeaponMonster::_weapon_bp_code_name' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _add_skill_range_after_broken) == 0x000038, "Member 'FItemWeaponMonster::_add_skill_range_after_broken' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _minimum_skill_range_min_after_broken) == 0x00003C, "Member 'FItemWeaponMonster::_minimum_skill_range_min_after_broken' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _minimum_skill_range_max_after_broken) == 0x000040, "Member 'FItemWeaponMonster::_minimum_skill_range_max_after_broken' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _mulple_rate_atk_power_after_boken) == 0x000044, "Member 'FItemWeaponMonster::_mulple_rate_atk_power_after_boken' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _mulple_rate_rigidity_after_boken) == 0x000048, "Member 'FItemWeaponMonster::_mulple_rate_rigidity_after_boken' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _mulple_rate_destruction_power_after_broken) == 0x00004C, "Member 'FItemWeaponMonster::_mulple_rate_destruction_power_after_broken' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _durability) == 0x000050, "Member 'FItemWeaponMonster::_durability' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _add_skill_hit_code_name) == 0x000054, "Member 'FItemWeaponMonster::_add_skill_hit_code_name' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _hit_fx_level) == 0x00005C, "Member 'FItemWeaponMonster::_hit_fx_level' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _physical_subtype_with_swing) == 0x00005D, "Member 'FItemWeaponMonster::_physical_subtype_with_swing' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _physical_subtype_with_thrust) == 0x00005E, "Member 'FItemWeaponMonster::_physical_subtype_with_thrust' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _guard_point) == 0x000060, "Member 'FItemWeaponMonster::_guard_point' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _guard_physicaldamage_reduction_ratio) == 0x000064, "Member 'FItemWeaponMonster::_guard_physicaldamage_reduction_ratio' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _guard_firedamage_reduction_ratio) == 0x000068, "Member 'FItemWeaponMonster::_guard_firedamage_reduction_ratio' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _guard_electricdamage_reduction_ratio) == 0x00006C, "Member 'FItemWeaponMonster::_guard_electricdamage_reduction_ratio' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _guard_aciddamage_reduction_ratio) == 0x000070, "Member 'FItemWeaponMonster::_guard_aciddamage_reduction_ratio' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _guard_knockback_duration_reduction_ratio) == 0x000074, "Member 'FItemWeaponMonster::_guard_knockback_duration_reduction_ratio' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _guard_knockback_distance_reduction_ratio) == 0x000078, "Member 'FItemWeaponMonster::_guard_knockback_distance_reduction_ratio' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _guard_success_durability_reduction_ratio) == 0x00007C, "Member 'FItemWeaponMonster::_guard_success_durability_reduction_ratio' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _guard_durability_defence) == 0x000080, "Member 'FItemWeaponMonster::_guard_durability_defence' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _rigidity) == 0x000084, "Member 'FItemWeaponMonster::_rigidity' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _tough_recovery_delay_time) == 0x000088, "Member 'FItemWeaponMonster::_tough_recovery_delay_time' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _use_blunt_trail) == 0x00008C, "Member 'FItemWeaponMonster::_use_blunt_trail' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _weapon_equip_motion_speed_rate) == 0x000090, "Member 'FItemWeaponMonster::_weapon_equip_motion_speed_rate' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _weapon_equip_motion_speed_rate_after_broken) == 0x000094, "Member 'FItemWeaponMonster::_weapon_equip_motion_speed_rate_after_broken' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _weapon_equip_skill_range_min_rate) == 0x000098, "Member 'FItemWeaponMonster::_weapon_equip_skill_range_min_rate' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _weapon_equip_skill_range_max_rate) == 0x00009C, "Member 'FItemWeaponMonster::_weapon_equip_skill_range_max_rate' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _weapon_equip_atk_power_rate) == 0x0000A0, "Member 'FItemWeaponMonster::_weapon_equip_atk_power_rate' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _weapon_equip_abnormal_state_code_name) == 0x0000A4, "Member 'FItemWeaponMonster::_weapon_equip_abnormal_state_code_name' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _remove_abnormal_state_after_broken) == 0x0000AC, "Member 'FItemWeaponMonster::_remove_abnormal_state_after_broken' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _critical_rate) == 0x0000B0, "Member 'FItemWeaponMonster::_critical_rate' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _hide_at_spawn) == 0x0000B4, "Member 'FItemWeaponMonster::_hide_at_spawn' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _element_damage_type) == 0x0000B5, "Member 'FItemWeaponMonster::_element_damage_type' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _skillhit_abnormal_state_override) == 0x0000B8, "Member 'FItemWeaponMonster::_skillhit_abnormal_state_override' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _swing_sound_codename) == 0x0000C0, "Member 'FItemWeaponMonster::_swing_sound_codename' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _broken_swing_sound_codename) == 0x0000C8, "Member 'FItemWeaponMonster::_broken_swing_sound_codename' has a wrong offset!");
static_assert(offsetof(FItemWeaponMonster, _NGP_Detail_index) == 0x0000D0, "Member 'FItemWeaponMonster::_NGP_Detail_index' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.AbnormalStateReplaceEffectInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FAbnormalStateReplaceEffectInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbnormalStateReplaceEffectInfoPtr) == 0x000008, "Wrong alignment on FAbnormalStateReplaceEffectInfoPtr");
static_assert(sizeof(FAbnormalStateReplaceEffectInfoPtr) == 0x000008, "Wrong size on FAbnormalStateReplaceEffectInfoPtr");

// ScriptStruct ProjectPContentInfo.AbnormalStateExecInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FAbnormalStateExecInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbnormalStateExecInfoPtr) == 0x000008, "Wrong alignment on FAbnormalStateExecInfoPtr");
static_assert(sizeof(FAbnormalStateExecInfoPtr) == 0x000008, "Wrong size on FAbnormalStateExecInfoPtr");

// ScriptStruct ProjectPContentInfo.AbnormalStateChainInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FAbnormalStateChainInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbnormalStateChainInfoPtr) == 0x000008, "Wrong alignment on FAbnormalStateChainInfoPtr");
static_assert(sizeof(FAbnormalStateChainInfoPtr) == 0x000008, "Wrong size on FAbnormalStateChainInfoPtr");

// ScriptStruct ProjectPContentInfo.SubLevelOnOffInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSubLevelOnOffInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSubLevelOnOffInfoPtr) == 0x000008, "Wrong alignment on FSubLevelOnOffInfoPtr");
static_assert(sizeof(FSubLevelOnOffInfoPtr) == 0x000008, "Wrong size on FSubLevelOnOffInfoPtr");

// ScriptStruct ProjectPContentInfo.AbnormalStateAttackInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FAbnormalStateAttackInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbnormalStateAttackInfoPtr) == 0x000008, "Wrong alignment on FAbnormalStateAttackInfoPtr");
static_assert(sizeof(FAbnormalStateAttackInfoPtr) == 0x000008, "Wrong size on FAbnormalStateAttackInfoPtr");

// ScriptStruct ProjectPContentInfo.AbnormalStateDamageHealInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FAbnormalStateDamageHealInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbnormalStateDamageHealInfoPtr) == 0x000008, "Wrong alignment on FAbnormalStateDamageHealInfoPtr");
static_assert(sizeof(FAbnormalStateDamageHealInfoPtr) == 0x000008, "Wrong size on FAbnormalStateDamageHealInfoPtr");

// ScriptStruct ProjectPContentInfo.AbnormalStateCommonInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FAbnormalStateCommonInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbnormalStateCommonInfoPtr) == 0x000008, "Wrong alignment on FAbnormalStateCommonInfoPtr");
static_assert(sizeof(FAbnormalStateCommonInfoPtr) == 0x000008, "Wrong size on FAbnormalStateCommonInfoPtr");

// ScriptStruct ProjectPContentInfo.AchievementListInfo
// 0x0080 (0x00A8 - 0x0028)
struct FAchievementListInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _platform_key;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_achieve_name;                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_achieve_details;                       // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_achieve_name_cn;                       // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_achieve_details_cn;                    // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _image_resource;                                   // 0x0070(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAchieveGradeType                            _achieve_grade;                                    // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _gamer_score;                                      // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _delay_time;                                       // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _activity_index;                                   // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAchievementListInfo) == 0x000008, "Wrong alignment on FAchievementListInfo");
static_assert(sizeof(FAchievementListInfo) == 0x0000A8, "Wrong size on FAchievementListInfo");
static_assert(offsetof(FAchievementListInfo, _code_name) == 0x000028, "Member 'FAchievementListInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FAchievementListInfo, _platform_key) == 0x000030, "Member 'FAchievementListInfo::_platform_key' has a wrong offset!");
static_assert(offsetof(FAchievementListInfo, _local_text_achieve_name) == 0x000040, "Member 'FAchievementListInfo::_local_text_achieve_name' has a wrong offset!");
static_assert(offsetof(FAchievementListInfo, _local_text_achieve_details) == 0x000050, "Member 'FAchievementListInfo::_local_text_achieve_details' has a wrong offset!");
static_assert(offsetof(FAchievementListInfo, _local_text_achieve_name_cn) == 0x000060, "Member 'FAchievementListInfo::_local_text_achieve_name_cn' has a wrong offset!");
static_assert(offsetof(FAchievementListInfo, _local_text_achieve_details_cn) == 0x000068, "Member 'FAchievementListInfo::_local_text_achieve_details_cn' has a wrong offset!");
static_assert(offsetof(FAchievementListInfo, _image_resource) == 0x000070, "Member 'FAchievementListInfo::_image_resource' has a wrong offset!");
static_assert(offsetof(FAchievementListInfo, _achieve_grade) == 0x000098, "Member 'FAchievementListInfo::_achieve_grade' has a wrong offset!");
static_assert(offsetof(FAchievementListInfo, _gamer_score) == 0x00009C, "Member 'FAchievementListInfo::_gamer_score' has a wrong offset!");
static_assert(offsetof(FAchievementListInfo, _delay_time) == 0x0000A0, "Member 'FAchievementListInfo::_delay_time' has a wrong offset!");
static_assert(offsetof(FAchievementListInfo, _activity_index) == 0x0000A4, "Member 'FAchievementListInfo::_activity_index' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.AchievementInfoDB
// 0x0088 (0x00B0 - 0x0028)
struct FAchievementInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAchievementListInfo>           _AchievementListInfo_array;                        // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FAchievementDetailInfo>         _AchievementDetailInfo_array;                      // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAchievementInfoDB) == 0x000008, "Wrong alignment on FAchievementInfoDB");
static_assert(sizeof(FAchievementInfoDB) == 0x0000B0, "Wrong size on FAchievementInfoDB");
static_assert(offsetof(FAchievementInfoDB, _AchievementListInfo_array) == 0x000078, "Member 'FAchievementInfoDB::_AchievementListInfo_array' has a wrong offset!");
static_assert(offsetof(FAchievementInfoDB, _AchievementDetailInfo_array) == 0x000088, "Member 'FAchievementInfoDB::_AchievementDetailInfo_array' has a wrong offset!");
static_assert(offsetof(FAchievementInfoDB, _version) == 0x000098, "Member 'FAchievementInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FAchievementInfoDB, _comment) == 0x0000A0, "Member 'FAchievementInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ShopSpecialInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FShopSpecialInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShopSpecialInfoPtr) == 0x000008, "Wrong alignment on FShopSpecialInfoPtr");
static_assert(sizeof(FShopSpecialInfoPtr) == 0x000008, "Wrong size on FShopSpecialInfoPtr");

// ScriptStruct ProjectPContentInfo.MomentConditionInfo
// 0x0040 (0x0068 - 0x0028)
struct FMomentConditionInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELMomentType                                  _moment_type;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _use_skill_code_name;                              // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELActionCategory                              _use_skill_action_category;                        // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _skill_hit_condition_group_1;                      // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _skill_hit_condition_group_2;                      // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _skill_hit_condition_group_3;                      // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _skill_hit_condition_group_4;                      // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_back;                                          // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_groggy_enable;                                 // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _hit_groggy;                                       // 0x0052(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_groggy;                                        // 0x0053(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_sub_swing;                                     // 0x0054(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_sub_thrust;                                    // 0x0055(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENPCGradeType                                 _grade;                                            // 0x0056(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFactionType                                  _faction;                                          // 0x0057(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _npc_code_name;                                    // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELNPCType                                     _npc_kind;                                         // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMomentConditionInfo) == 0x000008, "Wrong alignment on FMomentConditionInfo");
static_assert(sizeof(FMomentConditionInfo) == 0x000068, "Wrong size on FMomentConditionInfo");
static_assert(offsetof(FMomentConditionInfo, _code_name) == 0x000028, "Member 'FMomentConditionInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FMomentConditionInfo, _moment_type) == 0x000030, "Member 'FMomentConditionInfo::_moment_type' has a wrong offset!");
static_assert(offsetof(FMomentConditionInfo, _use_skill_code_name) == 0x000034, "Member 'FMomentConditionInfo::_use_skill_code_name' has a wrong offset!");
static_assert(offsetof(FMomentConditionInfo, _use_skill_action_category) == 0x00003C, "Member 'FMomentConditionInfo::_use_skill_action_category' has a wrong offset!");
static_assert(offsetof(FMomentConditionInfo, _skill_hit_condition_group_1) == 0x000040, "Member 'FMomentConditionInfo::_skill_hit_condition_group_1' has a wrong offset!");
static_assert(offsetof(FMomentConditionInfo, _skill_hit_condition_group_2) == 0x000044, "Member 'FMomentConditionInfo::_skill_hit_condition_group_2' has a wrong offset!");
static_assert(offsetof(FMomentConditionInfo, _skill_hit_condition_group_3) == 0x000048, "Member 'FMomentConditionInfo::_skill_hit_condition_group_3' has a wrong offset!");
static_assert(offsetof(FMomentConditionInfo, _skill_hit_condition_group_4) == 0x00004C, "Member 'FMomentConditionInfo::_skill_hit_condition_group_4' has a wrong offset!");
static_assert(offsetof(FMomentConditionInfo, _is_back) == 0x000050, "Member 'FMomentConditionInfo::_is_back' has a wrong offset!");
static_assert(offsetof(FMomentConditionInfo, _is_groggy_enable) == 0x000051, "Member 'FMomentConditionInfo::_is_groggy_enable' has a wrong offset!");
static_assert(offsetof(FMomentConditionInfo, _hit_groggy) == 0x000052, "Member 'FMomentConditionInfo::_hit_groggy' has a wrong offset!");
static_assert(offsetof(FMomentConditionInfo, _is_groggy) == 0x000053, "Member 'FMomentConditionInfo::_is_groggy' has a wrong offset!");
static_assert(offsetof(FMomentConditionInfo, _is_sub_swing) == 0x000054, "Member 'FMomentConditionInfo::_is_sub_swing' has a wrong offset!");
static_assert(offsetof(FMomentConditionInfo, _is_sub_thrust) == 0x000055, "Member 'FMomentConditionInfo::_is_sub_thrust' has a wrong offset!");
static_assert(offsetof(FMomentConditionInfo, _grade) == 0x000056, "Member 'FMomentConditionInfo::_grade' has a wrong offset!");
static_assert(offsetof(FMomentConditionInfo, _faction) == 0x000057, "Member 'FMomentConditionInfo::_faction' has a wrong offset!");
static_assert(offsetof(FMomentConditionInfo, _npc_code_name) == 0x000058, "Member 'FMomentConditionInfo::_npc_code_name' has a wrong offset!");
static_assert(offsetof(FMomentConditionInfo, _npc_kind) == 0x000060, "Member 'FMomentConditionInfo::_npc_kind' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ActionClassInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FActionClassInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActionClassInfo>               _ActionClass_array;                                // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionClassInfoDB) == 0x000008, "Wrong alignment on FActionClassInfoDB");
static_assert(sizeof(FActionClassInfoDB) == 0x0000A0, "Wrong size on FActionClassInfoDB");
static_assert(offsetof(FActionClassInfoDB, _ActionClass_array) == 0x000078, "Member 'FActionClassInfoDB::_ActionClass_array' has a wrong offset!");
static_assert(offsetof(FActionClassInfoDB, _version) == 0x000088, "Member 'FActionClassInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FActionClassInfoDB, _comment) == 0x000090, "Member 'FActionClassInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ActionClassInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FActionClassInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActionClassInfoPtr) == 0x000008, "Wrong alignment on FActionClassInfoPtr");
static_assert(sizeof(FActionClassInfoPtr) == 0x000008, "Wrong size on FActionClassInfoPtr");

// ScriptStruct ProjectPContentInfo.ActionPathInfo
// 0x0018 (0x0040 - 0x0028)
struct FActionPathInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _path;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionPathInfo) == 0x000008, "Wrong alignment on FActionPathInfo");
static_assert(sizeof(FActionPathInfo) == 0x000040, "Wrong size on FActionPathInfo");
static_assert(offsetof(FActionPathInfo, _code_name) == 0x000028, "Member 'FActionPathInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FActionPathInfo, _path) == 0x000030, "Member 'FActionPathInfo::_path' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ActionPathInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FActionPathInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActionPathInfo>                _ActionPath_array;                                 // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionPathInfoDB) == 0x000008, "Wrong alignment on FActionPathInfoDB");
static_assert(sizeof(FActionPathInfoDB) == 0x0000A0, "Wrong size on FActionPathInfoDB");
static_assert(offsetof(FActionPathInfoDB, _ActionPath_array) == 0x000078, "Member 'FActionPathInfoDB::_ActionPath_array' has a wrong offset!");
static_assert(offsetof(FActionPathInfoDB, _version) == 0x000088, "Member 'FActionPathInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FActionPathInfoDB, _comment) == 0x000090, "Member 'FActionPathInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ActionPathInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FActionPathInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActionPathInfoPtr) == 0x000008, "Wrong alignment on FActionPathInfoPtr");
static_assert(sizeof(FActionPathInfoPtr) == 0x000008, "Wrong size on FActionPathInfoPtr");

// ScriptStruct ProjectPContentInfo.WeatherInfo
// 0x0030 (0x0058 - 0x0028)
struct FWeatherInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELLightScenarioType                           _light_scenario_type;                              // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _change_time;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELWorldZoneType                               _world_zone_type;                                  // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTimeZoneType                                _time_zone_type;                                   // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELWeatherType                                 _weather_type;                                     // 0x003A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _local_text_name;                                  // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_name_cn;                               // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeatherInfo) == 0x000008, "Wrong alignment on FWeatherInfo");
static_assert(sizeof(FWeatherInfo) == 0x000058, "Wrong size on FWeatherInfo");
static_assert(offsetof(FWeatherInfo, _code_name) == 0x000028, "Member 'FWeatherInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FWeatherInfo, _light_scenario_type) == 0x000030, "Member 'FWeatherInfo::_light_scenario_type' has a wrong offset!");
static_assert(offsetof(FWeatherInfo, _change_time) == 0x000034, "Member 'FWeatherInfo::_change_time' has a wrong offset!");
static_assert(offsetof(FWeatherInfo, _world_zone_type) == 0x000038, "Member 'FWeatherInfo::_world_zone_type' has a wrong offset!");
static_assert(offsetof(FWeatherInfo, _time_zone_type) == 0x000039, "Member 'FWeatherInfo::_time_zone_type' has a wrong offset!");
static_assert(offsetof(FWeatherInfo, _weather_type) == 0x00003A, "Member 'FWeatherInfo::_weather_type' has a wrong offset!");
static_assert(offsetof(FWeatherInfo, _local_text_name) == 0x000040, "Member 'FWeatherInfo::_local_text_name' has a wrong offset!");
static_assert(offsetof(FWeatherInfo, _local_text_name_cn) == 0x000050, "Member 'FWeatherInfo::_local_text_name_cn' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.Action_PathInfo
// 0x0038 (0x0060 - 0x0028)
struct FAction_PathInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   _action_class;                                     // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELActionCategory                              _system_category;                                  // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAction_PathInfo) == 0x000008, "Wrong alignment on FAction_PathInfo");
static_assert(sizeof(FAction_PathInfo) == 0x000060, "Wrong size on FAction_PathInfo");
static_assert(offsetof(FAction_PathInfo, _code_name) == 0x000028, "Member 'FAction_PathInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FAction_PathInfo, _action_class) == 0x000030, "Member 'FAction_PathInfo::_action_class' has a wrong offset!");
static_assert(offsetof(FAction_PathInfo, _system_category) == 0x000058, "Member 'FAction_PathInfo::_system_category' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.Action_PathInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FAction_PathInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAction_PathInfo>               _Action_Path_array;                                // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAction_PathInfoDB) == 0x000008, "Wrong alignment on FAction_PathInfoDB");
static_assert(sizeof(FAction_PathInfoDB) == 0x0000A0, "Wrong size on FAction_PathInfoDB");
static_assert(offsetof(FAction_PathInfoDB, _Action_Path_array) == 0x000078, "Member 'FAction_PathInfoDB::_Action_Path_array' has a wrong offset!");
static_assert(offsetof(FAction_PathInfoDB, _version) == 0x000088, "Member 'FAction_PathInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FAction_PathInfoDB, _comment) == 0x000090, "Member 'FAction_PathInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.Action_PathInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FAction_PathInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAction_PathInfoPtr) == 0x000008, "Wrong alignment on FAction_PathInfoPtr");
static_assert(sizeof(FAction_PathInfoPtr) == 0x000008, "Wrong size on FAction_PathInfoPtr");

// ScriptStruct ProjectPContentInfo.ItemRedundancyExchangeInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FItemRedundancyExchangeInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemRedundancyExchangeInfoPtr) == 0x000008, "Wrong alignment on FItemRedundancyExchangeInfoPtr");
static_assert(sizeof(FItemRedundancyExchangeInfoPtr) == 0x000008, "Wrong size on FItemRedundancyExchangeInfoPtr");

// ScriptStruct ProjectPContentInfo.ComboInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FComboInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FComboInfoPtr) == 0x000008, "Wrong alignment on FComboInfoPtr");
static_assert(sizeof(FComboInfoPtr) == 0x000008, "Wrong size on FComboInfoPtr");

// ScriptStruct ProjectPContentInfo.NPCSkillLinkInfo
// 0x0068 (0x0090 - 0x0028)
struct FNPCSkillLinkInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _condition_percent;                                // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _percent_value;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _condition_range;                                  // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAIRangeCheckType                            _skillrange_checktype;                             // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _skill_dist_min;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _skill_dist_max;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _skill_range_angle_start;                          // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _skill_range_angle_end;                            // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _skill_dist_height;                                // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _condition_hit_target;                             // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _hit_target_action_event_alias;                    // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _use_skill_id;                                     // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _condition_defence_skill;                          // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _condition_part_needed;                            // 0x0074(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _condition_be_hit;                                 // 0x007C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPhysicalDamageType                          _be_hit_by_physical_damage_type;                   // 0x007D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELElementDamageType                           _be_hit_by_element_damage_type;                    // 0x007E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7F[0x1];                                       // 0x007F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _priority;                                         // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAIDamageType                                _hit_damage_type;                                  // 0x0084(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _link_skill_use_cooltime;                          // 0x0085(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _condition_cooltime;                               // 0x0086(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _condition_collide_ceiling;                        // 0x0087(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _collide_ceiling_height;                           // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNPCSkillLinkInfo) == 0x000008, "Wrong alignment on FNPCSkillLinkInfo");
static_assert(sizeof(FNPCSkillLinkInfo) == 0x000090, "Wrong size on FNPCSkillLinkInfo");
static_assert(offsetof(FNPCSkillLinkInfo, _code_name) == 0x000028, "Member 'FNPCSkillLinkInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FNPCSkillLinkInfo, _condition_percent) == 0x000030, "Member 'FNPCSkillLinkInfo::_condition_percent' has a wrong offset!");
static_assert(offsetof(FNPCSkillLinkInfo, _percent_value) == 0x000034, "Member 'FNPCSkillLinkInfo::_percent_value' has a wrong offset!");
static_assert(offsetof(FNPCSkillLinkInfo, _condition_range) == 0x000038, "Member 'FNPCSkillLinkInfo::_condition_range' has a wrong offset!");
static_assert(offsetof(FNPCSkillLinkInfo, _skillrange_checktype) == 0x000039, "Member 'FNPCSkillLinkInfo::_skillrange_checktype' has a wrong offset!");
static_assert(offsetof(FNPCSkillLinkInfo, _skill_dist_min) == 0x00003C, "Member 'FNPCSkillLinkInfo::_skill_dist_min' has a wrong offset!");
static_assert(offsetof(FNPCSkillLinkInfo, _skill_dist_max) == 0x000040, "Member 'FNPCSkillLinkInfo::_skill_dist_max' has a wrong offset!");
static_assert(offsetof(FNPCSkillLinkInfo, _skill_range_angle_start) == 0x000044, "Member 'FNPCSkillLinkInfo::_skill_range_angle_start' has a wrong offset!");
static_assert(offsetof(FNPCSkillLinkInfo, _skill_range_angle_end) == 0x000048, "Member 'FNPCSkillLinkInfo::_skill_range_angle_end' has a wrong offset!");
static_assert(offsetof(FNPCSkillLinkInfo, _skill_dist_height) == 0x00004C, "Member 'FNPCSkillLinkInfo::_skill_dist_height' has a wrong offset!");
static_assert(offsetof(FNPCSkillLinkInfo, _condition_hit_target) == 0x000050, "Member 'FNPCSkillLinkInfo::_condition_hit_target' has a wrong offset!");
static_assert(offsetof(FNPCSkillLinkInfo, _hit_target_action_event_alias) == 0x000058, "Member 'FNPCSkillLinkInfo::_hit_target_action_event_alias' has a wrong offset!");
static_assert(offsetof(FNPCSkillLinkInfo, _use_skill_id) == 0x000068, "Member 'FNPCSkillLinkInfo::_use_skill_id' has a wrong offset!");
static_assert(offsetof(FNPCSkillLinkInfo, _condition_defence_skill) == 0x000070, "Member 'FNPCSkillLinkInfo::_condition_defence_skill' has a wrong offset!");
static_assert(offsetof(FNPCSkillLinkInfo, _condition_part_needed) == 0x000074, "Member 'FNPCSkillLinkInfo::_condition_part_needed' has a wrong offset!");
static_assert(offsetof(FNPCSkillLinkInfo, _condition_be_hit) == 0x00007C, "Member 'FNPCSkillLinkInfo::_condition_be_hit' has a wrong offset!");
static_assert(offsetof(FNPCSkillLinkInfo, _be_hit_by_physical_damage_type) == 0x00007D, "Member 'FNPCSkillLinkInfo::_be_hit_by_physical_damage_type' has a wrong offset!");
static_assert(offsetof(FNPCSkillLinkInfo, _be_hit_by_element_damage_type) == 0x00007E, "Member 'FNPCSkillLinkInfo::_be_hit_by_element_damage_type' has a wrong offset!");
static_assert(offsetof(FNPCSkillLinkInfo, _priority) == 0x000080, "Member 'FNPCSkillLinkInfo::_priority' has a wrong offset!");
static_assert(offsetof(FNPCSkillLinkInfo, _hit_damage_type) == 0x000084, "Member 'FNPCSkillLinkInfo::_hit_damage_type' has a wrong offset!");
static_assert(offsetof(FNPCSkillLinkInfo, _link_skill_use_cooltime) == 0x000085, "Member 'FNPCSkillLinkInfo::_link_skill_use_cooltime' has a wrong offset!");
static_assert(offsetof(FNPCSkillLinkInfo, _condition_cooltime) == 0x000086, "Member 'FNPCSkillLinkInfo::_condition_cooltime' has a wrong offset!");
static_assert(offsetof(FNPCSkillLinkInfo, _condition_collide_ceiling) == 0x000087, "Member 'FNPCSkillLinkInfo::_condition_collide_ceiling' has a wrong offset!");
static_assert(offsetof(FNPCSkillLinkInfo, _collide_ceiling_height) == 0x000088, "Member 'FNPCSkillLinkInfo::_collide_ceiling_height' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ComboTypeInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FComboTypeInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FComboTypeInfoPtr) == 0x000008, "Wrong alignment on FComboTypeInfoPtr");
static_assert(sizeof(FComboTypeInfoPtr) == 0x000008, "Wrong size on FComboTypeInfoPtr");

// ScriptStruct ProjectPContentInfo.ProjectileInfo
// 0x0188 (0x01B0 - 0x0028)
struct FProjectileInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELProjectileType                              _projectile_type;                                  // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   _projectile_class;                                 // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   _projectile_design_class;                          // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELProjectileHitFactionType                    _hit_faction;                                      // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELProjectileGenerateType                      _generate_loc_type;                                // 0x0089(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _spawn_socket_name;                                // 0x008C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _use_socket_direction;                             // 0x0094(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _spawn_offset_x;                                   // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _spawn_offset_y;                                   // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _spawn_offset_z;                                   // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _spawn_on_ground;                                  // 0x00A4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _move_start_time;                                  // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELProjectileMoveTargetType                    _move_type;                                        // 0x00AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _target_socket_name;                               // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _target_offset_x;                                  // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _target_offset_y;                                  // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _target_offset_z;                                  // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ignore_camera_pitch_when_moving_forward;          // 0x00C4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _move_z_degree;                                    // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _move_xy_degree;                                   // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _pitch_limit;                                      // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _yaw_limit;                                        // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _init_speed;                                       // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _mid_speed;                                        // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fin_speed;                                        // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _mid_speed_time;                                   // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fin_speed_time;                                   // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _speed;                                            // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _collision_start_delay;                            // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _homing_acceleration_magnitude;                    // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _trace_target_socket;                              // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _trace_start_time;                                 // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _trace_start_distance;                             // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _trace_start_angle;                                // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _trace_start_halfheight;                           // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _trace_end_distance;                               // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _trace_end_angle;                                  // 0x0114(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _trace_end_halfheight;                             // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _trace_ing_init_speed;                             // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _trace_ing_mid_speed;                              // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _trace_ing_fin_speed;                              // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _trace_ing_init_speed_time;                        // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _trace_ing_mid_speed_time;                         // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _trace_ing_fin_speed_time;                         // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _trace_end_init_speed;                             // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _trace_end_mid_speed;                              // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _trace_end_fin_speed;                              // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _trace_end_init_speed_time;                        // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _trace_end_mid_speed_time;                         // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _trace_end_fin_speed_time;                         // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _consume_stamina_point;                            // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _consume_slave_magazine_point;                     // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_attack;                                  // 0x0154(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPhysicalDamageType                          _physical_attack_subtype;                          // 0x0158(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _fire_attack;                                      // 0x015C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _electric_attack;                                  // 0x0160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _acid_attack;                                      // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _destruction_power;                                // 0x0168(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _abnormal_state_codename;                          // 0x016C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _abnormal_state_build_up_attack;                   // 0x0174(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _tough_recovery_delay_time;                        // 0x0178(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _pulse_recharge_attack;                            // 0x017C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _correction_code_name_for_motivity;                // 0x0180(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _correction_code_name_for_advance;                 // 0x0188(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _correction_code_name_for_technique;               // 0x0190(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _additional_groggy_time;                           // 0x0198(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _abnormalState_penalty_base;                       // 0x019C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _build_up_recover_inc_base;                        // 0x01A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _force_fire_forward_distance;                      // 0x01A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _NGP_Detail_index;                                 // 0x01A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProjectileInfo) == 0x000008, "Wrong alignment on FProjectileInfo");
static_assert(sizeof(FProjectileInfo) == 0x0001B0, "Wrong size on FProjectileInfo");
static_assert(offsetof(FProjectileInfo, _code_name) == 0x000028, "Member 'FProjectileInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _projectile_type) == 0x000030, "Member 'FProjectileInfo::_projectile_type' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _projectile_class) == 0x000038, "Member 'FProjectileInfo::_projectile_class' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _projectile_design_class) == 0x000060, "Member 'FProjectileInfo::_projectile_design_class' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _hit_faction) == 0x000088, "Member 'FProjectileInfo::_hit_faction' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _generate_loc_type) == 0x000089, "Member 'FProjectileInfo::_generate_loc_type' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _spawn_socket_name) == 0x00008C, "Member 'FProjectileInfo::_spawn_socket_name' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _use_socket_direction) == 0x000094, "Member 'FProjectileInfo::_use_socket_direction' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _spawn_offset_x) == 0x000098, "Member 'FProjectileInfo::_spawn_offset_x' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _spawn_offset_y) == 0x00009C, "Member 'FProjectileInfo::_spawn_offset_y' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _spawn_offset_z) == 0x0000A0, "Member 'FProjectileInfo::_spawn_offset_z' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _spawn_on_ground) == 0x0000A4, "Member 'FProjectileInfo::_spawn_on_ground' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _move_start_time) == 0x0000A8, "Member 'FProjectileInfo::_move_start_time' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _move_type) == 0x0000AC, "Member 'FProjectileInfo::_move_type' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _target_socket_name) == 0x0000B0, "Member 'FProjectileInfo::_target_socket_name' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _target_offset_x) == 0x0000B8, "Member 'FProjectileInfo::_target_offset_x' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _target_offset_y) == 0x0000BC, "Member 'FProjectileInfo::_target_offset_y' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _target_offset_z) == 0x0000C0, "Member 'FProjectileInfo::_target_offset_z' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _ignore_camera_pitch_when_moving_forward) == 0x0000C4, "Member 'FProjectileInfo::_ignore_camera_pitch_when_moving_forward' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _move_z_degree) == 0x0000C8, "Member 'FProjectileInfo::_move_z_degree' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _move_xy_degree) == 0x0000CC, "Member 'FProjectileInfo::_move_xy_degree' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _pitch_limit) == 0x0000D0, "Member 'FProjectileInfo::_pitch_limit' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _yaw_limit) == 0x0000D4, "Member 'FProjectileInfo::_yaw_limit' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _init_speed) == 0x0000D8, "Member 'FProjectileInfo::_init_speed' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _mid_speed) == 0x0000DC, "Member 'FProjectileInfo::_mid_speed' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _fin_speed) == 0x0000E0, "Member 'FProjectileInfo::_fin_speed' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _mid_speed_time) == 0x0000E4, "Member 'FProjectileInfo::_mid_speed_time' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _fin_speed_time) == 0x0000E8, "Member 'FProjectileInfo::_fin_speed_time' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _speed) == 0x0000EC, "Member 'FProjectileInfo::_speed' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _collision_start_delay) == 0x0000F0, "Member 'FProjectileInfo::_collision_start_delay' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _homing_acceleration_magnitude) == 0x0000F4, "Member 'FProjectileInfo::_homing_acceleration_magnitude' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _trace_target_socket) == 0x0000F8, "Member 'FProjectileInfo::_trace_target_socket' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _trace_start_time) == 0x000100, "Member 'FProjectileInfo::_trace_start_time' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _trace_start_distance) == 0x000104, "Member 'FProjectileInfo::_trace_start_distance' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _trace_start_angle) == 0x000108, "Member 'FProjectileInfo::_trace_start_angle' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _trace_start_halfheight) == 0x00010C, "Member 'FProjectileInfo::_trace_start_halfheight' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _trace_end_distance) == 0x000110, "Member 'FProjectileInfo::_trace_end_distance' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _trace_end_angle) == 0x000114, "Member 'FProjectileInfo::_trace_end_angle' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _trace_end_halfheight) == 0x000118, "Member 'FProjectileInfo::_trace_end_halfheight' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _trace_ing_init_speed) == 0x00011C, "Member 'FProjectileInfo::_trace_ing_init_speed' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _trace_ing_mid_speed) == 0x000120, "Member 'FProjectileInfo::_trace_ing_mid_speed' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _trace_ing_fin_speed) == 0x000124, "Member 'FProjectileInfo::_trace_ing_fin_speed' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _trace_ing_init_speed_time) == 0x000128, "Member 'FProjectileInfo::_trace_ing_init_speed_time' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _trace_ing_mid_speed_time) == 0x00012C, "Member 'FProjectileInfo::_trace_ing_mid_speed_time' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _trace_ing_fin_speed_time) == 0x000130, "Member 'FProjectileInfo::_trace_ing_fin_speed_time' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _trace_end_init_speed) == 0x000134, "Member 'FProjectileInfo::_trace_end_init_speed' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _trace_end_mid_speed) == 0x000138, "Member 'FProjectileInfo::_trace_end_mid_speed' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _trace_end_fin_speed) == 0x00013C, "Member 'FProjectileInfo::_trace_end_fin_speed' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _trace_end_init_speed_time) == 0x000140, "Member 'FProjectileInfo::_trace_end_init_speed_time' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _trace_end_mid_speed_time) == 0x000144, "Member 'FProjectileInfo::_trace_end_mid_speed_time' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _trace_end_fin_speed_time) == 0x000148, "Member 'FProjectileInfo::_trace_end_fin_speed_time' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _consume_stamina_point) == 0x00014C, "Member 'FProjectileInfo::_consume_stamina_point' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _consume_slave_magazine_point) == 0x000150, "Member 'FProjectileInfo::_consume_slave_magazine_point' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _physical_attack) == 0x000154, "Member 'FProjectileInfo::_physical_attack' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _physical_attack_subtype) == 0x000158, "Member 'FProjectileInfo::_physical_attack_subtype' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _fire_attack) == 0x00015C, "Member 'FProjectileInfo::_fire_attack' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _electric_attack) == 0x000160, "Member 'FProjectileInfo::_electric_attack' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _acid_attack) == 0x000164, "Member 'FProjectileInfo::_acid_attack' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _destruction_power) == 0x000168, "Member 'FProjectileInfo::_destruction_power' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _abnormal_state_codename) == 0x00016C, "Member 'FProjectileInfo::_abnormal_state_codename' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _abnormal_state_build_up_attack) == 0x000174, "Member 'FProjectileInfo::_abnormal_state_build_up_attack' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _tough_recovery_delay_time) == 0x000178, "Member 'FProjectileInfo::_tough_recovery_delay_time' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _pulse_recharge_attack) == 0x00017C, "Member 'FProjectileInfo::_pulse_recharge_attack' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _correction_code_name_for_motivity) == 0x000180, "Member 'FProjectileInfo::_correction_code_name_for_motivity' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _correction_code_name_for_advance) == 0x000188, "Member 'FProjectileInfo::_correction_code_name_for_advance' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _correction_code_name_for_technique) == 0x000190, "Member 'FProjectileInfo::_correction_code_name_for_technique' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _additional_groggy_time) == 0x000198, "Member 'FProjectileInfo::_additional_groggy_time' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _abnormalState_penalty_base) == 0x00019C, "Member 'FProjectileInfo::_abnormalState_penalty_base' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _build_up_recover_inc_base) == 0x0001A0, "Member 'FProjectileInfo::_build_up_recover_inc_base' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _force_fire_forward_distance) == 0x0001A4, "Member 'FProjectileInfo::_force_fire_forward_distance' has a wrong offset!");
static_assert(offsetof(FProjectileInfo, _NGP_Detail_index) == 0x0001A8, "Member 'FProjectileInfo::_NGP_Detail_index' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.CustomInputInfo
// 0x0010 (0x0038 - 0x0028)
struct FCustomInputInfo final : public FContentInfoBase
{
public:
	ELInputType                                   _input_type;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _input_cmd;                                        // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _input_cmd_time;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomInputInfo) == 0x000008, "Wrong alignment on FCustomInputInfo");
static_assert(sizeof(FCustomInputInfo) == 0x000038, "Wrong size on FCustomInputInfo");
static_assert(offsetof(FCustomInputInfo, _input_type) == 0x000028, "Member 'FCustomInputInfo::_input_type' has a wrong offset!");
static_assert(offsetof(FCustomInputInfo, _input_cmd) == 0x00002C, "Member 'FCustomInputInfo::_input_cmd' has a wrong offset!");
static_assert(offsetof(FCustomInputInfo, _input_cmd_time) == 0x000034, "Member 'FCustomInputInfo::_input_cmd_time' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.CommandInfo
// 0x0060 (0x0088 - 0x0028)
struct FCommandInfo final : public FContentInfoBase
{
public:
	struct FCustomInputInfo                       _custom_input_info;                                // 0x0028(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	class FName                                   _code_name;                                        // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _primary_input;                                    // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _secondary_input;                                  // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _press;                                            // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _release;                                          // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommandInfo) == 0x000008, "Wrong alignment on FCommandInfo");
static_assert(sizeof(FCommandInfo) == 0x000088, "Wrong size on FCommandInfo");
static_assert(offsetof(FCommandInfo, _custom_input_info) == 0x000028, "Member 'FCommandInfo::_custom_input_info' has a wrong offset!");
static_assert(offsetof(FCommandInfo, _code_name) == 0x000060, "Member 'FCommandInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FCommandInfo, _primary_input) == 0x000068, "Member 'FCommandInfo::_primary_input' has a wrong offset!");
static_assert(offsetof(FCommandInfo, _secondary_input) == 0x000070, "Member 'FCommandInfo::_secondary_input' has a wrong offset!");
static_assert(offsetof(FCommandInfo, _press) == 0x000078, "Member 'FCommandInfo::_press' has a wrong offset!");
static_assert(offsetof(FCommandInfo, _release) == 0x000080, "Member 'FCommandInfo::_release' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.CommandInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FCommandInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCommandInfo>                   _CommandInfo_array;                                // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommandInfoDB) == 0x000008, "Wrong alignment on FCommandInfoDB");
static_assert(sizeof(FCommandInfoDB) == 0x0000A0, "Wrong size on FCommandInfoDB");
static_assert(offsetof(FCommandInfoDB, _CommandInfo_array) == 0x000078, "Member 'FCommandInfoDB::_CommandInfo_array' has a wrong offset!");
static_assert(offsetof(FCommandInfoDB, _version) == 0x000088, "Member 'FCommandInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FCommandInfoDB, _comment) == 0x000090, "Member 'FCommandInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.CommandInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FCommandInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommandInfoPtr) == 0x000008, "Wrong alignment on FCommandInfoPtr");
static_assert(sizeof(FCommandInfoPtr) == 0x000008, "Wrong size on FCommandInfoPtr");

// ScriptStruct ProjectPContentInfo.SkillInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSkillInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillInfoPtr) == 0x000008, "Wrong alignment on FSkillInfoPtr");
static_assert(sizeof(FSkillInfoPtr) == 0x000008, "Wrong size on FSkillInfoPtr");

// ScriptStruct ProjectPContentInfo.CustomInputInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FCustomInputInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomInputInfoPtr) == 0x000008, "Wrong alignment on FCustomInputInfoPtr");
static_assert(sizeof(FCustomInputInfoPtr) == 0x000008, "Wrong size on FCustomInputInfoPtr");

// ScriptStruct ProjectPContentInfo.CommonActionMontageInfo
// 0x0030 (0x0058 - 0x0028)
struct FCommonActionMontageInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELCommonActionType                            _common_action_type;                               // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _montage;                                          // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _replace_montage;                                  // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _end_common_action;                                // 0x0044(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _physical_target_bone;                             // 0x004C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _override_montage_blend_in;                        // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommonActionMontageInfo) == 0x000008, "Wrong alignment on FCommonActionMontageInfo");
static_assert(sizeof(FCommonActionMontageInfo) == 0x000058, "Wrong size on FCommonActionMontageInfo");
static_assert(offsetof(FCommonActionMontageInfo, _code_name) == 0x000028, "Member 'FCommonActionMontageInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FCommonActionMontageInfo, _common_action_type) == 0x000030, "Member 'FCommonActionMontageInfo::_common_action_type' has a wrong offset!");
static_assert(offsetof(FCommonActionMontageInfo, _montage) == 0x000034, "Member 'FCommonActionMontageInfo::_montage' has a wrong offset!");
static_assert(offsetof(FCommonActionMontageInfo, _replace_montage) == 0x00003C, "Member 'FCommonActionMontageInfo::_replace_montage' has a wrong offset!");
static_assert(offsetof(FCommonActionMontageInfo, _end_common_action) == 0x000044, "Member 'FCommonActionMontageInfo::_end_common_action' has a wrong offset!");
static_assert(offsetof(FCommonActionMontageInfo, _physical_target_bone) == 0x00004C, "Member 'FCommonActionMontageInfo::_physical_target_bone' has a wrong offset!");
static_assert(offsetof(FCommonActionMontageInfo, _override_montage_blend_in) == 0x000054, "Member 'FCommonActionMontageInfo::_override_montage_blend_in' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.CommonActionMontageInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FCommonActionMontageInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCommonActionMontageInfo>       _CommonActionMontage_array;                        // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommonActionMontageInfoDB) == 0x000008, "Wrong alignment on FCommonActionMontageInfoDB");
static_assert(sizeof(FCommonActionMontageInfoDB) == 0x0000A0, "Wrong size on FCommonActionMontageInfoDB");
static_assert(offsetof(FCommonActionMontageInfoDB, _CommonActionMontage_array) == 0x000078, "Member 'FCommonActionMontageInfoDB::_CommonActionMontage_array' has a wrong offset!");
static_assert(offsetof(FCommonActionMontageInfoDB, _version) == 0x000088, "Member 'FCommonActionMontageInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FCommonActionMontageInfoDB, _comment) == 0x000090, "Member 'FCommonActionMontageInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.NGPContentChangeInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FNGPContentChangeInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNGPContentChangeInfoPtr) == 0x000008, "Wrong alignment on FNGPContentChangeInfoPtr");
static_assert(sizeof(FNGPContentChangeInfoPtr) == 0x000008, "Wrong size on FNGPContentChangeInfoPtr");

// ScriptStruct ProjectPContentInfo.CommonActionMontageInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FCommonActionMontageInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommonActionMontageInfoPtr) == 0x000008, "Wrong alignment on FCommonActionMontageInfoPtr");
static_assert(sizeof(FCommonActionMontageInfoPtr) == 0x000008, "Wrong size on FCommonActionMontageInfoPtr");

// ScriptStruct ProjectPContentInfo.LevelSequenceInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FLevelSequenceInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLevelSequenceInfoPtr) == 0x000008, "Wrong alignment on FLevelSequenceInfoPtr");
static_assert(sizeof(FLevelSequenceInfoPtr) == 0x000008, "Wrong size on FLevelSequenceInfoPtr");

// ScriptStruct ProjectPContentInfo.CommonConstantInfo
// 0x0018 (0x0040 - 0x0028)
struct FCommonConstantInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _value;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommonConstantInfo) == 0x000008, "Wrong alignment on FCommonConstantInfo");
static_assert(sizeof(FCommonConstantInfo) == 0x000040, "Wrong size on FCommonConstantInfo");
static_assert(offsetof(FCommonConstantInfo, _code_name) == 0x000028, "Member 'FCommonConstantInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FCommonConstantInfo, _value) == 0x000030, "Member 'FCommonConstantInfo::_value' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.CommonConstantInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FCommonConstantInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCommonConstantInfo>            _CommonConstant_array;                             // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommonConstantInfoDB) == 0x000008, "Wrong alignment on FCommonConstantInfoDB");
static_assert(sizeof(FCommonConstantInfoDB) == 0x0000A0, "Wrong size on FCommonConstantInfoDB");
static_assert(offsetof(FCommonConstantInfoDB, _CommonConstant_array) == 0x000078, "Member 'FCommonConstantInfoDB::_CommonConstant_array' has a wrong offset!");
static_assert(offsetof(FCommonConstantInfoDB, _version) == 0x000088, "Member 'FCommonConstantInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FCommonConstantInfoDB, _comment) == 0x000090, "Member 'FCommonConstantInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.TitleSetInfo
// 0x0020 (0x0048 - 0x0028)
struct FTitleSetInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _priority;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _open_level;                                       // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _set_condition;                                    // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTitleSetInfo) == 0x000008, "Wrong alignment on FTitleSetInfo");
static_assert(sizeof(FTitleSetInfo) == 0x000048, "Wrong size on FTitleSetInfo");
static_assert(offsetof(FTitleSetInfo, _code_name) == 0x000028, "Member 'FTitleSetInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FTitleSetInfo, _priority) == 0x000030, "Member 'FTitleSetInfo::_priority' has a wrong offset!");
static_assert(offsetof(FTitleSetInfo, _open_level) == 0x000034, "Member 'FTitleSetInfo::_open_level' has a wrong offset!");
static_assert(offsetof(FTitleSetInfo, _set_condition) == 0x00003C, "Member 'FTitleSetInfo::_set_condition' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.TitleInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FTitleInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTitleSetInfo>                  _TitleSet_array;                                   // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTitleInfoDB) == 0x000008, "Wrong alignment on FTitleInfoDB");
static_assert(sizeof(FTitleInfoDB) == 0x0000A0, "Wrong size on FTitleInfoDB");
static_assert(offsetof(FTitleInfoDB, _TitleSet_array) == 0x000078, "Member 'FTitleInfoDB::_TitleSet_array' has a wrong offset!");
static_assert(offsetof(FTitleInfoDB, _version) == 0x000088, "Member 'FTitleInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FTitleInfoDB, _comment) == 0x000090, "Member 'FTitleInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.DefaultStatInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FDefaultStatInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDefaultStatInfoPtr) == 0x000008, "Wrong alignment on FDefaultStatInfoPtr");
static_assert(sizeof(FDefaultStatInfoPtr) == 0x000008, "Wrong size on FDefaultStatInfoPtr");

// ScriptStruct ProjectPContentInfo.CommonConstantInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FCommonConstantInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommonConstantInfoPtr) == 0x000008, "Wrong alignment on FCommonConstantInfoPtr");
static_assert(sizeof(FCommonConstantInfoPtr) == 0x000008, "Wrong size on FCommonConstantInfoPtr");

// ScriptStruct ProjectPContentInfo.ContentCommandInfo
// 0x00B0 (0x00D8 - 0x0028)
struct FContentCommandInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELContentCommandType                          _command_enum;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _param1;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param2;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param3;                                           // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param4;                                           // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param5;                                           // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param6;                                           // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param7;                                           // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param8;                                           // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param9;                                           // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param10;                                          // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContentCommandInfo) == 0x000008, "Wrong alignment on FContentCommandInfo");
static_assert(sizeof(FContentCommandInfo) == 0x0000D8, "Wrong size on FContentCommandInfo");
static_assert(offsetof(FContentCommandInfo, _code_name) == 0x000028, "Member 'FContentCommandInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FContentCommandInfo, _command_enum) == 0x000030, "Member 'FContentCommandInfo::_command_enum' has a wrong offset!");
static_assert(offsetof(FContentCommandInfo, _param1) == 0x000038, "Member 'FContentCommandInfo::_param1' has a wrong offset!");
static_assert(offsetof(FContentCommandInfo, _param2) == 0x000048, "Member 'FContentCommandInfo::_param2' has a wrong offset!");
static_assert(offsetof(FContentCommandInfo, _param3) == 0x000058, "Member 'FContentCommandInfo::_param3' has a wrong offset!");
static_assert(offsetof(FContentCommandInfo, _param4) == 0x000068, "Member 'FContentCommandInfo::_param4' has a wrong offset!");
static_assert(offsetof(FContentCommandInfo, _param5) == 0x000078, "Member 'FContentCommandInfo::_param5' has a wrong offset!");
static_assert(offsetof(FContentCommandInfo, _param6) == 0x000088, "Member 'FContentCommandInfo::_param6' has a wrong offset!");
static_assert(offsetof(FContentCommandInfo, _param7) == 0x000098, "Member 'FContentCommandInfo::_param7' has a wrong offset!");
static_assert(offsetof(FContentCommandInfo, _param8) == 0x0000A8, "Member 'FContentCommandInfo::_param8' has a wrong offset!");
static_assert(offsetof(FContentCommandInfo, _param9) == 0x0000B8, "Member 'FContentCommandInfo::_param9' has a wrong offset!");
static_assert(offsetof(FContentCommandInfo, _param10) == 0x0000C8, "Member 'FContentCommandInfo::_param10' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ContentCommandInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FContentCommandInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FContentCommandInfo>            _ContentCommand_array;                             // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContentCommandInfoDB) == 0x000008, "Wrong alignment on FContentCommandInfoDB");
static_assert(sizeof(FContentCommandInfoDB) == 0x000050, "Wrong size on FContentCommandInfoDB");
static_assert(offsetof(FContentCommandInfoDB, _ContentCommand_array) == 0x000028, "Member 'FContentCommandInfoDB::_ContentCommand_array' has a wrong offset!");
static_assert(offsetof(FContentCommandInfoDB, _version) == 0x000038, "Member 'FContentCommandInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FContentCommandInfoDB, _comment) == 0x000040, "Member 'FContentCommandInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ItemPackageInfo
// 0x00A0 (0x00C8 - 0x0028)
struct FItemPackageInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _IsExist;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _Spot_code_name;                                   // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _Item_1_code_name;                                 // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _Item_1_count;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _Item_2_code_name;                                 // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _Item_2_count;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _Item_3_code_name;                                 // 0x0054(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _Item_3_count;                                     // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _Item_4_code_name;                                 // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _Item_4_count;                                     // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _Item_5_code_name;                                 // 0x006C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _Item_5_count;                                     // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _Item_6_code_name;                                 // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _Item_6_count;                                     // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _weapon_item_1_handle;                             // 0x0084(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _weapon_item_1_blade;                              // 0x008C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _NGP_Round_For_Link_1;                             // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _NGP_Link_1;                                       // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _NGP_Round_For_Link_2;                             // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _NGP_Link_2;                                       // 0x00A4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _NGP_Round_For_Link_3;                             // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _NGP_Link_3;                                       // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _NGP_Round_For_Link_4;                             // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _NGP_Link_4;                                       // 0x00BC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemPackageInfo) == 0x000008, "Wrong alignment on FItemPackageInfo");
static_assert(sizeof(FItemPackageInfo) == 0x0000C8, "Wrong size on FItemPackageInfo");
static_assert(offsetof(FItemPackageInfo, _code_name) == 0x000028, "Member 'FItemPackageInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FItemPackageInfo, _IsExist) == 0x000030, "Member 'FItemPackageInfo::_IsExist' has a wrong offset!");
static_assert(offsetof(FItemPackageInfo, _Spot_code_name) == 0x000034, "Member 'FItemPackageInfo::_Spot_code_name' has a wrong offset!");
static_assert(offsetof(FItemPackageInfo, _Item_1_code_name) == 0x00003C, "Member 'FItemPackageInfo::_Item_1_code_name' has a wrong offset!");
static_assert(offsetof(FItemPackageInfo, _Item_1_count) == 0x000044, "Member 'FItemPackageInfo::_Item_1_count' has a wrong offset!");
static_assert(offsetof(FItemPackageInfo, _Item_2_code_name) == 0x000048, "Member 'FItemPackageInfo::_Item_2_code_name' has a wrong offset!");
static_assert(offsetof(FItemPackageInfo, _Item_2_count) == 0x000050, "Member 'FItemPackageInfo::_Item_2_count' has a wrong offset!");
static_assert(offsetof(FItemPackageInfo, _Item_3_code_name) == 0x000054, "Member 'FItemPackageInfo::_Item_3_code_name' has a wrong offset!");
static_assert(offsetof(FItemPackageInfo, _Item_3_count) == 0x00005C, "Member 'FItemPackageInfo::_Item_3_count' has a wrong offset!");
static_assert(offsetof(FItemPackageInfo, _Item_4_code_name) == 0x000060, "Member 'FItemPackageInfo::_Item_4_code_name' has a wrong offset!");
static_assert(offsetof(FItemPackageInfo, _Item_4_count) == 0x000068, "Member 'FItemPackageInfo::_Item_4_count' has a wrong offset!");
static_assert(offsetof(FItemPackageInfo, _Item_5_code_name) == 0x00006C, "Member 'FItemPackageInfo::_Item_5_code_name' has a wrong offset!");
static_assert(offsetof(FItemPackageInfo, _Item_5_count) == 0x000074, "Member 'FItemPackageInfo::_Item_5_count' has a wrong offset!");
static_assert(offsetof(FItemPackageInfo, _Item_6_code_name) == 0x000078, "Member 'FItemPackageInfo::_Item_6_code_name' has a wrong offset!");
static_assert(offsetof(FItemPackageInfo, _Item_6_count) == 0x000080, "Member 'FItemPackageInfo::_Item_6_count' has a wrong offset!");
static_assert(offsetof(FItemPackageInfo, _weapon_item_1_handle) == 0x000084, "Member 'FItemPackageInfo::_weapon_item_1_handle' has a wrong offset!");
static_assert(offsetof(FItemPackageInfo, _weapon_item_1_blade) == 0x00008C, "Member 'FItemPackageInfo::_weapon_item_1_blade' has a wrong offset!");
static_assert(offsetof(FItemPackageInfo, _NGP_Round_For_Link_1) == 0x000094, "Member 'FItemPackageInfo::_NGP_Round_For_Link_1' has a wrong offset!");
static_assert(offsetof(FItemPackageInfo, _NGP_Link_1) == 0x000098, "Member 'FItemPackageInfo::_NGP_Link_1' has a wrong offset!");
static_assert(offsetof(FItemPackageInfo, _NGP_Round_For_Link_2) == 0x0000A0, "Member 'FItemPackageInfo::_NGP_Round_For_Link_2' has a wrong offset!");
static_assert(offsetof(FItemPackageInfo, _NGP_Link_2) == 0x0000A4, "Member 'FItemPackageInfo::_NGP_Link_2' has a wrong offset!");
static_assert(offsetof(FItemPackageInfo, _NGP_Round_For_Link_3) == 0x0000AC, "Member 'FItemPackageInfo::_NGP_Round_For_Link_3' has a wrong offset!");
static_assert(offsetof(FItemPackageInfo, _NGP_Link_3) == 0x0000B0, "Member 'FItemPackageInfo::_NGP_Link_3' has a wrong offset!");
static_assert(offsetof(FItemPackageInfo, _NGP_Round_For_Link_4) == 0x0000B8, "Member 'FItemPackageInfo::_NGP_Round_For_Link_4' has a wrong offset!");
static_assert(offsetof(FItemPackageInfo, _NGP_Link_4) == 0x0000BC, "Member 'FItemPackageInfo::_NGP_Link_4' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ContentConditionInfo
// 0x0040 (0x0068 - 0x0028)
struct FContentConditionInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELConditionCompareType                        _condition_type;                                   // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELConditionCheckType                          _check_type;                                       // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _param1;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param2;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param3;                                           // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContentConditionInfo) == 0x000008, "Wrong alignment on FContentConditionInfo");
static_assert(sizeof(FContentConditionInfo) == 0x000068, "Wrong size on FContentConditionInfo");
static_assert(offsetof(FContentConditionInfo, _code_name) == 0x000028, "Member 'FContentConditionInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FContentConditionInfo, _condition_type) == 0x000030, "Member 'FContentConditionInfo::_condition_type' has a wrong offset!");
static_assert(offsetof(FContentConditionInfo, _check_type) == 0x000031, "Member 'FContentConditionInfo::_check_type' has a wrong offset!");
static_assert(offsetof(FContentConditionInfo, _param1) == 0x000038, "Member 'FContentConditionInfo::_param1' has a wrong offset!");
static_assert(offsetof(FContentConditionInfo, _param2) == 0x000048, "Member 'FContentConditionInfo::_param2' has a wrong offset!");
static_assert(offsetof(FContentConditionInfo, _param3) == 0x000058, "Member 'FContentConditionInfo::_param3' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ContentConditionInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FContentConditionInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FContentConditionInfo>          _ContentCondition_array;                           // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContentConditionInfoDB) == 0x000008, "Wrong alignment on FContentConditionInfoDB");
static_assert(sizeof(FContentConditionInfoDB) == 0x000050, "Wrong size on FContentConditionInfoDB");
static_assert(offsetof(FContentConditionInfoDB, _ContentCondition_array) == 0x000028, "Member 'FContentConditionInfoDB::_ContentCondition_array' has a wrong offset!");
static_assert(offsetof(FContentConditionInfoDB, _version) == 0x000038, "Member 'FContentConditionInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FContentConditionInfoDB, _comment) == 0x000040, "Member 'FContentConditionInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.SpotMatchInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSpotMatchInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpotMatchInfoPtr) == 0x000008, "Wrong alignment on FSpotMatchInfoPtr");
static_assert(sizeof(FSpotMatchInfoPtr) == 0x000008, "Wrong size on FSpotMatchInfoPtr");

// ScriptStruct ProjectPContentInfo.UnknownContentData
// 0x0000 (0x0028 - 0x0028)
struct FUnknownContentData final : public FContentInfoBase
{
};
static_assert(alignof(FUnknownContentData) == 0x000008, "Wrong alignment on FUnknownContentData");
static_assert(sizeof(FUnknownContentData) == 0x000028, "Wrong size on FUnknownContentData");

// ScriptStruct ProjectPContentInfo.PropLiftInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FPropLiftInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPropLiftInfoPtr) == 0x000008, "Wrong alignment on FPropLiftInfoPtr");
static_assert(sizeof(FPropLiftInfoPtr) == 0x000008, "Wrong size on FPropLiftInfoPtr");

// ScriptStruct ProjectPContentInfo.DialogMonsterMonologueInfo
// 0x0078 (0x00A0 - 0x0028)
struct FDialogMonsterMonologueInfo final : public FContentInfoBase
{
public:
	TArray<struct FGeneralConditionInfo>          _condition_independent_array;                      // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FName                                   _code_name;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _spot_unique_id;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _monologue_target_spot;                            // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _dialog_code_name;                                 // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _check_percentage;                                 // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELCallBackEventType                           _event_type;                                       // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _param1;                                           // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param2;                                           // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _count;                                            // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _condition_codename;                               // 0x0084(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _delay_time;                                       // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _check_cooltime;                                   // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _monologue_cooltime;                               // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _PCdeath_delay;                                    // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogMonsterMonologueInfo) == 0x000008, "Wrong alignment on FDialogMonsterMonologueInfo");
static_assert(sizeof(FDialogMonsterMonologueInfo) == 0x0000A0, "Wrong size on FDialogMonsterMonologueInfo");
static_assert(offsetof(FDialogMonsterMonologueInfo, _condition_independent_array) == 0x000028, "Member 'FDialogMonsterMonologueInfo::_condition_independent_array' has a wrong offset!");
static_assert(offsetof(FDialogMonsterMonologueInfo, _code_name) == 0x000038, "Member 'FDialogMonsterMonologueInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FDialogMonsterMonologueInfo, _spot_unique_id) == 0x000040, "Member 'FDialogMonsterMonologueInfo::_spot_unique_id' has a wrong offset!");
static_assert(offsetof(FDialogMonsterMonologueInfo, _monologue_target_spot) == 0x000048, "Member 'FDialogMonsterMonologueInfo::_monologue_target_spot' has a wrong offset!");
static_assert(offsetof(FDialogMonsterMonologueInfo, _dialog_code_name) == 0x000050, "Member 'FDialogMonsterMonologueInfo::_dialog_code_name' has a wrong offset!");
static_assert(offsetof(FDialogMonsterMonologueInfo, _check_percentage) == 0x000058, "Member 'FDialogMonsterMonologueInfo::_check_percentage' has a wrong offset!");
static_assert(offsetof(FDialogMonsterMonologueInfo, _event_type) == 0x00005C, "Member 'FDialogMonsterMonologueInfo::_event_type' has a wrong offset!");
static_assert(offsetof(FDialogMonsterMonologueInfo, _param1) == 0x000060, "Member 'FDialogMonsterMonologueInfo::_param1' has a wrong offset!");
static_assert(offsetof(FDialogMonsterMonologueInfo, _param2) == 0x000070, "Member 'FDialogMonsterMonologueInfo::_param2' has a wrong offset!");
static_assert(offsetof(FDialogMonsterMonologueInfo, _count) == 0x000080, "Member 'FDialogMonsterMonologueInfo::_count' has a wrong offset!");
static_assert(offsetof(FDialogMonsterMonologueInfo, _condition_codename) == 0x000084, "Member 'FDialogMonsterMonologueInfo::_condition_codename' has a wrong offset!");
static_assert(offsetof(FDialogMonsterMonologueInfo, _delay_time) == 0x00008C, "Member 'FDialogMonsterMonologueInfo::_delay_time' has a wrong offset!");
static_assert(offsetof(FDialogMonsterMonologueInfo, _check_cooltime) == 0x000090, "Member 'FDialogMonsterMonologueInfo::_check_cooltime' has a wrong offset!");
static_assert(offsetof(FDialogMonsterMonologueInfo, _monologue_cooltime) == 0x000094, "Member 'FDialogMonsterMonologueInfo::_monologue_cooltime' has a wrong offset!");
static_assert(offsetof(FDialogMonsterMonologueInfo, _PCdeath_delay) == 0x000098, "Member 'FDialogMonsterMonologueInfo::_PCdeath_delay' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.DialogMonsterMonologueInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FDialogMonsterMonologueInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDialogMonsterMonologueInfo>    _DialogMonsterMonologue_array;                     // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogMonsterMonologueInfoDB) == 0x000008, "Wrong alignment on FDialogMonsterMonologueInfoDB");
static_assert(sizeof(FDialogMonsterMonologueInfoDB) == 0x0000A0, "Wrong size on FDialogMonsterMonologueInfoDB");
static_assert(offsetof(FDialogMonsterMonologueInfoDB, _DialogMonsterMonologue_array) == 0x000078, "Member 'FDialogMonsterMonologueInfoDB::_DialogMonsterMonologue_array' has a wrong offset!");
static_assert(offsetof(FDialogMonsterMonologueInfoDB, _version) == 0x000088, "Member 'FDialogMonsterMonologueInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FDialogMonsterMonologueInfoDB, _comment) == 0x000090, "Member 'FDialogMonsterMonologueInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.DialogMonsterMonologueInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FDialogMonsterMonologueInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogMonsterMonologueInfoPtr) == 0x000008, "Wrong alignment on FDialogMonsterMonologueInfoPtr");
static_assert(sizeof(FDialogMonsterMonologueInfoPtr) == 0x000008, "Wrong size on FDialogMonsterMonologueInfoPtr");

// ScriptStruct ProjectPContentInfo.PropLadderInfo
// 0x0120 (0x0148 - 0x0028)
struct FPropLadderInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPropLadderStateType                         _ladder_state;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   _model_BP;                                         // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _model_resource;                                   // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _loop_motion_resource;                             // 0x0088(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _upstair_interaction_radius;                       // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _upstair_interaction_confront_angle;               // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _upstair_interaction_confront_angle_prop;          // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _upstair_interaction_approach_message_code_name;   // 0x00BC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _upstair_interaction_condition;                    // 0x00C4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _upstair_interaction_condition_fail_message;       // 0x00CC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 _upstair_interaction_prop_motion_resource;         // 0x00D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _interaction_user_motion_resource;                 // 0x0100(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _contentCommand_codename;                          // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _downstair_interaction_radius;                     // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _downstair_interaction_confront_angle;             // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _downstair_interaction_confront_angle_prop;        // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _downstair_interaction_approach_message_code_name; // 0x013C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPhysicalSurfaceType                         _ladder_material;                                  // 0x0144(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_145[0x3];                                      // 0x0145(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPropLadderInfo) == 0x000008, "Wrong alignment on FPropLadderInfo");
static_assert(sizeof(FPropLadderInfo) == 0x000148, "Wrong size on FPropLadderInfo");
static_assert(offsetof(FPropLadderInfo, _code_name) == 0x000028, "Member 'FPropLadderInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FPropLadderInfo, _ladder_state) == 0x000030, "Member 'FPropLadderInfo::_ladder_state' has a wrong offset!");
static_assert(offsetof(FPropLadderInfo, _model_BP) == 0x000038, "Member 'FPropLadderInfo::_model_BP' has a wrong offset!");
static_assert(offsetof(FPropLadderInfo, _model_resource) == 0x000060, "Member 'FPropLadderInfo::_model_resource' has a wrong offset!");
static_assert(offsetof(FPropLadderInfo, _loop_motion_resource) == 0x000088, "Member 'FPropLadderInfo::_loop_motion_resource' has a wrong offset!");
static_assert(offsetof(FPropLadderInfo, _upstair_interaction_radius) == 0x0000B0, "Member 'FPropLadderInfo::_upstair_interaction_radius' has a wrong offset!");
static_assert(offsetof(FPropLadderInfo, _upstair_interaction_confront_angle) == 0x0000B4, "Member 'FPropLadderInfo::_upstair_interaction_confront_angle' has a wrong offset!");
static_assert(offsetof(FPropLadderInfo, _upstair_interaction_confront_angle_prop) == 0x0000B8, "Member 'FPropLadderInfo::_upstair_interaction_confront_angle_prop' has a wrong offset!");
static_assert(offsetof(FPropLadderInfo, _upstair_interaction_approach_message_code_name) == 0x0000BC, "Member 'FPropLadderInfo::_upstair_interaction_approach_message_code_name' has a wrong offset!");
static_assert(offsetof(FPropLadderInfo, _upstair_interaction_condition) == 0x0000C4, "Member 'FPropLadderInfo::_upstair_interaction_condition' has a wrong offset!");
static_assert(offsetof(FPropLadderInfo, _upstair_interaction_condition_fail_message) == 0x0000CC, "Member 'FPropLadderInfo::_upstair_interaction_condition_fail_message' has a wrong offset!");
static_assert(offsetof(FPropLadderInfo, _upstair_interaction_prop_motion_resource) == 0x0000D8, "Member 'FPropLadderInfo::_upstair_interaction_prop_motion_resource' has a wrong offset!");
static_assert(offsetof(FPropLadderInfo, _interaction_user_motion_resource) == 0x000100, "Member 'FPropLadderInfo::_interaction_user_motion_resource' has a wrong offset!");
static_assert(offsetof(FPropLadderInfo, _contentCommand_codename) == 0x000128, "Member 'FPropLadderInfo::_contentCommand_codename' has a wrong offset!");
static_assert(offsetof(FPropLadderInfo, _downstair_interaction_radius) == 0x000130, "Member 'FPropLadderInfo::_downstair_interaction_radius' has a wrong offset!");
static_assert(offsetof(FPropLadderInfo, _downstair_interaction_confront_angle) == 0x000134, "Member 'FPropLadderInfo::_downstair_interaction_confront_angle' has a wrong offset!");
static_assert(offsetof(FPropLadderInfo, _downstair_interaction_confront_angle_prop) == 0x000138, "Member 'FPropLadderInfo::_downstair_interaction_confront_angle_prop' has a wrong offset!");
static_assert(offsetof(FPropLadderInfo, _downstair_interaction_approach_message_code_name) == 0x00013C, "Member 'FPropLadderInfo::_downstair_interaction_approach_message_code_name' has a wrong offset!");
static_assert(offsetof(FPropLadderInfo, _ladder_material) == 0x000144, "Member 'FPropLadderInfo::_ladder_material' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.DialogInfo
// 0x00E0 (0x0108 - 0x0028)
struct FDialogInfo final : public FContentInfoBase
{
public:
	TArray<struct FGeneralConditionInfo>          _condition_independent_array;                      // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FGeneralCommandInfo>            _content_command_independent_array;                // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FName                                   _code_name;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _npc_codename;                                     // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _talk_codename;                                    // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELDialogStepType                              _step_type;                                        // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELDialogDialogType                            _dialog_type;                                      // 0x0061(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _list_priority;                                    // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _condition_codename;                               // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _priority;                                         // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _text;                                             // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _text_cn;                                          // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _menu_item_variable;                               // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELDialogExecutionType                         _execution_type;                                   // 0x0094(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           _target_codename;                                  // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FName                                   _content_command_codename;                         // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELLieType                                     _lie_type;                                         // 0x00B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _select_timer;                                     // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _hold_select;                                      // 0x00B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _random_select;                                    // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _random_default_select;                            // 0x00C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _random_default_index;                             // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _pc_motion;                                        // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _npc_motion;                                       // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _sound_resource;                                   // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _talker_radius_in;                                 // 0x00E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _list_repeat_count;                                // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _list_repeat_term;                                 // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELDialogLookatBone                            _lookat_bone;                                      // 0x00EC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _lootat_target;                                    // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _new_notify;                                       // 0x00F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _cam_zoom;                                         // 0x00F9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA[0x2];                                       // 0x00FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _new_notify_group;                                 // 0x00FC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogInfo) == 0x000008, "Wrong alignment on FDialogInfo");
static_assert(sizeof(FDialogInfo) == 0x000108, "Wrong size on FDialogInfo");
static_assert(offsetof(FDialogInfo, _condition_independent_array) == 0x000028, "Member 'FDialogInfo::_condition_independent_array' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _content_command_independent_array) == 0x000038, "Member 'FDialogInfo::_content_command_independent_array' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _code_name) == 0x000048, "Member 'FDialogInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _npc_codename) == 0x000050, "Member 'FDialogInfo::_npc_codename' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _talk_codename) == 0x000058, "Member 'FDialogInfo::_talk_codename' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _step_type) == 0x000060, "Member 'FDialogInfo::_step_type' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _dialog_type) == 0x000061, "Member 'FDialogInfo::_dialog_type' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _list_priority) == 0x000064, "Member 'FDialogInfo::_list_priority' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _condition_codename) == 0x000068, "Member 'FDialogInfo::_condition_codename' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _priority) == 0x000070, "Member 'FDialogInfo::_priority' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _text) == 0x000078, "Member 'FDialogInfo::_text' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _text_cn) == 0x000088, "Member 'FDialogInfo::_text_cn' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _menu_item_variable) == 0x000090, "Member 'FDialogInfo::_menu_item_variable' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _execution_type) == 0x000094, "Member 'FDialogInfo::_execution_type' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _target_codename) == 0x000098, "Member 'FDialogInfo::_target_codename' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _content_command_codename) == 0x0000A8, "Member 'FDialogInfo::_content_command_codename' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _lie_type) == 0x0000B0, "Member 'FDialogInfo::_lie_type' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _select_timer) == 0x0000B4, "Member 'FDialogInfo::_select_timer' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _hold_select) == 0x0000B8, "Member 'FDialogInfo::_hold_select' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _random_select) == 0x0000BC, "Member 'FDialogInfo::_random_select' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _random_default_select) == 0x0000C0, "Member 'FDialogInfo::_random_default_select' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _random_default_index) == 0x0000C4, "Member 'FDialogInfo::_random_default_index' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _pc_motion) == 0x0000C8, "Member 'FDialogInfo::_pc_motion' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _npc_motion) == 0x0000D0, "Member 'FDialogInfo::_npc_motion' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _sound_resource) == 0x0000D8, "Member 'FDialogInfo::_sound_resource' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _talker_radius_in) == 0x0000E0, "Member 'FDialogInfo::_talker_radius_in' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _list_repeat_count) == 0x0000E4, "Member 'FDialogInfo::_list_repeat_count' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _list_repeat_term) == 0x0000E8, "Member 'FDialogInfo::_list_repeat_term' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _lookat_bone) == 0x0000EC, "Member 'FDialogInfo::_lookat_bone' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _lootat_target) == 0x0000F0, "Member 'FDialogInfo::_lootat_target' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _new_notify) == 0x0000F8, "Member 'FDialogInfo::_new_notify' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _cam_zoom) == 0x0000F9, "Member 'FDialogInfo::_cam_zoom' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _new_notify_group) == 0x0000FC, "Member 'FDialogInfo::_new_notify_group' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.TalkerInfo
// 0x00B0 (0x00D8 - 0x0028)
struct FTalkerInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_name;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_name_cn;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _attackable;                                       // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _aggressive;                                       // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAgressiveRecoverType                        _aggressive_recover_type;                          // 0x004A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x1];                                       // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _attacked_exec;                                    // 0x004C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _attacked_exec_condition;                          // 0x0054(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTalkStarterType                             _talk_starter_type;                                // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           _quest;                                            // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _lookat_radius;                                    // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELDialogLookatBone                            _lookat_bone;                                      // 0x0074(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _lootat_target;                                    // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _interaction_radius;                               // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _interaction_offset_x;                             // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _interaction_offset_y;                             // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _interaction_offset_z;                             // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _interaction_confront_angle;                       // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _interaction_confront_angle_prop;                  // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _interaction_approach_message_code_name;           // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _monologue_radius;                                 // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _show_goldentree_status;                           // 0x00A4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _talker_idle;                                      // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           _talker_idle_sub;                                  // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FName                                   _dialog_idle;                                      // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _enable_dialog_rotate;                             // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _min_turn_angle;                                   // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _dialog_radius;                                    // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTalkerInfo) == 0x000008, "Wrong alignment on FTalkerInfo");
static_assert(sizeof(FTalkerInfo) == 0x0000D8, "Wrong size on FTalkerInfo");
static_assert(offsetof(FTalkerInfo, _code_name) == 0x000028, "Member 'FTalkerInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _local_name) == 0x000030, "Member 'FTalkerInfo::_local_name' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _local_name_cn) == 0x000040, "Member 'FTalkerInfo::_local_name_cn' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _attackable) == 0x000048, "Member 'FTalkerInfo::_attackable' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _aggressive) == 0x000049, "Member 'FTalkerInfo::_aggressive' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _aggressive_recover_type) == 0x00004A, "Member 'FTalkerInfo::_aggressive_recover_type' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _attacked_exec) == 0x00004C, "Member 'FTalkerInfo::_attacked_exec' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _attacked_exec_condition) == 0x000054, "Member 'FTalkerInfo::_attacked_exec_condition' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _talk_starter_type) == 0x00005C, "Member 'FTalkerInfo::_talk_starter_type' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _quest) == 0x000060, "Member 'FTalkerInfo::_quest' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _lookat_radius) == 0x000070, "Member 'FTalkerInfo::_lookat_radius' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _lookat_bone) == 0x000074, "Member 'FTalkerInfo::_lookat_bone' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _lootat_target) == 0x000078, "Member 'FTalkerInfo::_lootat_target' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _interaction_radius) == 0x000080, "Member 'FTalkerInfo::_interaction_radius' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _interaction_offset_x) == 0x000084, "Member 'FTalkerInfo::_interaction_offset_x' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _interaction_offset_y) == 0x000088, "Member 'FTalkerInfo::_interaction_offset_y' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _interaction_offset_z) == 0x00008C, "Member 'FTalkerInfo::_interaction_offset_z' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _interaction_confront_angle) == 0x000090, "Member 'FTalkerInfo::_interaction_confront_angle' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _interaction_confront_angle_prop) == 0x000094, "Member 'FTalkerInfo::_interaction_confront_angle_prop' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _interaction_approach_message_code_name) == 0x000098, "Member 'FTalkerInfo::_interaction_approach_message_code_name' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _monologue_radius) == 0x0000A0, "Member 'FTalkerInfo::_monologue_radius' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _show_goldentree_status) == 0x0000A4, "Member 'FTalkerInfo::_show_goldentree_status' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _talker_idle) == 0x0000A8, "Member 'FTalkerInfo::_talker_idle' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _talker_idle_sub) == 0x0000B0, "Member 'FTalkerInfo::_talker_idle_sub' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _dialog_idle) == 0x0000C0, "Member 'FTalkerInfo::_dialog_idle' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _enable_dialog_rotate) == 0x0000C8, "Member 'FTalkerInfo::_enable_dialog_rotate' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _min_turn_angle) == 0x0000CC, "Member 'FTalkerInfo::_min_turn_angle' has a wrong offset!");
static_assert(offsetof(FTalkerInfo, _dialog_radius) == 0x0000D0, "Member 'FTalkerInfo::_dialog_radius' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.SpotTalkerMatchingInfo
// 0x0010 (0x0038 - 0x0028)
struct FSpotTalkerMatchingInfo final : public FContentInfoBase
{
public:
	class FName                                   _spot_id;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _talker_code_name;                                 // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpotTalkerMatchingInfo) == 0x000008, "Wrong alignment on FSpotTalkerMatchingInfo");
static_assert(sizeof(FSpotTalkerMatchingInfo) == 0x000038, "Wrong size on FSpotTalkerMatchingInfo");
static_assert(offsetof(FSpotTalkerMatchingInfo, _spot_id) == 0x000028, "Member 'FSpotTalkerMatchingInfo::_spot_id' has a wrong offset!");
static_assert(offsetof(FSpotTalkerMatchingInfo, _talker_code_name) == 0x000030, "Member 'FSpotTalkerMatchingInfo::_talker_code_name' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.DialogQuestInfoDB
// 0x00E8 (0x0110 - 0x0028)
struct FDialogQuestInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FDialogInfo>                    _Dialog_array;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x50];                                      // 0x0038(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTalkerInfo>                    _Talker_array;                                     // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x50];                                      // 0x0098(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSpotTalkerMatchingInfo>        _SpotTalkerMatching_array;                         // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0100(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogQuestInfoDB) == 0x000008, "Wrong alignment on FDialogQuestInfoDB");
static_assert(sizeof(FDialogQuestInfoDB) == 0x000110, "Wrong size on FDialogQuestInfoDB");
static_assert(offsetof(FDialogQuestInfoDB, _Dialog_array) == 0x000028, "Member 'FDialogQuestInfoDB::_Dialog_array' has a wrong offset!");
static_assert(offsetof(FDialogQuestInfoDB, _Talker_array) == 0x000088, "Member 'FDialogQuestInfoDB::_Talker_array' has a wrong offset!");
static_assert(offsetof(FDialogQuestInfoDB, _SpotTalkerMatching_array) == 0x0000E8, "Member 'FDialogQuestInfoDB::_SpotTalkerMatching_array' has a wrong offset!");
static_assert(offsetof(FDialogQuestInfoDB, _version) == 0x0000F8, "Member 'FDialogQuestInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FDialogQuestInfoDB, _comment) == 0x000100, "Member 'FDialogQuestInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.RecollectionInfo
// 0x0060 (0x0088 - 0x0028)
struct FRecollectionInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELRecollectionCategory                        _category;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _index;                                            // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_name;                                  // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_tooltip_1;                             // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_tooltip_2;                             // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_name_cn;                               // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_tooltip_1_cn;                          // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_tooltip_2_cn;                          // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _asset_table_code_name;                            // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecollectionInfo) == 0x000008, "Wrong alignment on FRecollectionInfo");
static_assert(sizeof(FRecollectionInfo) == 0x000088, "Wrong size on FRecollectionInfo");
static_assert(offsetof(FRecollectionInfo, _code_name) == 0x000028, "Member 'FRecollectionInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FRecollectionInfo, _category) == 0x000030, "Member 'FRecollectionInfo::_category' has a wrong offset!");
static_assert(offsetof(FRecollectionInfo, _index) == 0x000034, "Member 'FRecollectionInfo::_index' has a wrong offset!");
static_assert(offsetof(FRecollectionInfo, _local_text_name) == 0x000038, "Member 'FRecollectionInfo::_local_text_name' has a wrong offset!");
static_assert(offsetof(FRecollectionInfo, _local_text_tooltip_1) == 0x000048, "Member 'FRecollectionInfo::_local_text_tooltip_1' has a wrong offset!");
static_assert(offsetof(FRecollectionInfo, _local_text_tooltip_2) == 0x000058, "Member 'FRecollectionInfo::_local_text_tooltip_2' has a wrong offset!");
static_assert(offsetof(FRecollectionInfo, _local_text_name_cn) == 0x000068, "Member 'FRecollectionInfo::_local_text_name_cn' has a wrong offset!");
static_assert(offsetof(FRecollectionInfo, _local_text_tooltip_1_cn) == 0x000070, "Member 'FRecollectionInfo::_local_text_tooltip_1_cn' has a wrong offset!");
static_assert(offsetof(FRecollectionInfo, _local_text_tooltip_2_cn) == 0x000078, "Member 'FRecollectionInfo::_local_text_tooltip_2_cn' has a wrong offset!");
static_assert(offsetof(FRecollectionInfo, _asset_table_code_name) == 0x000080, "Member 'FRecollectionInfo::_asset_table_code_name' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.RecollectionInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FRecollectionInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRecollectionInfo>              _Recollection_array;                               // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecollectionInfoDB) == 0x000008, "Wrong alignment on FRecollectionInfoDB");
static_assert(sizeof(FRecollectionInfoDB) == 0x0000A0, "Wrong size on FRecollectionInfoDB");
static_assert(offsetof(FRecollectionInfoDB, _Recollection_array) == 0x000078, "Member 'FRecollectionInfoDB::_Recollection_array' has a wrong offset!");
static_assert(offsetof(FRecollectionInfoDB, _version) == 0x000088, "Member 'FRecollectionInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FRecollectionInfoDB, _comment) == 0x000090, "Member 'FRecollectionInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.SpotTalkerMatchingInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSpotTalkerMatchingInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpotTalkerMatchingInfoPtr) == 0x000008, "Wrong alignment on FSpotTalkerMatchingInfoPtr");
static_assert(sizeof(FSpotTalkerMatchingInfoPtr) == 0x000008, "Wrong size on FSpotTalkerMatchingInfoPtr");

// ScriptStruct ProjectPContentInfo.MovieResourceInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FMovieResourceInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieResourceInfoPtr) == 0x000008, "Wrong alignment on FMovieResourceInfoPtr");
static_assert(sizeof(FMovieResourceInfoPtr) == 0x000008, "Wrong size on FMovieResourceInfoPtr");

// ScriptStruct ProjectPContentInfo.TalkerInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FTalkerInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTalkerInfoPtr) == 0x000008, "Wrong alignment on FTalkerInfoPtr");
static_assert(sizeof(FTalkerInfoPtr) == 0x000008, "Wrong size on FTalkerInfoPtr");

// ScriptStruct ProjectPContentInfo.WorldRuleInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FWorldRuleInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWorldRuleInfoPtr) == 0x000008, "Wrong alignment on FWorldRuleInfoPtr");
static_assert(sizeof(FWorldRuleInfoPtr) == 0x000008, "Wrong size on FWorldRuleInfoPtr");

// ScriptStruct ProjectPContentInfo.TalkerQuestInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FTalkerQuestInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTalkerQuestInfoPtr) == 0x000008, "Wrong alignment on FTalkerQuestInfoPtr");
static_assert(sizeof(FTalkerQuestInfoPtr) == 0x000008, "Wrong size on FTalkerQuestInfoPtr");

// ScriptStruct ProjectPContentInfo.PCLocomotionListInfo
// 0x0018 (0x0040 - 0x0028)
struct FPCLocomotionListInfo final : public FContentInfoBase
{
public:
	class FName                                   _machine;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _anim_state;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _override_anim_name;                               // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPCLocomotionListInfo) == 0x000008, "Wrong alignment on FPCLocomotionListInfo");
static_assert(sizeof(FPCLocomotionListInfo) == 0x000040, "Wrong size on FPCLocomotionListInfo");
static_assert(offsetof(FPCLocomotionListInfo, _machine) == 0x000028, "Member 'FPCLocomotionListInfo::_machine' has a wrong offset!");
static_assert(offsetof(FPCLocomotionListInfo, _anim_state) == 0x000030, "Member 'FPCLocomotionListInfo::_anim_state' has a wrong offset!");
static_assert(offsetof(FPCLocomotionListInfo, _override_anim_name) == 0x000038, "Member 'FPCLocomotionListInfo::_override_anim_name' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.NPCLocomotionListInfo
// 0x0018 (0x0040 - 0x0028)
struct FNPCLocomotionListInfo final : public FContentInfoBase
{
public:
	class FName                                   _machine;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _anim_state;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _override_anim_name;                               // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNPCLocomotionListInfo) == 0x000008, "Wrong alignment on FNPCLocomotionListInfo");
static_assert(sizeof(FNPCLocomotionListInfo) == 0x000040, "Wrong size on FNPCLocomotionListInfo");
static_assert(offsetof(FNPCLocomotionListInfo, _machine) == 0x000028, "Member 'FNPCLocomotionListInfo::_machine' has a wrong offset!");
static_assert(offsetof(FNPCLocomotionListInfo, _anim_state) == 0x000030, "Member 'FNPCLocomotionListInfo::_anim_state' has a wrong offset!");
static_assert(offsetof(FNPCLocomotionListInfo, _override_anim_name) == 0x000038, "Member 'FNPCLocomotionListInfo::_override_anim_name' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.LocomotionListInfoDB
// 0x0038 (0x0060 - 0x0028)
struct FLocomotionListInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FPCLocomotionListInfo>          _PCLocomotionList_array;                           // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FNPCLocomotionListInfo>         _NPCLocomotionList_array;                          // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocomotionListInfoDB) == 0x000008, "Wrong alignment on FLocomotionListInfoDB");
static_assert(sizeof(FLocomotionListInfoDB) == 0x000060, "Wrong size on FLocomotionListInfoDB");
static_assert(offsetof(FLocomotionListInfoDB, _PCLocomotionList_array) == 0x000028, "Member 'FLocomotionListInfoDB::_PCLocomotionList_array' has a wrong offset!");
static_assert(offsetof(FLocomotionListInfoDB, _NPCLocomotionList_array) == 0x000038, "Member 'FLocomotionListInfoDB::_NPCLocomotionList_array' has a wrong offset!");
static_assert(offsetof(FLocomotionListInfoDB, _version) == 0x000048, "Member 'FLocomotionListInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FLocomotionListInfoDB, _comment) == 0x000050, "Member 'FLocomotionListInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.TalkerQuestInfo
// 0x0008 (0x0030 - 0x0028)
struct FTalkerQuestInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTalkerQuestInfo) == 0x000008, "Wrong alignment on FTalkerQuestInfo");
static_assert(sizeof(FTalkerQuestInfo) == 0x000030, "Wrong size on FTalkerQuestInfo");
static_assert(offsetof(FTalkerQuestInfo, _code_name) == 0x000028, "Member 'FTalkerQuestInfo::_code_name' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.WeatherInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FWeatherInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeatherInfoPtr) == 0x000008, "Wrong alignment on FWeatherInfoPtr");
static_assert(sizeof(FWeatherInfoPtr) == 0x000008, "Wrong size on FWeatherInfoPtr");

// ScriptStruct ProjectPContentInfo.DieMotionGroupInfo
// 0x0018 (0x0040 - 0x0028)
struct FDieMotionGroupInfo final : public FContentInfoBase
{
public:
	class FName                                   _die_motion_group;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _play_common_action_montage_code_name;             // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _chosen_probability;                               // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDieMotionGroupInfo) == 0x000008, "Wrong alignment on FDieMotionGroupInfo");
static_assert(sizeof(FDieMotionGroupInfo) == 0x000040, "Wrong size on FDieMotionGroupInfo");
static_assert(offsetof(FDieMotionGroupInfo, _die_motion_group) == 0x000028, "Member 'FDieMotionGroupInfo::_die_motion_group' has a wrong offset!");
static_assert(offsetof(FDieMotionGroupInfo, _play_common_action_montage_code_name) == 0x000030, "Member 'FDieMotionGroupInfo::_play_common_action_montage_code_name' has a wrong offset!");
static_assert(offsetof(FDieMotionGroupInfo, _chosen_probability) == 0x000038, "Member 'FDieMotionGroupInfo::_chosen_probability' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.DieMotionGroupInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FDieMotionGroupInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FDieMotionGroupInfo>            _DieMotionGroup_array;                             // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDieMotionGroupInfoDB) == 0x000008, "Wrong alignment on FDieMotionGroupInfoDB");
static_assert(sizeof(FDieMotionGroupInfoDB) == 0x000050, "Wrong size on FDieMotionGroupInfoDB");
static_assert(offsetof(FDieMotionGroupInfoDB, _DieMotionGroup_array) == 0x000028, "Member 'FDieMotionGroupInfoDB::_DieMotionGroup_array' has a wrong offset!");
static_assert(offsetof(FDieMotionGroupInfoDB, _version) == 0x000038, "Member 'FDieMotionGroupInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FDieMotionGroupInfoDB, _comment) == 0x000040, "Member 'FDieMotionGroupInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.LevelExpInfo
// 0x0018 (0x0040 - 0x0028)
struct FLevelExpInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _character_level;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _character_level_exp_amount;                       // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _dropsoul_natural_consume_amount;                  // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLevelExpInfo) == 0x000008, "Wrong alignment on FLevelExpInfo");
static_assert(sizeof(FLevelExpInfo) == 0x000040, "Wrong size on FLevelExpInfo");
static_assert(offsetof(FLevelExpInfo, _code_name) == 0x000028, "Member 'FLevelExpInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FLevelExpInfo, _character_level) == 0x000030, "Member 'FLevelExpInfo::_character_level' has a wrong offset!");
static_assert(offsetof(FLevelExpInfo, _character_level_exp_amount) == 0x000034, "Member 'FLevelExpInfo::_character_level_exp_amount' has a wrong offset!");
static_assert(offsetof(FLevelExpInfo, _dropsoul_natural_consume_amount) == 0x000038, "Member 'FLevelExpInfo::_dropsoul_natural_consume_amount' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.DieMotionGroupInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FDieMotionGroupInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDieMotionGroupInfoPtr) == 0x000008, "Wrong alignment on FDieMotionGroupInfoPtr");
static_assert(sizeof(FDieMotionGroupInfoPtr) == 0x000008, "Wrong size on FDieMotionGroupInfoPtr");

// ScriptStruct ProjectPContentInfo.ItemPartsInfo
// 0x0068 (0x0090 - 0x0028)
struct FItemPartsInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELItemPartsSlot                               _equip_slot;                                       // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELItemMaterial                                _material_type;                                    // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _physical_reduce;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_slash_reduce;                            // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_strike_reduce;                           // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_pierce_reduce;                           // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _fire_reduce;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _electric_reduce;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _acid_reduce;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _fire_debuff_resist;                               // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _electric_debuff_resist;                           // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _acid_debuff_resist;                               // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _curse_debuff_resist;                              // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _contamination_debuff_resist;                      // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _impact_debuff_resist;                             // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _break_debuff_resist;                              // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _tough;                                            // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _buildup_fire_reduction;                           // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _buildup_electric_reduction;                       // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _buildup_acid_reduction;                           // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _buildup_curse_reduction;                          // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _buildup_contamination_reduction;                  // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _buildup_impact_reduction;                         // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _buildup_break_reduction;                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemPartsInfo) == 0x000008, "Wrong alignment on FItemPartsInfo");
static_assert(sizeof(FItemPartsInfo) == 0x000090, "Wrong size on FItemPartsInfo");
static_assert(offsetof(FItemPartsInfo, _code_name) == 0x000028, "Member 'FItemPartsInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FItemPartsInfo, _equip_slot) == 0x000030, "Member 'FItemPartsInfo::_equip_slot' has a wrong offset!");
static_assert(offsetof(FItemPartsInfo, _material_type) == 0x000031, "Member 'FItemPartsInfo::_material_type' has a wrong offset!");
static_assert(offsetof(FItemPartsInfo, _physical_reduce) == 0x000034, "Member 'FItemPartsInfo::_physical_reduce' has a wrong offset!");
static_assert(offsetof(FItemPartsInfo, _physical_slash_reduce) == 0x000038, "Member 'FItemPartsInfo::_physical_slash_reduce' has a wrong offset!");
static_assert(offsetof(FItemPartsInfo, _physical_strike_reduce) == 0x00003C, "Member 'FItemPartsInfo::_physical_strike_reduce' has a wrong offset!");
static_assert(offsetof(FItemPartsInfo, _physical_pierce_reduce) == 0x000040, "Member 'FItemPartsInfo::_physical_pierce_reduce' has a wrong offset!");
static_assert(offsetof(FItemPartsInfo, _fire_reduce) == 0x000044, "Member 'FItemPartsInfo::_fire_reduce' has a wrong offset!");
static_assert(offsetof(FItemPartsInfo, _electric_reduce) == 0x000048, "Member 'FItemPartsInfo::_electric_reduce' has a wrong offset!");
static_assert(offsetof(FItemPartsInfo, _acid_reduce) == 0x00004C, "Member 'FItemPartsInfo::_acid_reduce' has a wrong offset!");
static_assert(offsetof(FItemPartsInfo, _fire_debuff_resist) == 0x000050, "Member 'FItemPartsInfo::_fire_debuff_resist' has a wrong offset!");
static_assert(offsetof(FItemPartsInfo, _electric_debuff_resist) == 0x000054, "Member 'FItemPartsInfo::_electric_debuff_resist' has a wrong offset!");
static_assert(offsetof(FItemPartsInfo, _acid_debuff_resist) == 0x000058, "Member 'FItemPartsInfo::_acid_debuff_resist' has a wrong offset!");
static_assert(offsetof(FItemPartsInfo, _curse_debuff_resist) == 0x00005C, "Member 'FItemPartsInfo::_curse_debuff_resist' has a wrong offset!");
static_assert(offsetof(FItemPartsInfo, _contamination_debuff_resist) == 0x000060, "Member 'FItemPartsInfo::_contamination_debuff_resist' has a wrong offset!");
static_assert(offsetof(FItemPartsInfo, _impact_debuff_resist) == 0x000064, "Member 'FItemPartsInfo::_impact_debuff_resist' has a wrong offset!");
static_assert(offsetof(FItemPartsInfo, _break_debuff_resist) == 0x000068, "Member 'FItemPartsInfo::_break_debuff_resist' has a wrong offset!");
static_assert(offsetof(FItemPartsInfo, _tough) == 0x00006C, "Member 'FItemPartsInfo::_tough' has a wrong offset!");
static_assert(offsetof(FItemPartsInfo, _buildup_fire_reduction) == 0x000070, "Member 'FItemPartsInfo::_buildup_fire_reduction' has a wrong offset!");
static_assert(offsetof(FItemPartsInfo, _buildup_electric_reduction) == 0x000074, "Member 'FItemPartsInfo::_buildup_electric_reduction' has a wrong offset!");
static_assert(offsetof(FItemPartsInfo, _buildup_acid_reduction) == 0x000078, "Member 'FItemPartsInfo::_buildup_acid_reduction' has a wrong offset!");
static_assert(offsetof(FItemPartsInfo, _buildup_curse_reduction) == 0x00007C, "Member 'FItemPartsInfo::_buildup_curse_reduction' has a wrong offset!");
static_assert(offsetof(FItemPartsInfo, _buildup_contamination_reduction) == 0x000080, "Member 'FItemPartsInfo::_buildup_contamination_reduction' has a wrong offset!");
static_assert(offsetof(FItemPartsInfo, _buildup_impact_reduction) == 0x000084, "Member 'FItemPartsInfo::_buildup_impact_reduction' has a wrong offset!");
static_assert(offsetof(FItemPartsInfo, _buildup_break_reduction) == 0x000088, "Member 'FItemPartsInfo::_buildup_break_reduction' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.DieMotionTransitionInfo
// 0x0040 (0x0068 - 0x0028)
struct FDieMotionTransitionInfo final : public FContentInfoBase
{
public:
	int32                                         _priority;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELDieCauseType                                _die_cause_type;                                   // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_allow_lie_dying;                               // 0x002D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSkillHitType                                _skill_hit_type;                                   // 0x002E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _npc_asset_table_code_name;                        // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _action_group_table_code_name;                     // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _npc_code_name;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELActionCategory                              _die_cause_action_category;                        // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELHitMotionType                               _die_cause_hit_action;                             // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPhysicalDamageType                          _die_cause_physical_damage_type;                   // 0x004A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELDieCauseHitDirection                        _die_cause_hit_direction;                          // 0x004B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELDieCauseElement                             _die_cause_element;                                // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELDieCauseFall                                _die_cause_fall;                                   // 0x004D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _current_action_class_code_name;                   // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _current_common_action_montage;                    // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _die_motion_group_code_name;                       // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDieMotionTransitionInfo) == 0x000008, "Wrong alignment on FDieMotionTransitionInfo");
static_assert(sizeof(FDieMotionTransitionInfo) == 0x000068, "Wrong size on FDieMotionTransitionInfo");
static_assert(offsetof(FDieMotionTransitionInfo, _priority) == 0x000028, "Member 'FDieMotionTransitionInfo::_priority' has a wrong offset!");
static_assert(offsetof(FDieMotionTransitionInfo, _die_cause_type) == 0x00002C, "Member 'FDieMotionTransitionInfo::_die_cause_type' has a wrong offset!");
static_assert(offsetof(FDieMotionTransitionInfo, _is_allow_lie_dying) == 0x00002D, "Member 'FDieMotionTransitionInfo::_is_allow_lie_dying' has a wrong offset!");
static_assert(offsetof(FDieMotionTransitionInfo, _skill_hit_type) == 0x00002E, "Member 'FDieMotionTransitionInfo::_skill_hit_type' has a wrong offset!");
static_assert(offsetof(FDieMotionTransitionInfo, _npc_asset_table_code_name) == 0x000030, "Member 'FDieMotionTransitionInfo::_npc_asset_table_code_name' has a wrong offset!");
static_assert(offsetof(FDieMotionTransitionInfo, _action_group_table_code_name) == 0x000038, "Member 'FDieMotionTransitionInfo::_action_group_table_code_name' has a wrong offset!");
static_assert(offsetof(FDieMotionTransitionInfo, _npc_code_name) == 0x000040, "Member 'FDieMotionTransitionInfo::_npc_code_name' has a wrong offset!");
static_assert(offsetof(FDieMotionTransitionInfo, _die_cause_action_category) == 0x000048, "Member 'FDieMotionTransitionInfo::_die_cause_action_category' has a wrong offset!");
static_assert(offsetof(FDieMotionTransitionInfo, _die_cause_hit_action) == 0x000049, "Member 'FDieMotionTransitionInfo::_die_cause_hit_action' has a wrong offset!");
static_assert(offsetof(FDieMotionTransitionInfo, _die_cause_physical_damage_type) == 0x00004A, "Member 'FDieMotionTransitionInfo::_die_cause_physical_damage_type' has a wrong offset!");
static_assert(offsetof(FDieMotionTransitionInfo, _die_cause_hit_direction) == 0x00004B, "Member 'FDieMotionTransitionInfo::_die_cause_hit_direction' has a wrong offset!");
static_assert(offsetof(FDieMotionTransitionInfo, _die_cause_element) == 0x00004C, "Member 'FDieMotionTransitionInfo::_die_cause_element' has a wrong offset!");
static_assert(offsetof(FDieMotionTransitionInfo, _die_cause_fall) == 0x00004D, "Member 'FDieMotionTransitionInfo::_die_cause_fall' has a wrong offset!");
static_assert(offsetof(FDieMotionTransitionInfo, _current_action_class_code_name) == 0x000050, "Member 'FDieMotionTransitionInfo::_current_action_class_code_name' has a wrong offset!");
static_assert(offsetof(FDieMotionTransitionInfo, _current_common_action_montage) == 0x000058, "Member 'FDieMotionTransitionInfo::_current_common_action_montage' has a wrong offset!");
static_assert(offsetof(FDieMotionTransitionInfo, _die_motion_group_code_name) == 0x000060, "Member 'FDieMotionTransitionInfo::_die_motion_group_code_name' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.DieMotionTransitionInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FDieMotionTransitionInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FDieMotionTransitionInfo>       _DieMotionTransition_array;                        // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDieMotionTransitionInfoDB) == 0x000008, "Wrong alignment on FDieMotionTransitionInfoDB");
static_assert(sizeof(FDieMotionTransitionInfoDB) == 0x000050, "Wrong size on FDieMotionTransitionInfoDB");
static_assert(offsetof(FDieMotionTransitionInfoDB, _DieMotionTransition_array) == 0x000028, "Member 'FDieMotionTransitionInfoDB::_DieMotionTransition_array' has a wrong offset!");
static_assert(offsetof(FDieMotionTransitionInfoDB, _version) == 0x000038, "Member 'FDieMotionTransitionInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FDieMotionTransitionInfoDB, _comment) == 0x000040, "Member 'FDieMotionTransitionInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.DieMotionTransitionInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FDieMotionTransitionInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDieMotionTransitionInfoPtr) == 0x000008, "Wrong alignment on FDieMotionTransitionInfoPtr");
static_assert(sizeof(FDieMotionTransitionInfoPtr) == 0x000008, "Wrong size on FDieMotionTransitionInfoPtr");

// ScriptStruct ProjectPContentInfo.DLCItemPackage
// 0x0010 (0x0038 - 0x0028)
struct FDLCItemPackage final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _count;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _print_order;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDLCItemPackage) == 0x000008, "Wrong alignment on FDLCItemPackage");
static_assert(sizeof(FDLCItemPackage) == 0x000038, "Wrong size on FDLCItemPackage");
static_assert(offsetof(FDLCItemPackage, _code_name) == 0x000028, "Member 'FDLCItemPackage::_code_name' has a wrong offset!");
static_assert(offsetof(FDLCItemPackage, _count) == 0x000030, "Member 'FDLCItemPackage::_count' has a wrong offset!");
static_assert(offsetof(FDLCItemPackage, _print_order) == 0x000034, "Member 'FDLCItemPackage::_print_order' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.DLCWeaponPackage
// 0x0018 (0x0040 - 0x0028)
struct FDLCWeaponPackage final : public FContentInfoBase
{
public:
	class FName                                   _handle_code_name;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _blade_code_name;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _print_order;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDLCWeaponPackage) == 0x000008, "Wrong alignment on FDLCWeaponPackage");
static_assert(sizeof(FDLCWeaponPackage) == 0x000040, "Wrong size on FDLCWeaponPackage");
static_assert(offsetof(FDLCWeaponPackage, _handle_code_name) == 0x000028, "Member 'FDLCWeaponPackage::_handle_code_name' has a wrong offset!");
static_assert(offsetof(FDLCWeaponPackage, _blade_code_name) == 0x000030, "Member 'FDLCWeaponPackage::_blade_code_name' has a wrong offset!");
static_assert(offsetof(FDLCWeaponPackage, _print_order) == 0x000038, "Member 'FDLCWeaponPackage::_print_order' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.DLCInfo
// 0x0070 (0x0098 - 0x0028)
struct FDLCInfo final : public FContentInfoBase
{
public:
	TArray<struct FDLCItemPackage>                _item_list_array;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FDLCWeaponPackage>              _weapon_list_array;                                // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FName                                   _code_name;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _steam_key;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _xbox_key;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _playstation_key;                                  // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_name;                                  // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_name_cn;                               // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDLCInfo) == 0x000008, "Wrong alignment on FDLCInfo");
static_assert(sizeof(FDLCInfo) == 0x000098, "Wrong size on FDLCInfo");
static_assert(offsetof(FDLCInfo, _item_list_array) == 0x000028, "Member 'FDLCInfo::_item_list_array' has a wrong offset!");
static_assert(offsetof(FDLCInfo, _weapon_list_array) == 0x000038, "Member 'FDLCInfo::_weapon_list_array' has a wrong offset!");
static_assert(offsetof(FDLCInfo, _code_name) == 0x000048, "Member 'FDLCInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FDLCInfo, _steam_key) == 0x000050, "Member 'FDLCInfo::_steam_key' has a wrong offset!");
static_assert(offsetof(FDLCInfo, _xbox_key) == 0x000060, "Member 'FDLCInfo::_xbox_key' has a wrong offset!");
static_assert(offsetof(FDLCInfo, _playstation_key) == 0x000070, "Member 'FDLCInfo::_playstation_key' has a wrong offset!");
static_assert(offsetof(FDLCInfo, _local_text_name) == 0x000080, "Member 'FDLCInfo::_local_text_name' has a wrong offset!");
static_assert(offsetof(FDLCInfo, _local_text_name_cn) == 0x000090, "Member 'FDLCInfo::_local_text_name_cn' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.DLCInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FDLCInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDLCInfo>                       _DLCInfo_array;                                    // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDLCInfoDB) == 0x000008, "Wrong alignment on FDLCInfoDB");
static_assert(sizeof(FDLCInfoDB) == 0x0000A0, "Wrong size on FDLCInfoDB");
static_assert(offsetof(FDLCInfoDB, _DLCInfo_array) == 0x000078, "Member 'FDLCInfoDB::_DLCInfo_array' has a wrong offset!");
static_assert(offsetof(FDLCInfoDB, _version) == 0x000088, "Member 'FDLCInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FDLCInfoDB, _comment) == 0x000090, "Member 'FDLCInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.NPCSkillStandbyInfo
// 0x0018 (0x0040 - 0x0028)
struct FNPCSkillStandbyInfo final : public FContentInfoBase
{
public:
	class FString                                 _skill_id;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _skill_rate;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNPCSkillStandbyInfo) == 0x000008, "Wrong alignment on FNPCSkillStandbyInfo");
static_assert(sizeof(FNPCSkillStandbyInfo) == 0x000040, "Wrong size on FNPCSkillStandbyInfo");
static_assert(offsetof(FNPCSkillStandbyInfo, _skill_id) == 0x000028, "Member 'FNPCSkillStandbyInfo::_skill_id' has a wrong offset!");
static_assert(offsetof(FNPCSkillStandbyInfo, _skill_rate) == 0x000038, "Member 'FNPCSkillStandbyInfo::_skill_rate' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.DLCInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FDLCInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDLCInfoPtr) == 0x000008, "Wrong alignment on FDLCInfoPtr");
static_assert(sizeof(FDLCInfoPtr) == 0x000008, "Wrong size on FDLCInfoPtr");

// ScriptStruct ProjectPContentInfo.DLCWeaponPackagePtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FDLCWeaponPackagePtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDLCWeaponPackagePtr) == 0x000008, "Wrong alignment on FDLCWeaponPackagePtr");
static_assert(sizeof(FDLCWeaponPackagePtr) == 0x000008, "Wrong size on FDLCWeaponPackagePtr");

// ScriptStruct ProjectPContentInfo.DLCItemPackagePtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FDLCItemPackagePtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDLCItemPackagePtr) == 0x000008, "Wrong alignment on FDLCItemPackagePtr");
static_assert(sizeof(FDLCItemPackagePtr) == 0x000008, "Wrong size on FDLCItemPackagePtr");

// ScriptStruct ProjectPContentInfo.ItemConsumeInfo
// 0x00E0 (0x0108 - 0x0028)
struct FItemConsumeInfo final : public FContentInfoBase
{
public:
	TArray<struct FActionStateType>               _restrict_action_state_array;                      // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FName                                   _code_name;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELItemComplexType                             _complex_type;                                     // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELItemComplexGroup                            _complex_group;                                    // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELItemUnitUseType                             _unit_use_type;                                    // 0x0042(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _use_skill_code_name;                              // 0x0044(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _item_mesh_socket;                                 // 0x004C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 _item_mesh;                                        // 0x0058(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _fx_socket;                                        // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_location_fx;                                   // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _fx_common_code_name;                              // 0x0094(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _unconsumable;                                     // 0x009C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _rechargeable;                                     // 0x009D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9E[0x2];                                       // 0x009E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _default_max_charge;                               // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _max_charge_limit;                                 // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _buff_code_name;                                   // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _pulse_recharged_abnormal_code_name;               // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _recall_to_torsion_coil;                           // 0x00B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _increase_wealth_amount;                           // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _stack_use;                                        // 0x00C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _projectile_code_name;                             // 0x00C4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_recovery_point;                         // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _require_weapon;                                   // 0x00D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _cancel_abnormal_code_name;                        // 0x00D4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _cancel_abnormal_group_name;                       // 0x00DC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _cancel_abnormal_debuildup_value;                  // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _force_use;                                        // 0x00E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _force_use_desc;                                   // 0x00EC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_toggle;                                        // 0x00F4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _keep_toggle_dead;                                 // 0x00F5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _keep_toggle_respawn;                              // 0x00F6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F7[0x1];                                       // 0x00F7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _slavearm_alter_item_match;                        // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _use_item_inventory_state;                         // 0x0100(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _require_helpmate_combat;                          // 0x0101(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELItemConsumeTargetType                       _target_type;                                      // 0x0102(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_103[0x5];                                      // 0x0103(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemConsumeInfo) == 0x000008, "Wrong alignment on FItemConsumeInfo");
static_assert(sizeof(FItemConsumeInfo) == 0x000108, "Wrong size on FItemConsumeInfo");
static_assert(offsetof(FItemConsumeInfo, _restrict_action_state_array) == 0x000028, "Member 'FItemConsumeInfo::_restrict_action_state_array' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _code_name) == 0x000038, "Member 'FItemConsumeInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _complex_type) == 0x000040, "Member 'FItemConsumeInfo::_complex_type' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _complex_group) == 0x000041, "Member 'FItemConsumeInfo::_complex_group' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _unit_use_type) == 0x000042, "Member 'FItemConsumeInfo::_unit_use_type' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _use_skill_code_name) == 0x000044, "Member 'FItemConsumeInfo::_use_skill_code_name' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _item_mesh_socket) == 0x00004C, "Member 'FItemConsumeInfo::_item_mesh_socket' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _item_mesh) == 0x000058, "Member 'FItemConsumeInfo::_item_mesh' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _fx_socket) == 0x000080, "Member 'FItemConsumeInfo::_fx_socket' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _is_location_fx) == 0x000090, "Member 'FItemConsumeInfo::_is_location_fx' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _fx_common_code_name) == 0x000094, "Member 'FItemConsumeInfo::_fx_common_code_name' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _unconsumable) == 0x00009C, "Member 'FItemConsumeInfo::_unconsumable' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _rechargeable) == 0x00009D, "Member 'FItemConsumeInfo::_rechargeable' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _default_max_charge) == 0x0000A0, "Member 'FItemConsumeInfo::_default_max_charge' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _max_charge_limit) == 0x0000A4, "Member 'FItemConsumeInfo::_max_charge_limit' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _buff_code_name) == 0x0000A8, "Member 'FItemConsumeInfo::_buff_code_name' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _pulse_recharged_abnormal_code_name) == 0x0000B0, "Member 'FItemConsumeInfo::_pulse_recharged_abnormal_code_name' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _recall_to_torsion_coil) == 0x0000B8, "Member 'FItemConsumeInfo::_recall_to_torsion_coil' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _increase_wealth_amount) == 0x0000BC, "Member 'FItemConsumeInfo::_increase_wealth_amount' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _stack_use) == 0x0000C0, "Member 'FItemConsumeInfo::_stack_use' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _projectile_code_name) == 0x0000C4, "Member 'FItemConsumeInfo::_projectile_code_name' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _sharpness_recovery_point) == 0x0000CC, "Member 'FItemConsumeInfo::_sharpness_recovery_point' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _require_weapon) == 0x0000D0, "Member 'FItemConsumeInfo::_require_weapon' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _cancel_abnormal_code_name) == 0x0000D4, "Member 'FItemConsumeInfo::_cancel_abnormal_code_name' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _cancel_abnormal_group_name) == 0x0000DC, "Member 'FItemConsumeInfo::_cancel_abnormal_group_name' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _cancel_abnormal_debuildup_value) == 0x0000E4, "Member 'FItemConsumeInfo::_cancel_abnormal_debuildup_value' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _force_use) == 0x0000E8, "Member 'FItemConsumeInfo::_force_use' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _force_use_desc) == 0x0000EC, "Member 'FItemConsumeInfo::_force_use_desc' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _is_toggle) == 0x0000F4, "Member 'FItemConsumeInfo::_is_toggle' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _keep_toggle_dead) == 0x0000F5, "Member 'FItemConsumeInfo::_keep_toggle_dead' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _keep_toggle_respawn) == 0x0000F6, "Member 'FItemConsumeInfo::_keep_toggle_respawn' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _slavearm_alter_item_match) == 0x0000F8, "Member 'FItemConsumeInfo::_slavearm_alter_item_match' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _use_item_inventory_state) == 0x000100, "Member 'FItemConsumeInfo::_use_item_inventory_state' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _require_helpmate_combat) == 0x000101, "Member 'FItemConsumeInfo::_require_helpmate_combat' has a wrong offset!");
static_assert(offsetof(FItemConsumeInfo, _target_type) == 0x000102, "Member 'FItemConsumeInfo::_target_type' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.DynamicDamageVolumeInfo
// 0x0078 (0x00A0 - 0x0028)
struct FDynamicDamageVolumeInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   _blueprint_class;                                  // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _duration;                                         // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _volume_radius;                                    // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _skill_hit_code_name;                              // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _skill_hit_apply_tick_time;                        // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_attack;                                  // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPhysicalDamageType                          _physical_attack_subtype;                          // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _fire_attack;                                      // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _electric_attack;                                  // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _acid_attack;                                      // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _destruction_power;                                // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _abnormal_state_code_name;                         // 0x0084(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _abnormal_state_build_up_attack;                   // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _tough_recovery_delay_time;                        // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _abnormalState_penalty_base;                       // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _build_up_recover_inc_base;                        // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _NGP_Detail_index;                                 // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDynamicDamageVolumeInfo) == 0x000008, "Wrong alignment on FDynamicDamageVolumeInfo");
static_assert(sizeof(FDynamicDamageVolumeInfo) == 0x0000A0, "Wrong size on FDynamicDamageVolumeInfo");
static_assert(offsetof(FDynamicDamageVolumeInfo, _code_name) == 0x000028, "Member 'FDynamicDamageVolumeInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FDynamicDamageVolumeInfo, _blueprint_class) == 0x000030, "Member 'FDynamicDamageVolumeInfo::_blueprint_class' has a wrong offset!");
static_assert(offsetof(FDynamicDamageVolumeInfo, _duration) == 0x000058, "Member 'FDynamicDamageVolumeInfo::_duration' has a wrong offset!");
static_assert(offsetof(FDynamicDamageVolumeInfo, _volume_radius) == 0x00005C, "Member 'FDynamicDamageVolumeInfo::_volume_radius' has a wrong offset!");
static_assert(offsetof(FDynamicDamageVolumeInfo, _skill_hit_code_name) == 0x000060, "Member 'FDynamicDamageVolumeInfo::_skill_hit_code_name' has a wrong offset!");
static_assert(offsetof(FDynamicDamageVolumeInfo, _skill_hit_apply_tick_time) == 0x000068, "Member 'FDynamicDamageVolumeInfo::_skill_hit_apply_tick_time' has a wrong offset!");
static_assert(offsetof(FDynamicDamageVolumeInfo, _physical_attack) == 0x00006C, "Member 'FDynamicDamageVolumeInfo::_physical_attack' has a wrong offset!");
static_assert(offsetof(FDynamicDamageVolumeInfo, _physical_attack_subtype) == 0x000070, "Member 'FDynamicDamageVolumeInfo::_physical_attack_subtype' has a wrong offset!");
static_assert(offsetof(FDynamicDamageVolumeInfo, _fire_attack) == 0x000074, "Member 'FDynamicDamageVolumeInfo::_fire_attack' has a wrong offset!");
static_assert(offsetof(FDynamicDamageVolumeInfo, _electric_attack) == 0x000078, "Member 'FDynamicDamageVolumeInfo::_electric_attack' has a wrong offset!");
static_assert(offsetof(FDynamicDamageVolumeInfo, _acid_attack) == 0x00007C, "Member 'FDynamicDamageVolumeInfo::_acid_attack' has a wrong offset!");
static_assert(offsetof(FDynamicDamageVolumeInfo, _destruction_power) == 0x000080, "Member 'FDynamicDamageVolumeInfo::_destruction_power' has a wrong offset!");
static_assert(offsetof(FDynamicDamageVolumeInfo, _abnormal_state_code_name) == 0x000084, "Member 'FDynamicDamageVolumeInfo::_abnormal_state_code_name' has a wrong offset!");
static_assert(offsetof(FDynamicDamageVolumeInfo, _abnormal_state_build_up_attack) == 0x00008C, "Member 'FDynamicDamageVolumeInfo::_abnormal_state_build_up_attack' has a wrong offset!");
static_assert(offsetof(FDynamicDamageVolumeInfo, _tough_recovery_delay_time) == 0x000090, "Member 'FDynamicDamageVolumeInfo::_tough_recovery_delay_time' has a wrong offset!");
static_assert(offsetof(FDynamicDamageVolumeInfo, _abnormalState_penalty_base) == 0x000094, "Member 'FDynamicDamageVolumeInfo::_abnormalState_penalty_base' has a wrong offset!");
static_assert(offsetof(FDynamicDamageVolumeInfo, _build_up_recover_inc_base) == 0x000098, "Member 'FDynamicDamageVolumeInfo::_build_up_recover_inc_base' has a wrong offset!");
static_assert(offsetof(FDynamicDamageVolumeInfo, _NGP_Detail_index) == 0x00009C, "Member 'FDynamicDamageVolumeInfo::_NGP_Detail_index' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.DynamicDamageVolumeInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FDynamicDamageVolumeInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDynamicDamageVolumeInfo>       _DynamicDamageVolumeInfo_array;                    // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDynamicDamageVolumeInfoDB) == 0x000008, "Wrong alignment on FDynamicDamageVolumeInfoDB");
static_assert(sizeof(FDynamicDamageVolumeInfoDB) == 0x0000A0, "Wrong size on FDynamicDamageVolumeInfoDB");
static_assert(offsetof(FDynamicDamageVolumeInfoDB, _DynamicDamageVolumeInfo_array) == 0x000078, "Member 'FDynamicDamageVolumeInfoDB::_DynamicDamageVolumeInfo_array' has a wrong offset!");
static_assert(offsetof(FDynamicDamageVolumeInfoDB, _version) == 0x000088, "Member 'FDynamicDamageVolumeInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FDynamicDamageVolumeInfoDB, _comment) == 0x000090, "Member 'FDynamicDamageVolumeInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.NPCInfo
// 0x0298 (0x02C0 - 0x0028)
struct FNPCInfo final : public FContentInfoBase
{
public:
	TArray<struct FNPCSkillStandbyInfo>           _skill_list_array;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	struct FFloatRangeValue                       _groggy_maintain_time;                             // 0x0038(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FFloatRangeValue                       _global_cooltime;                                  // 0x0068(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	class FName                                   _code_name;                                        // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_name;                                  // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_name_cn;                               // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   _npc_bp;                                           // 0x00B8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _npc_asset_table_code_name;                        // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _common_action_path_code_name;                     // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _locomotion_action_path_code_name;                 // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _skill_action_path_code_name;                      // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   _ai_statemachine;                                  // 0x0100(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENPCGradeType                                 _grade;                                            // 0x0128(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFactionType                                  _faction;                                          // 0x0129(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _respawn_enable;                                   // 0x012A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12B[0x1];                                      // 0x012B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _immune_code_name;                                 // 0x012C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAlwaysGuardDirection                        _always_guard_direction;                           // 0x0134(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _always_guard_angle;                               // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _always_guard_attach_slot;                         // 0x013C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _always_guard_box_x;                               // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _always_guard_box_y;                               // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _always_guard_box_z;                               // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _walk_speed_peace;                                 // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _walk_speed_warning;                               // 0x0154(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _walk_speed_combat;                                // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _run_speed_peace;                                  // 0x015C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _run_speed_warning;                                // 0x0160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _run_speed_combat;                                 // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _rotate_angle;                                     // 0x0168(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _rotate_cooltime;                                  // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _strafe_move_dist;                                 // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _arrive_check_range;                               // 0x0174(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _warning_detect_range;                             // 0x0178(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _sight_distance_peace;                             // 0x017C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _sight_distance_warning;                           // 0x0180(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _sight_distance_combat;                            // 0x0184(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _sight_height;                                     // 0x0188(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _sight_angle;                                      // 0x018C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _return_distance;                                  // 0x0190(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _pursuit_distance;                                 // 0x0194(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELNpcDisappearType                            _npc_disappear_type;                               // 0x0198(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199[0x3];                                      // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _skill_hit_code_name_destroyed;                    // 0x019C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELToughMotionType                             _tough_motion_type;                                // 0x01A4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELFatalHitType                                _fatal_hit_type;                                   // 0x01A5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELFatalEnableCondType                         _fatal_enable_cond_type;                           // 0x01A6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A7[0x1];                                      // 0x01A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _fatal_behit_enable_cooltime;                      // 0x01A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _groggy_enable_time;                               // 0x01AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _groggy_enable_reset_restore;                      // 0x01B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELGroggyType                                  _groggy_type_front;                                // 0x01B4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELGroggyType                                  _groggy_type_side;                                 // 0x01B5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELGroggyType                                  _groggy_type_back;                                 // 0x01B6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B7[0x1];                                      // 0x01B7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _groggy_fx_scale;                                  // 0x01B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _groggy_snd_scale;                                 // 0x01BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _perfect_guard_groggy_damage;                      // 0x01C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _npc_front_groggy_point_ratio;                     // 0x01C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _npc_side_groggy_point_ratio;                      // 0x01C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _npc_back_groggy_point_ratio;                      // 0x01CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_monster_damage_ratio_strike;            // 0x01D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_monster_damage_ratio_slash;             // 0x01D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_monster_damage_ratio_pierce;            // 0x01D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _hit_repulse_level_strike;                         // 0x01DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _hit_repulse_level_slash;                          // 0x01E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _hit_repulse_level_pierce;                         // 0x01E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELNpcFXSizeType                               _fx_size;                                          // 0x01E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E9[0x3];                                      // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _guard_duration_ratio;                             // 0x01EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _sensitive_range;                                  // 0x01F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _sensitive_speed;                                  // 0x01F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _sensitive_time;                                   // 0x01F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _helpsignal_range;                                 // 0x01FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _helpsignal_enable;                                // 0x0200(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELNpcTargetDecisionType                       _target_decision_type;                             // 0x0201(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_202[0x2];                                      // 0x0202(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _targetdecision_time_min;                          // 0x0204(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _targetdecision_time_max;                          // 0x0208(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _explosive_kill_possible;                          // 0x020C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELNPCType                                     _npc_kind;                                         // 0x020D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E[0x2];                                      // 0x020E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _npc_scale;                                        // 0x0210(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _roam_range;                                       // 0x0214(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _use_physics_hit;                                  // 0x0218(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _spawnIdle_code_name;                              // 0x021C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           _init_abnormal_code_name;                          // 0x0228(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FName                                   _swap_npc_code_name;                               // 0x0238(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _weapon_code_name_r;                               // 0x0240(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _weapon_code_name_l;                               // 0x0248(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _weapon_code_name_ex1;                             // 0x0250(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _weapon_code_name_ex2;                             // 0x0258(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _weapon_code_name_ex3;                             // 0x0260(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           _preload_monster_weapon_list;                      // 0x0268(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	ELWeaponBreakMotionType                       _weapon_break_motion_type;                         // 0x0278(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _die_immediately_hide;                             // 0x0279(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27A[0x2];                                      // 0x027A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _die_immediately_hide_delaytime;                   // 0x027C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELGrapplegunHitType                           _grapplegun_hit_type;                              // 0x0280(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELHPUIType                                    _hp_ui_type;                                       // 0x0281(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELHeadTagVisibleType                          _headtag_visible_type;                             // 0x0282(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_283[0x5];                                      // 0x0283(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           _spawn_npc_code_name;                              // 0x0288(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	float                                         _targetdecision_range;                             // 0x0298(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _play_bgm;                                         // 0x029C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _dead_helpsignal;                                  // 0x029D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _move_height_check;                                // 0x029E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSwingPowerType                              _hit_fx_level;                                     // 0x029F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _dont_use_check_ally_num;                          // 0x02A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _except_check_ally_num;                            // 0x02A1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A2[0x2];                                      // 0x02A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _ticket_move_dist;                                 // 0x02A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _check_skill_use_count;                            // 0x02A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _check_target_near_ally_num;                       // 0x02AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAdditiveHitType                             _additive_hit_type;                                // 0x02B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1[0x3];                                      // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _NGP_Detail_index;                                 // 0x02B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _ngp_min_groggy_maintaintime;                      // 0x02B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNPCInfo) == 0x000008, "Wrong alignment on FNPCInfo");
static_assert(sizeof(FNPCInfo) == 0x0002C0, "Wrong size on FNPCInfo");
static_assert(offsetof(FNPCInfo, _skill_list_array) == 0x000028, "Member 'FNPCInfo::_skill_list_array' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _groggy_maintain_time) == 0x000038, "Member 'FNPCInfo::_groggy_maintain_time' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _global_cooltime) == 0x000068, "Member 'FNPCInfo::_global_cooltime' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _code_name) == 0x000098, "Member 'FNPCInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _local_text_name) == 0x0000A0, "Member 'FNPCInfo::_local_text_name' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _local_text_name_cn) == 0x0000B0, "Member 'FNPCInfo::_local_text_name_cn' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _npc_bp) == 0x0000B8, "Member 'FNPCInfo::_npc_bp' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _npc_asset_table_code_name) == 0x0000E0, "Member 'FNPCInfo::_npc_asset_table_code_name' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _common_action_path_code_name) == 0x0000E8, "Member 'FNPCInfo::_common_action_path_code_name' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _locomotion_action_path_code_name) == 0x0000F0, "Member 'FNPCInfo::_locomotion_action_path_code_name' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _skill_action_path_code_name) == 0x0000F8, "Member 'FNPCInfo::_skill_action_path_code_name' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _ai_statemachine) == 0x000100, "Member 'FNPCInfo::_ai_statemachine' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _grade) == 0x000128, "Member 'FNPCInfo::_grade' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _faction) == 0x000129, "Member 'FNPCInfo::_faction' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _respawn_enable) == 0x00012A, "Member 'FNPCInfo::_respawn_enable' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _immune_code_name) == 0x00012C, "Member 'FNPCInfo::_immune_code_name' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _always_guard_direction) == 0x000134, "Member 'FNPCInfo::_always_guard_direction' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _always_guard_angle) == 0x000138, "Member 'FNPCInfo::_always_guard_angle' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _always_guard_attach_slot) == 0x00013C, "Member 'FNPCInfo::_always_guard_attach_slot' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _always_guard_box_x) == 0x000144, "Member 'FNPCInfo::_always_guard_box_x' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _always_guard_box_y) == 0x000148, "Member 'FNPCInfo::_always_guard_box_y' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _always_guard_box_z) == 0x00014C, "Member 'FNPCInfo::_always_guard_box_z' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _walk_speed_peace) == 0x000150, "Member 'FNPCInfo::_walk_speed_peace' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _walk_speed_warning) == 0x000154, "Member 'FNPCInfo::_walk_speed_warning' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _walk_speed_combat) == 0x000158, "Member 'FNPCInfo::_walk_speed_combat' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _run_speed_peace) == 0x00015C, "Member 'FNPCInfo::_run_speed_peace' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _run_speed_warning) == 0x000160, "Member 'FNPCInfo::_run_speed_warning' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _run_speed_combat) == 0x000164, "Member 'FNPCInfo::_run_speed_combat' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _rotate_angle) == 0x000168, "Member 'FNPCInfo::_rotate_angle' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _rotate_cooltime) == 0x00016C, "Member 'FNPCInfo::_rotate_cooltime' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _strafe_move_dist) == 0x000170, "Member 'FNPCInfo::_strafe_move_dist' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _arrive_check_range) == 0x000174, "Member 'FNPCInfo::_arrive_check_range' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _warning_detect_range) == 0x000178, "Member 'FNPCInfo::_warning_detect_range' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _sight_distance_peace) == 0x00017C, "Member 'FNPCInfo::_sight_distance_peace' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _sight_distance_warning) == 0x000180, "Member 'FNPCInfo::_sight_distance_warning' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _sight_distance_combat) == 0x000184, "Member 'FNPCInfo::_sight_distance_combat' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _sight_height) == 0x000188, "Member 'FNPCInfo::_sight_height' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _sight_angle) == 0x00018C, "Member 'FNPCInfo::_sight_angle' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _return_distance) == 0x000190, "Member 'FNPCInfo::_return_distance' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _pursuit_distance) == 0x000194, "Member 'FNPCInfo::_pursuit_distance' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _npc_disappear_type) == 0x000198, "Member 'FNPCInfo::_npc_disappear_type' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _skill_hit_code_name_destroyed) == 0x00019C, "Member 'FNPCInfo::_skill_hit_code_name_destroyed' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _tough_motion_type) == 0x0001A4, "Member 'FNPCInfo::_tough_motion_type' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _fatal_hit_type) == 0x0001A5, "Member 'FNPCInfo::_fatal_hit_type' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _fatal_enable_cond_type) == 0x0001A6, "Member 'FNPCInfo::_fatal_enable_cond_type' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _fatal_behit_enable_cooltime) == 0x0001A8, "Member 'FNPCInfo::_fatal_behit_enable_cooltime' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _groggy_enable_time) == 0x0001AC, "Member 'FNPCInfo::_groggy_enable_time' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _groggy_enable_reset_restore) == 0x0001B0, "Member 'FNPCInfo::_groggy_enable_reset_restore' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _groggy_type_front) == 0x0001B4, "Member 'FNPCInfo::_groggy_type_front' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _groggy_type_side) == 0x0001B5, "Member 'FNPCInfo::_groggy_type_side' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _groggy_type_back) == 0x0001B6, "Member 'FNPCInfo::_groggy_type_back' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _groggy_fx_scale) == 0x0001B8, "Member 'FNPCInfo::_groggy_fx_scale' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _groggy_snd_scale) == 0x0001BC, "Member 'FNPCInfo::_groggy_snd_scale' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _perfect_guard_groggy_damage) == 0x0001C0, "Member 'FNPCInfo::_perfect_guard_groggy_damage' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _npc_front_groggy_point_ratio) == 0x0001C4, "Member 'FNPCInfo::_npc_front_groggy_point_ratio' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _npc_side_groggy_point_ratio) == 0x0001C8, "Member 'FNPCInfo::_npc_side_groggy_point_ratio' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _npc_back_groggy_point_ratio) == 0x0001CC, "Member 'FNPCInfo::_npc_back_groggy_point_ratio' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _sharpness_monster_damage_ratio_strike) == 0x0001D0, "Member 'FNPCInfo::_sharpness_monster_damage_ratio_strike' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _sharpness_monster_damage_ratio_slash) == 0x0001D4, "Member 'FNPCInfo::_sharpness_monster_damage_ratio_slash' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _sharpness_monster_damage_ratio_pierce) == 0x0001D8, "Member 'FNPCInfo::_sharpness_monster_damage_ratio_pierce' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _hit_repulse_level_strike) == 0x0001DC, "Member 'FNPCInfo::_hit_repulse_level_strike' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _hit_repulse_level_slash) == 0x0001E0, "Member 'FNPCInfo::_hit_repulse_level_slash' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _hit_repulse_level_pierce) == 0x0001E4, "Member 'FNPCInfo::_hit_repulse_level_pierce' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _fx_size) == 0x0001E8, "Member 'FNPCInfo::_fx_size' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _guard_duration_ratio) == 0x0001EC, "Member 'FNPCInfo::_guard_duration_ratio' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _sensitive_range) == 0x0001F0, "Member 'FNPCInfo::_sensitive_range' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _sensitive_speed) == 0x0001F4, "Member 'FNPCInfo::_sensitive_speed' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _sensitive_time) == 0x0001F8, "Member 'FNPCInfo::_sensitive_time' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _helpsignal_range) == 0x0001FC, "Member 'FNPCInfo::_helpsignal_range' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _helpsignal_enable) == 0x000200, "Member 'FNPCInfo::_helpsignal_enable' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _target_decision_type) == 0x000201, "Member 'FNPCInfo::_target_decision_type' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _targetdecision_time_min) == 0x000204, "Member 'FNPCInfo::_targetdecision_time_min' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _targetdecision_time_max) == 0x000208, "Member 'FNPCInfo::_targetdecision_time_max' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _explosive_kill_possible) == 0x00020C, "Member 'FNPCInfo::_explosive_kill_possible' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _npc_kind) == 0x00020D, "Member 'FNPCInfo::_npc_kind' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _npc_scale) == 0x000210, "Member 'FNPCInfo::_npc_scale' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _roam_range) == 0x000214, "Member 'FNPCInfo::_roam_range' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _use_physics_hit) == 0x000218, "Member 'FNPCInfo::_use_physics_hit' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _spawnIdle_code_name) == 0x00021C, "Member 'FNPCInfo::_spawnIdle_code_name' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _init_abnormal_code_name) == 0x000228, "Member 'FNPCInfo::_init_abnormal_code_name' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _swap_npc_code_name) == 0x000238, "Member 'FNPCInfo::_swap_npc_code_name' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _weapon_code_name_r) == 0x000240, "Member 'FNPCInfo::_weapon_code_name_r' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _weapon_code_name_l) == 0x000248, "Member 'FNPCInfo::_weapon_code_name_l' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _weapon_code_name_ex1) == 0x000250, "Member 'FNPCInfo::_weapon_code_name_ex1' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _weapon_code_name_ex2) == 0x000258, "Member 'FNPCInfo::_weapon_code_name_ex2' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _weapon_code_name_ex3) == 0x000260, "Member 'FNPCInfo::_weapon_code_name_ex3' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _preload_monster_weapon_list) == 0x000268, "Member 'FNPCInfo::_preload_monster_weapon_list' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _weapon_break_motion_type) == 0x000278, "Member 'FNPCInfo::_weapon_break_motion_type' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _die_immediately_hide) == 0x000279, "Member 'FNPCInfo::_die_immediately_hide' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _die_immediately_hide_delaytime) == 0x00027C, "Member 'FNPCInfo::_die_immediately_hide_delaytime' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _grapplegun_hit_type) == 0x000280, "Member 'FNPCInfo::_grapplegun_hit_type' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _hp_ui_type) == 0x000281, "Member 'FNPCInfo::_hp_ui_type' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _headtag_visible_type) == 0x000282, "Member 'FNPCInfo::_headtag_visible_type' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _spawn_npc_code_name) == 0x000288, "Member 'FNPCInfo::_spawn_npc_code_name' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _targetdecision_range) == 0x000298, "Member 'FNPCInfo::_targetdecision_range' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _play_bgm) == 0x00029C, "Member 'FNPCInfo::_play_bgm' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _dead_helpsignal) == 0x00029D, "Member 'FNPCInfo::_dead_helpsignal' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _move_height_check) == 0x00029E, "Member 'FNPCInfo::_move_height_check' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _hit_fx_level) == 0x00029F, "Member 'FNPCInfo::_hit_fx_level' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _dont_use_check_ally_num) == 0x0002A0, "Member 'FNPCInfo::_dont_use_check_ally_num' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _except_check_ally_num) == 0x0002A1, "Member 'FNPCInfo::_except_check_ally_num' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _ticket_move_dist) == 0x0002A4, "Member 'FNPCInfo::_ticket_move_dist' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _check_skill_use_count) == 0x0002A8, "Member 'FNPCInfo::_check_skill_use_count' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _check_target_near_ally_num) == 0x0002AC, "Member 'FNPCInfo::_check_target_near_ally_num' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _additive_hit_type) == 0x0002B0, "Member 'FNPCInfo::_additive_hit_type' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _NGP_Detail_index) == 0x0002B4, "Member 'FNPCInfo::_NGP_Detail_index' has a wrong offset!");
static_assert(offsetof(FNPCInfo, _ngp_min_groggy_maintaintime) == 0x0002B8, "Member 'FNPCInfo::_ngp_min_groggy_maintaintime' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.NpcGaugeGrowthInfo
// 0x0050 (0x0078 - 0x0028)
struct FNpcGaugeGrowthInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _NGP_round;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _full_fill_num;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _tough_muladd;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _groggy_muladd;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _fire_debuff_resist_muladd;                        // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _electric_debuff_resist_muladd;                    // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _acid_debuff_resist_muladd;                        // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _curse_debuff_resist_muladd;                       // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _contamination_debuff_resist_muladd;               // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _impact_debuff_resist_muladd;                      // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _break_debuff_resist_muladd;                       // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _fire_duration_mulsud;                             // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _electric_duration_mulsud;                         // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _acid_duration_mulsud;                             // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _curse_duration_mulsud;                            // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _contamination_duration_mulsud;                    // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _impact_duration_mulsud;                           // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _break_duration_mulsud;                            // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcGaugeGrowthInfo) == 0x000008, "Wrong alignment on FNpcGaugeGrowthInfo");
static_assert(sizeof(FNpcGaugeGrowthInfo) == 0x000078, "Wrong size on FNpcGaugeGrowthInfo");
static_assert(offsetof(FNpcGaugeGrowthInfo, _code_name) == 0x000028, "Member 'FNpcGaugeGrowthInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FNpcGaugeGrowthInfo, _NGP_round) == 0x000030, "Member 'FNpcGaugeGrowthInfo::_NGP_round' has a wrong offset!");
static_assert(offsetof(FNpcGaugeGrowthInfo, _full_fill_num) == 0x000034, "Member 'FNpcGaugeGrowthInfo::_full_fill_num' has a wrong offset!");
static_assert(offsetof(FNpcGaugeGrowthInfo, _tough_muladd) == 0x000038, "Member 'FNpcGaugeGrowthInfo::_tough_muladd' has a wrong offset!");
static_assert(offsetof(FNpcGaugeGrowthInfo, _groggy_muladd) == 0x00003C, "Member 'FNpcGaugeGrowthInfo::_groggy_muladd' has a wrong offset!");
static_assert(offsetof(FNpcGaugeGrowthInfo, _fire_debuff_resist_muladd) == 0x000040, "Member 'FNpcGaugeGrowthInfo::_fire_debuff_resist_muladd' has a wrong offset!");
static_assert(offsetof(FNpcGaugeGrowthInfo, _electric_debuff_resist_muladd) == 0x000044, "Member 'FNpcGaugeGrowthInfo::_electric_debuff_resist_muladd' has a wrong offset!");
static_assert(offsetof(FNpcGaugeGrowthInfo, _acid_debuff_resist_muladd) == 0x000048, "Member 'FNpcGaugeGrowthInfo::_acid_debuff_resist_muladd' has a wrong offset!");
static_assert(offsetof(FNpcGaugeGrowthInfo, _curse_debuff_resist_muladd) == 0x00004C, "Member 'FNpcGaugeGrowthInfo::_curse_debuff_resist_muladd' has a wrong offset!");
static_assert(offsetof(FNpcGaugeGrowthInfo, _contamination_debuff_resist_muladd) == 0x000050, "Member 'FNpcGaugeGrowthInfo::_contamination_debuff_resist_muladd' has a wrong offset!");
static_assert(offsetof(FNpcGaugeGrowthInfo, _impact_debuff_resist_muladd) == 0x000054, "Member 'FNpcGaugeGrowthInfo::_impact_debuff_resist_muladd' has a wrong offset!");
static_assert(offsetof(FNpcGaugeGrowthInfo, _break_debuff_resist_muladd) == 0x000058, "Member 'FNpcGaugeGrowthInfo::_break_debuff_resist_muladd' has a wrong offset!");
static_assert(offsetof(FNpcGaugeGrowthInfo, _fire_duration_mulsud) == 0x00005C, "Member 'FNpcGaugeGrowthInfo::_fire_duration_mulsud' has a wrong offset!");
static_assert(offsetof(FNpcGaugeGrowthInfo, _electric_duration_mulsud) == 0x000060, "Member 'FNpcGaugeGrowthInfo::_electric_duration_mulsud' has a wrong offset!");
static_assert(offsetof(FNpcGaugeGrowthInfo, _acid_duration_mulsud) == 0x000064, "Member 'FNpcGaugeGrowthInfo::_acid_duration_mulsud' has a wrong offset!");
static_assert(offsetof(FNpcGaugeGrowthInfo, _curse_duration_mulsud) == 0x000068, "Member 'FNpcGaugeGrowthInfo::_curse_duration_mulsud' has a wrong offset!");
static_assert(offsetof(FNpcGaugeGrowthInfo, _contamination_duration_mulsud) == 0x00006C, "Member 'FNpcGaugeGrowthInfo::_contamination_duration_mulsud' has a wrong offset!");
static_assert(offsetof(FNpcGaugeGrowthInfo, _impact_duration_mulsud) == 0x000070, "Member 'FNpcGaugeGrowthInfo::_impact_duration_mulsud' has a wrong offset!");
static_assert(offsetof(FNpcGaugeGrowthInfo, _break_duration_mulsud) == 0x000074, "Member 'FNpcGaugeGrowthInfo::_break_duration_mulsud' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.NPCStatInfo
// 0x0180 (0x01A8 - 0x0028)
struct FNPCStatInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _health_power;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_power;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _fire_attack;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _electric_attack;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _acid_attack;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_defence;                                 // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_slash_defence;                           // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_strike_defence;                          // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_pierce_defence;                          // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _fire_defence;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _electric_defence;                                 // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _acid_defence;                                     // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_reduce;                                  // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_slash_reduce;                            // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_strike_reduce;                           // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_pierce_reduce;                           // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _fire_reduce;                                      // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _electric_reduce;                                  // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _acid_reduce;                                      // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _fire_debuff_resist;                               // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _electric_debuff_resist;                           // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _acid_debuff_resist;                               // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _curse_debuff_resist;                              // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _contamination_debuff_resist;                      // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _impact_debuff_resist;                             // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _break_debuff_resist;                              // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _abnormal_state_codename;                          // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _npc_gauge_growth;                                 // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _abnormal_state_build_up_attack;                   // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _exp;                                              // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_penetration_power_base;                     // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _tough;                                            // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _tough_restore_base;                               // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _tough_attack_power_base;                          // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _tough_defence_power_base;                         // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _groggy_point;                                     // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _groggy_point_restore_base;                        // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _groggy_point_restore_stop_time;                   // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _groggy_point_reset_delay;                         // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _groggy_attack;                                    // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _destruction_power;                                // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _abnormal_fire_point;                              // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _stiffen_playrate_attacker;                        // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _stiffen_playrate_defender;                        // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _regainhp_gain_ratio;                              // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _regainhp_heal_ratio;                              // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _regainhp_heal_time;                               // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _regainhp_max_exist;                               // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _destruction_defence;                              // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _destruction_reduce;                               // 0x00FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _destruction_slash_reduce;                         // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _destruction_strike_reduce;                        // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _destruction_pierce_reduce;                        // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _destruction_physical_reduce;                      // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _destruction_fire_reduce;                          // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _destruction_electric_reduce;                      // 0x0114(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _destruction_acid_reduce;                          // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _walk_run_speed_ratio;                             // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _max_stamina;                                      // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _restore_stamina_per_sec;                          // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_point;                                      // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_physicaldamage_reduction_ratio;             // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_firedamage_reduction_ratio;                 // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_electricdamage_reduction_ratio;             // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_aciddamage_reduction_ratio;                 // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_knockback_duration_reduction_ratio;         // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_knockback_distance_reduction_ratio;         // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _rigidity;                                         // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _tough_recovery_delay_time;                        // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _tough_recovery_delay_reduction;                   // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _attack_speed_ratio;                               // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _critical_rate;                                    // 0x0154(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _critical_resist_rate;                             // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _critical_damage_ratio;                            // 0x015C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _specialhit_groggy_reduction;                      // 0x0160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_sharpness_attack;                           // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _regainhp_heal_increase_ratio;                     // 0x0168(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _NGP_Detail_index;                                 // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _abnormalState_penalty_base;                       // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _build_up_recover_inc_base;                        // 0x0174(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_stamina_damage;                             // 0x0178(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _fire_rate_dot_reduce;                             // 0x017C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _electric_rate_dot_reduce;                         // 0x0180(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _acid_rate_dot_reduce;                             // 0x0184(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _etc_rate_dot_reduce;                              // 0x0188(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _groggy_slash_reduce;                              // 0x018C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _groggy_strike_reduce;                             // 0x0190(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _groggy_pierce_reduce;                             // 0x0194(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_groggy_reduce;                           // 0x0198(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _fire_groggy_reduce;                               // 0x019C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _electric_groggy_reduce;                           // 0x01A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _acid_groggy_reduce;                               // 0x01A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNPCStatInfo) == 0x000008, "Wrong alignment on FNPCStatInfo");
static_assert(sizeof(FNPCStatInfo) == 0x0001A8, "Wrong size on FNPCStatInfo");
static_assert(offsetof(FNPCStatInfo, _code_name) == 0x000028, "Member 'FNPCStatInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _health_power) == 0x000030, "Member 'FNPCStatInfo::_health_power' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _physical_power) == 0x000034, "Member 'FNPCStatInfo::_physical_power' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _fire_attack) == 0x000038, "Member 'FNPCStatInfo::_fire_attack' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _electric_attack) == 0x00003C, "Member 'FNPCStatInfo::_electric_attack' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _acid_attack) == 0x000040, "Member 'FNPCStatInfo::_acid_attack' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _physical_defence) == 0x000044, "Member 'FNPCStatInfo::_physical_defence' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _physical_slash_defence) == 0x000048, "Member 'FNPCStatInfo::_physical_slash_defence' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _physical_strike_defence) == 0x00004C, "Member 'FNPCStatInfo::_physical_strike_defence' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _physical_pierce_defence) == 0x000050, "Member 'FNPCStatInfo::_physical_pierce_defence' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _fire_defence) == 0x000054, "Member 'FNPCStatInfo::_fire_defence' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _electric_defence) == 0x000058, "Member 'FNPCStatInfo::_electric_defence' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _acid_defence) == 0x00005C, "Member 'FNPCStatInfo::_acid_defence' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _physical_reduce) == 0x000060, "Member 'FNPCStatInfo::_physical_reduce' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _physical_slash_reduce) == 0x000064, "Member 'FNPCStatInfo::_physical_slash_reduce' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _physical_strike_reduce) == 0x000068, "Member 'FNPCStatInfo::_physical_strike_reduce' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _physical_pierce_reduce) == 0x00006C, "Member 'FNPCStatInfo::_physical_pierce_reduce' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _fire_reduce) == 0x000070, "Member 'FNPCStatInfo::_fire_reduce' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _electric_reduce) == 0x000074, "Member 'FNPCStatInfo::_electric_reduce' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _acid_reduce) == 0x000078, "Member 'FNPCStatInfo::_acid_reduce' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _fire_debuff_resist) == 0x00007C, "Member 'FNPCStatInfo::_fire_debuff_resist' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _electric_debuff_resist) == 0x000080, "Member 'FNPCStatInfo::_electric_debuff_resist' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _acid_debuff_resist) == 0x000084, "Member 'FNPCStatInfo::_acid_debuff_resist' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _curse_debuff_resist) == 0x000088, "Member 'FNPCStatInfo::_curse_debuff_resist' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _contamination_debuff_resist) == 0x00008C, "Member 'FNPCStatInfo::_contamination_debuff_resist' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _impact_debuff_resist) == 0x000090, "Member 'FNPCStatInfo::_impact_debuff_resist' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _break_debuff_resist) == 0x000094, "Member 'FNPCStatInfo::_break_debuff_resist' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _abnormal_state_codename) == 0x000098, "Member 'FNPCStatInfo::_abnormal_state_codename' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _npc_gauge_growth) == 0x0000A0, "Member 'FNPCStatInfo::_npc_gauge_growth' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _abnormal_state_build_up_attack) == 0x0000A8, "Member 'FNPCStatInfo::_abnormal_state_build_up_attack' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _exp) == 0x0000AC, "Member 'FNPCStatInfo::_exp' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _guard_penetration_power_base) == 0x0000B0, "Member 'FNPCStatInfo::_guard_penetration_power_base' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _tough) == 0x0000B4, "Member 'FNPCStatInfo::_tough' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _tough_restore_base) == 0x0000B8, "Member 'FNPCStatInfo::_tough_restore_base' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _tough_attack_power_base) == 0x0000BC, "Member 'FNPCStatInfo::_tough_attack_power_base' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _tough_defence_power_base) == 0x0000C0, "Member 'FNPCStatInfo::_tough_defence_power_base' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _groggy_point) == 0x0000C4, "Member 'FNPCStatInfo::_groggy_point' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _groggy_point_restore_base) == 0x0000C8, "Member 'FNPCStatInfo::_groggy_point_restore_base' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _groggy_point_restore_stop_time) == 0x0000CC, "Member 'FNPCStatInfo::_groggy_point_restore_stop_time' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _groggy_point_reset_delay) == 0x0000D0, "Member 'FNPCStatInfo::_groggy_point_reset_delay' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _groggy_attack) == 0x0000D4, "Member 'FNPCStatInfo::_groggy_attack' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _destruction_power) == 0x0000D8, "Member 'FNPCStatInfo::_destruction_power' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _abnormal_fire_point) == 0x0000DC, "Member 'FNPCStatInfo::_abnormal_fire_point' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _stiffen_playrate_attacker) == 0x0000E0, "Member 'FNPCStatInfo::_stiffen_playrate_attacker' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _stiffen_playrate_defender) == 0x0000E4, "Member 'FNPCStatInfo::_stiffen_playrate_defender' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _regainhp_gain_ratio) == 0x0000E8, "Member 'FNPCStatInfo::_regainhp_gain_ratio' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _regainhp_heal_ratio) == 0x0000EC, "Member 'FNPCStatInfo::_regainhp_heal_ratio' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _regainhp_heal_time) == 0x0000F0, "Member 'FNPCStatInfo::_regainhp_heal_time' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _regainhp_max_exist) == 0x0000F4, "Member 'FNPCStatInfo::_regainhp_max_exist' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _destruction_defence) == 0x0000F8, "Member 'FNPCStatInfo::_destruction_defence' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _destruction_reduce) == 0x0000FC, "Member 'FNPCStatInfo::_destruction_reduce' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _destruction_slash_reduce) == 0x000100, "Member 'FNPCStatInfo::_destruction_slash_reduce' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _destruction_strike_reduce) == 0x000104, "Member 'FNPCStatInfo::_destruction_strike_reduce' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _destruction_pierce_reduce) == 0x000108, "Member 'FNPCStatInfo::_destruction_pierce_reduce' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _destruction_physical_reduce) == 0x00010C, "Member 'FNPCStatInfo::_destruction_physical_reduce' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _destruction_fire_reduce) == 0x000110, "Member 'FNPCStatInfo::_destruction_fire_reduce' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _destruction_electric_reduce) == 0x000114, "Member 'FNPCStatInfo::_destruction_electric_reduce' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _destruction_acid_reduce) == 0x000118, "Member 'FNPCStatInfo::_destruction_acid_reduce' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _walk_run_speed_ratio) == 0x00011C, "Member 'FNPCStatInfo::_walk_run_speed_ratio' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _max_stamina) == 0x000120, "Member 'FNPCStatInfo::_max_stamina' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _restore_stamina_per_sec) == 0x000124, "Member 'FNPCStatInfo::_restore_stamina_per_sec' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _guard_point) == 0x000128, "Member 'FNPCStatInfo::_guard_point' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _guard_physicaldamage_reduction_ratio) == 0x00012C, "Member 'FNPCStatInfo::_guard_physicaldamage_reduction_ratio' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _guard_firedamage_reduction_ratio) == 0x000130, "Member 'FNPCStatInfo::_guard_firedamage_reduction_ratio' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _guard_electricdamage_reduction_ratio) == 0x000134, "Member 'FNPCStatInfo::_guard_electricdamage_reduction_ratio' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _guard_aciddamage_reduction_ratio) == 0x000138, "Member 'FNPCStatInfo::_guard_aciddamage_reduction_ratio' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _guard_knockback_duration_reduction_ratio) == 0x00013C, "Member 'FNPCStatInfo::_guard_knockback_duration_reduction_ratio' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _guard_knockback_distance_reduction_ratio) == 0x000140, "Member 'FNPCStatInfo::_guard_knockback_distance_reduction_ratio' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _rigidity) == 0x000144, "Member 'FNPCStatInfo::_rigidity' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _tough_recovery_delay_time) == 0x000148, "Member 'FNPCStatInfo::_tough_recovery_delay_time' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _tough_recovery_delay_reduction) == 0x00014C, "Member 'FNPCStatInfo::_tough_recovery_delay_reduction' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _attack_speed_ratio) == 0x000150, "Member 'FNPCStatInfo::_attack_speed_ratio' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _critical_rate) == 0x000154, "Member 'FNPCStatInfo::_critical_rate' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _critical_resist_rate) == 0x000158, "Member 'FNPCStatInfo::_critical_resist_rate' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _critical_damage_ratio) == 0x00015C, "Member 'FNPCStatInfo::_critical_damage_ratio' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _specialhit_groggy_reduction) == 0x000160, "Member 'FNPCStatInfo::_specialhit_groggy_reduction' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _guard_sharpness_attack) == 0x000164, "Member 'FNPCStatInfo::_guard_sharpness_attack' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _regainhp_heal_increase_ratio) == 0x000168, "Member 'FNPCStatInfo::_regainhp_heal_increase_ratio' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _NGP_Detail_index) == 0x00016C, "Member 'FNPCStatInfo::_NGP_Detail_index' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _abnormalState_penalty_base) == 0x000170, "Member 'FNPCStatInfo::_abnormalState_penalty_base' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _build_up_recover_inc_base) == 0x000174, "Member 'FNPCStatInfo::_build_up_recover_inc_base' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _guard_stamina_damage) == 0x000178, "Member 'FNPCStatInfo::_guard_stamina_damage' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _fire_rate_dot_reduce) == 0x00017C, "Member 'FNPCStatInfo::_fire_rate_dot_reduce' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _electric_rate_dot_reduce) == 0x000180, "Member 'FNPCStatInfo::_electric_rate_dot_reduce' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _acid_rate_dot_reduce) == 0x000184, "Member 'FNPCStatInfo::_acid_rate_dot_reduce' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _etc_rate_dot_reduce) == 0x000188, "Member 'FNPCStatInfo::_etc_rate_dot_reduce' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _groggy_slash_reduce) == 0x00018C, "Member 'FNPCStatInfo::_groggy_slash_reduce' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _groggy_strike_reduce) == 0x000190, "Member 'FNPCStatInfo::_groggy_strike_reduce' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _groggy_pierce_reduce) == 0x000194, "Member 'FNPCStatInfo::_groggy_pierce_reduce' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _physical_groggy_reduce) == 0x000198, "Member 'FNPCStatInfo::_physical_groggy_reduce' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _fire_groggy_reduce) == 0x00019C, "Member 'FNPCStatInfo::_fire_groggy_reduce' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _electric_groggy_reduce) == 0x0001A0, "Member 'FNPCStatInfo::_electric_groggy_reduce' has a wrong offset!");
static_assert(offsetof(FNPCStatInfo, _acid_groggy_reduce) == 0x0001A4, "Member 'FNPCStatInfo::_acid_groggy_reduce' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.NPCPartsInfo
// 0x0098 (0x00C0 - 0x0028)
struct FNPCPartsInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _parts_destruction_index;                          // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _parts_bp_code_name;                               // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _destroyed_on_spawn;                               // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _enable_on_spawn;                                  // 0x003D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _parts_skill_code_name_on_destroy;                 // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _regain_reduce;                                    // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _groggy_reduce;                                    // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _tough_reduce;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _parts_rigidity;                                   // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _parts_damage_to_monster_use;                      // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _parts_hp_ratio;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _parts_physical_slash_reduce;                      // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _parts_physical_pierce_reduce;                     // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _parts_physical_strike_reduce;                     // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _parts_fire_reduce;                                // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _parts_electric_reduce;                            // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _parts_acid_reduce;                                // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _parts_break_action_paralyze;                      // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELNpcPartsHitDirectionType                    _hit_direction_type;                               // 0x007C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _hit_range_angle_start;                            // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _hit_range_angle_end;                              // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _attacker_repulse_enable;                          // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELElementDamageType                           _weak_element;                                     // 0x0089(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _weak_element_skill_codename;                      // 0x008C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _parts_drop_item_on_destroy;                       // 0x0094(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _parts_drop_item_probility;                        // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _parts_drop_item_redrop_use;                       // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _parts_drop_item_limit;                            // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_monster_damage_ratio_strike;            // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_monster_damage_ratio_slash;             // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_monster_damage_ratio_pierce;            // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _hit_repulse_level_strike;                         // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _hit_repulse_level_slash;                          // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _hit_repulse_level_pierce;                         // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNPCPartsInfo) == 0x000008, "Wrong alignment on FNPCPartsInfo");
static_assert(sizeof(FNPCPartsInfo) == 0x0000C0, "Wrong size on FNPCPartsInfo");
static_assert(offsetof(FNPCPartsInfo, _code_name) == 0x000028, "Member 'FNPCPartsInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _parts_destruction_index) == 0x000030, "Member 'FNPCPartsInfo::_parts_destruction_index' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _parts_bp_code_name) == 0x000034, "Member 'FNPCPartsInfo::_parts_bp_code_name' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _destroyed_on_spawn) == 0x00003C, "Member 'FNPCPartsInfo::_destroyed_on_spawn' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _enable_on_spawn) == 0x00003D, "Member 'FNPCPartsInfo::_enable_on_spawn' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _parts_skill_code_name_on_destroy) == 0x000040, "Member 'FNPCPartsInfo::_parts_skill_code_name_on_destroy' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _regain_reduce) == 0x000048, "Member 'FNPCPartsInfo::_regain_reduce' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _groggy_reduce) == 0x00004C, "Member 'FNPCPartsInfo::_groggy_reduce' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _tough_reduce) == 0x000050, "Member 'FNPCPartsInfo::_tough_reduce' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _parts_rigidity) == 0x000054, "Member 'FNPCPartsInfo::_parts_rigidity' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _parts_damage_to_monster_use) == 0x000058, "Member 'FNPCPartsInfo::_parts_damage_to_monster_use' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _parts_hp_ratio) == 0x00005C, "Member 'FNPCPartsInfo::_parts_hp_ratio' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _parts_physical_slash_reduce) == 0x000060, "Member 'FNPCPartsInfo::_parts_physical_slash_reduce' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _parts_physical_pierce_reduce) == 0x000064, "Member 'FNPCPartsInfo::_parts_physical_pierce_reduce' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _parts_physical_strike_reduce) == 0x000068, "Member 'FNPCPartsInfo::_parts_physical_strike_reduce' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _parts_fire_reduce) == 0x00006C, "Member 'FNPCPartsInfo::_parts_fire_reduce' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _parts_electric_reduce) == 0x000070, "Member 'FNPCPartsInfo::_parts_electric_reduce' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _parts_acid_reduce) == 0x000074, "Member 'FNPCPartsInfo::_parts_acid_reduce' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _parts_break_action_paralyze) == 0x000078, "Member 'FNPCPartsInfo::_parts_break_action_paralyze' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _hit_direction_type) == 0x00007C, "Member 'FNPCPartsInfo::_hit_direction_type' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _hit_range_angle_start) == 0x000080, "Member 'FNPCPartsInfo::_hit_range_angle_start' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _hit_range_angle_end) == 0x000084, "Member 'FNPCPartsInfo::_hit_range_angle_end' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _attacker_repulse_enable) == 0x000088, "Member 'FNPCPartsInfo::_attacker_repulse_enable' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _weak_element) == 0x000089, "Member 'FNPCPartsInfo::_weak_element' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _weak_element_skill_codename) == 0x00008C, "Member 'FNPCPartsInfo::_weak_element_skill_codename' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _parts_drop_item_on_destroy) == 0x000094, "Member 'FNPCPartsInfo::_parts_drop_item_on_destroy' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _parts_drop_item_probility) == 0x00009C, "Member 'FNPCPartsInfo::_parts_drop_item_probility' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _parts_drop_item_redrop_use) == 0x0000A0, "Member 'FNPCPartsInfo::_parts_drop_item_redrop_use' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _parts_drop_item_limit) == 0x0000A4, "Member 'FNPCPartsInfo::_parts_drop_item_limit' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _sharpness_monster_damage_ratio_strike) == 0x0000A8, "Member 'FNPCPartsInfo::_sharpness_monster_damage_ratio_strike' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _sharpness_monster_damage_ratio_slash) == 0x0000AC, "Member 'FNPCPartsInfo::_sharpness_monster_damage_ratio_slash' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _sharpness_monster_damage_ratio_pierce) == 0x0000B0, "Member 'FNPCPartsInfo::_sharpness_monster_damage_ratio_pierce' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _hit_repulse_level_strike) == 0x0000B4, "Member 'FNPCPartsInfo::_hit_repulse_level_strike' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _hit_repulse_level_slash) == 0x0000B8, "Member 'FNPCPartsInfo::_hit_repulse_level_slash' has a wrong offset!");
static_assert(offsetof(FNPCPartsInfo, _hit_repulse_level_pierce) == 0x0000BC, "Member 'FNPCPartsInfo::_hit_repulse_level_pierce' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.NPCBodyWeaponInfo
// 0x0030 (0x0058 - 0x0028)
struct FNPCBodyWeaponInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _weapon_bp_code_name;                              // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _durability;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _motion_speed_rate_after_broken;                   // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _add_skill_range_after_broken;                     // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _minimum_skill_range_min_after_broken;             // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _minimum_skill_range_max_after_broken;             // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _mulple_rate_atk_power_after_broken;               // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _mulple_rate_rigidity_after_broken;                // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNPCBodyWeaponInfo) == 0x000008, "Wrong alignment on FNPCBodyWeaponInfo");
static_assert(sizeof(FNPCBodyWeaponInfo) == 0x000058, "Wrong size on FNPCBodyWeaponInfo");
static_assert(offsetof(FNPCBodyWeaponInfo, _code_name) == 0x000028, "Member 'FNPCBodyWeaponInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FNPCBodyWeaponInfo, _weapon_bp_code_name) == 0x000030, "Member 'FNPCBodyWeaponInfo::_weapon_bp_code_name' has a wrong offset!");
static_assert(offsetof(FNPCBodyWeaponInfo, _durability) == 0x000038, "Member 'FNPCBodyWeaponInfo::_durability' has a wrong offset!");
static_assert(offsetof(FNPCBodyWeaponInfo, _motion_speed_rate_after_broken) == 0x00003C, "Member 'FNPCBodyWeaponInfo::_motion_speed_rate_after_broken' has a wrong offset!");
static_assert(offsetof(FNPCBodyWeaponInfo, _add_skill_range_after_broken) == 0x000040, "Member 'FNPCBodyWeaponInfo::_add_skill_range_after_broken' has a wrong offset!");
static_assert(offsetof(FNPCBodyWeaponInfo, _minimum_skill_range_min_after_broken) == 0x000044, "Member 'FNPCBodyWeaponInfo::_minimum_skill_range_min_after_broken' has a wrong offset!");
static_assert(offsetof(FNPCBodyWeaponInfo, _minimum_skill_range_max_after_broken) == 0x000048, "Member 'FNPCBodyWeaponInfo::_minimum_skill_range_max_after_broken' has a wrong offset!");
static_assert(offsetof(FNPCBodyWeaponInfo, _mulple_rate_atk_power_after_broken) == 0x00004C, "Member 'FNPCBodyWeaponInfo::_mulple_rate_atk_power_after_broken' has a wrong offset!");
static_assert(offsetof(FNPCBodyWeaponInfo, _mulple_rate_rigidity_after_broken) == 0x000050, "Member 'FNPCBodyWeaponInfo::_mulple_rate_rigidity_after_broken' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.NPCSpotDieInfo
// 0x00C8 (0x00F0 - 0x0028)
struct FNPCSpotDieInfo final : public FContentInfoBase
{
public:
	class FString                                 _npc_spot_id;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _action_state_pc;                                  // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _content_condition;                                // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _start_command;                                    // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _item_drop_index;                                  // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _ui_fade_out;                                      // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _ui_fade_out_delay;                                // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ui_fade_out_pause;                                // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _level_sequence_delay;                             // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _level_sequence_spot_id;                           // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _level_sequence_command;                           // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _movie_delay;                                      // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _movie;                                            // 0x0084(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _movie_command;                                    // 0x008C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _dialog_delay;                                     // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _dialog;                                           // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _dialog_command;                                   // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _dialog_talker_spot_id;                            // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _dead_boss_alert_delay;                            // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _dead_boss_alert_after_command_delay;              // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _dead_boss_alert_after_command;                    // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _item_alert_delay;                                 // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _change_weather;                                   // 0x00CC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _change_weather_delay;                             // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _monologue;                                        // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _monologue_delay;                                  // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _monologue_end_command;                            // 0x00E4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNPCSpotDieInfo) == 0x000008, "Wrong alignment on FNPCSpotDieInfo");
static_assert(sizeof(FNPCSpotDieInfo) == 0x0000F0, "Wrong size on FNPCSpotDieInfo");
static_assert(offsetof(FNPCSpotDieInfo, _npc_spot_id) == 0x000028, "Member 'FNPCSpotDieInfo::_npc_spot_id' has a wrong offset!");
static_assert(offsetof(FNPCSpotDieInfo, _action_state_pc) == 0x000038, "Member 'FNPCSpotDieInfo::_action_state_pc' has a wrong offset!");
static_assert(offsetof(FNPCSpotDieInfo, _content_condition) == 0x000040, "Member 'FNPCSpotDieInfo::_content_condition' has a wrong offset!");
static_assert(offsetof(FNPCSpotDieInfo, _start_command) == 0x000048, "Member 'FNPCSpotDieInfo::_start_command' has a wrong offset!");
static_assert(offsetof(FNPCSpotDieInfo, _item_drop_index) == 0x000050, "Member 'FNPCSpotDieInfo::_item_drop_index' has a wrong offset!");
static_assert(offsetof(FNPCSpotDieInfo, _ui_fade_out) == 0x000058, "Member 'FNPCSpotDieInfo::_ui_fade_out' has a wrong offset!");
static_assert(offsetof(FNPCSpotDieInfo, _ui_fade_out_delay) == 0x00005C, "Member 'FNPCSpotDieInfo::_ui_fade_out_delay' has a wrong offset!");
static_assert(offsetof(FNPCSpotDieInfo, _ui_fade_out_pause) == 0x000060, "Member 'FNPCSpotDieInfo::_ui_fade_out_pause' has a wrong offset!");
static_assert(offsetof(FNPCSpotDieInfo, _level_sequence_delay) == 0x000064, "Member 'FNPCSpotDieInfo::_level_sequence_delay' has a wrong offset!");
static_assert(offsetof(FNPCSpotDieInfo, _level_sequence_spot_id) == 0x000068, "Member 'FNPCSpotDieInfo::_level_sequence_spot_id' has a wrong offset!");
static_assert(offsetof(FNPCSpotDieInfo, _level_sequence_command) == 0x000078, "Member 'FNPCSpotDieInfo::_level_sequence_command' has a wrong offset!");
static_assert(offsetof(FNPCSpotDieInfo, _movie_delay) == 0x000080, "Member 'FNPCSpotDieInfo::_movie_delay' has a wrong offset!");
static_assert(offsetof(FNPCSpotDieInfo, _movie) == 0x000084, "Member 'FNPCSpotDieInfo::_movie' has a wrong offset!");
static_assert(offsetof(FNPCSpotDieInfo, _movie_command) == 0x00008C, "Member 'FNPCSpotDieInfo::_movie_command' has a wrong offset!");
static_assert(offsetof(FNPCSpotDieInfo, _dialog_delay) == 0x000094, "Member 'FNPCSpotDieInfo::_dialog_delay' has a wrong offset!");
static_assert(offsetof(FNPCSpotDieInfo, _dialog) == 0x000098, "Member 'FNPCSpotDieInfo::_dialog' has a wrong offset!");
static_assert(offsetof(FNPCSpotDieInfo, _dialog_command) == 0x0000A0, "Member 'FNPCSpotDieInfo::_dialog_command' has a wrong offset!");
static_assert(offsetof(FNPCSpotDieInfo, _dialog_talker_spot_id) == 0x0000A8, "Member 'FNPCSpotDieInfo::_dialog_talker_spot_id' has a wrong offset!");
static_assert(offsetof(FNPCSpotDieInfo, _dead_boss_alert_delay) == 0x0000B8, "Member 'FNPCSpotDieInfo::_dead_boss_alert_delay' has a wrong offset!");
static_assert(offsetof(FNPCSpotDieInfo, _dead_boss_alert_after_command_delay) == 0x0000BC, "Member 'FNPCSpotDieInfo::_dead_boss_alert_after_command_delay' has a wrong offset!");
static_assert(offsetof(FNPCSpotDieInfo, _dead_boss_alert_after_command) == 0x0000C0, "Member 'FNPCSpotDieInfo::_dead_boss_alert_after_command' has a wrong offset!");
static_assert(offsetof(FNPCSpotDieInfo, _item_alert_delay) == 0x0000C8, "Member 'FNPCSpotDieInfo::_item_alert_delay' has a wrong offset!");
static_assert(offsetof(FNPCSpotDieInfo, _change_weather) == 0x0000CC, "Member 'FNPCSpotDieInfo::_change_weather' has a wrong offset!");
static_assert(offsetof(FNPCSpotDieInfo, _change_weather_delay) == 0x0000D4, "Member 'FNPCSpotDieInfo::_change_weather_delay' has a wrong offset!");
static_assert(offsetof(FNPCSpotDieInfo, _monologue) == 0x0000D8, "Member 'FNPCSpotDieInfo::_monologue' has a wrong offset!");
static_assert(offsetof(FNPCSpotDieInfo, _monologue_delay) == 0x0000E0, "Member 'FNPCSpotDieInfo::_monologue_delay' has a wrong offset!");
static_assert(offsetof(FNPCSpotDieInfo, _monologue_end_command) == 0x0000E4, "Member 'FNPCSpotDieInfo::_monologue_end_command' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.NPCInfoDB
// 0x01C8 (0x01F0 - 0x0028)
struct FNPCInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNPCInfo>                       _NpcInfo_array;                                    // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x50];                                      // 0x0088(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNPCSkillLinkInfo>              _NpcSkillLinkInfo_array;                           // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FNpcGaugeGrowthInfo>            _NpcGaugeGrowthInfo_array;                         // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x50];                                      // 0x00F8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNPCStatInfo>                   _NpcStatInfo_array;                                // 0x0148(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FNPCPartsInfo>                  _NpcPartsInfo_array;                               // 0x0158(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_168[0x50];                                     // 0x0168(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNPCBodyWeaponInfo>             _NPCBodyWeaponInfo_array;                          // 0x01B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FNPCSpotDieInfo>                _NPCSpotDieInfo_array;                             // 0x01C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x01D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x01E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNPCInfoDB) == 0x000008, "Wrong alignment on FNPCInfoDB");
static_assert(sizeof(FNPCInfoDB) == 0x0001F0, "Wrong size on FNPCInfoDB");
static_assert(offsetof(FNPCInfoDB, _NpcInfo_array) == 0x000078, "Member 'FNPCInfoDB::_NpcInfo_array' has a wrong offset!");
static_assert(offsetof(FNPCInfoDB, _NpcSkillLinkInfo_array) == 0x0000D8, "Member 'FNPCInfoDB::_NpcSkillLinkInfo_array' has a wrong offset!");
static_assert(offsetof(FNPCInfoDB, _NpcGaugeGrowthInfo_array) == 0x0000E8, "Member 'FNPCInfoDB::_NpcGaugeGrowthInfo_array' has a wrong offset!");
static_assert(offsetof(FNPCInfoDB, _NpcStatInfo_array) == 0x000148, "Member 'FNPCInfoDB::_NpcStatInfo_array' has a wrong offset!");
static_assert(offsetof(FNPCInfoDB, _NpcPartsInfo_array) == 0x000158, "Member 'FNPCInfoDB::_NpcPartsInfo_array' has a wrong offset!");
static_assert(offsetof(FNPCInfoDB, _NPCBodyWeaponInfo_array) == 0x0001B8, "Member 'FNPCInfoDB::_NPCBodyWeaponInfo_array' has a wrong offset!");
static_assert(offsetof(FNPCInfoDB, _NPCSpotDieInfo_array) == 0x0001C8, "Member 'FNPCInfoDB::_NPCSpotDieInfo_array' has a wrong offset!");
static_assert(offsetof(FNPCInfoDB, _version) == 0x0001D8, "Member 'FNPCInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FNPCInfoDB, _comment) == 0x0001E0, "Member 'FNPCInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.DynamicDamageVolumeInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FDynamicDamageVolumeInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDynamicDamageVolumeInfoPtr) == 0x000008, "Wrong alignment on FDynamicDamageVolumeInfoPtr");
static_assert(sizeof(FDynamicDamageVolumeInfoPtr) == 0x000008, "Wrong size on FDynamicDamageVolumeInfoPtr");

// ScriptStruct ProjectPContentInfo.ElementalAttackSettingInfo
// 0x0028 (0x0050 - 0x0028)
struct FElementalAttackSettingInfo final : public FContentInfoBase
{
public:
	class FName                                   _element_type;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _npc_add_abnormal_state;                           // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _pc_add_abnormal_state;                            // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _dmg_to_buildup_ratio;                             // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _min_ratio_to_buildup;                             // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _dmg_normalize_base;                               // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _dmg_normalize_exponent;                           // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FElementalAttackSettingInfo) == 0x000008, "Wrong alignment on FElementalAttackSettingInfo");
static_assert(sizeof(FElementalAttackSettingInfo) == 0x000050, "Wrong size on FElementalAttackSettingInfo");
static_assert(offsetof(FElementalAttackSettingInfo, _element_type) == 0x000028, "Member 'FElementalAttackSettingInfo::_element_type' has a wrong offset!");
static_assert(offsetof(FElementalAttackSettingInfo, _npc_add_abnormal_state) == 0x000030, "Member 'FElementalAttackSettingInfo::_npc_add_abnormal_state' has a wrong offset!");
static_assert(offsetof(FElementalAttackSettingInfo, _pc_add_abnormal_state) == 0x000038, "Member 'FElementalAttackSettingInfo::_pc_add_abnormal_state' has a wrong offset!");
static_assert(offsetof(FElementalAttackSettingInfo, _dmg_to_buildup_ratio) == 0x000040, "Member 'FElementalAttackSettingInfo::_dmg_to_buildup_ratio' has a wrong offset!");
static_assert(offsetof(FElementalAttackSettingInfo, _min_ratio_to_buildup) == 0x000044, "Member 'FElementalAttackSettingInfo::_min_ratio_to_buildup' has a wrong offset!");
static_assert(offsetof(FElementalAttackSettingInfo, _dmg_normalize_base) == 0x000048, "Member 'FElementalAttackSettingInfo::_dmg_normalize_base' has a wrong offset!");
static_assert(offsetof(FElementalAttackSettingInfo, _dmg_normalize_exponent) == 0x00004C, "Member 'FElementalAttackSettingInfo::_dmg_normalize_exponent' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ElementalAttackSettingInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FElementalAttackSettingInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FElementalAttackSettingInfo>    _ElementalAttackSetting_array;                     // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FElementalAttackSettingInfoDB) == 0x000008, "Wrong alignment on FElementalAttackSettingInfoDB");
static_assert(sizeof(FElementalAttackSettingInfoDB) == 0x0000A0, "Wrong size on FElementalAttackSettingInfoDB");
static_assert(offsetof(FElementalAttackSettingInfoDB, _ElementalAttackSetting_array) == 0x000078, "Member 'FElementalAttackSettingInfoDB::_ElementalAttackSetting_array' has a wrong offset!");
static_assert(offsetof(FElementalAttackSettingInfoDB, _version) == 0x000088, "Member 'FElementalAttackSettingInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FElementalAttackSettingInfoDB, _comment) == 0x000090, "Member 'FElementalAttackSettingInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PropInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FPropInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPropInfoPtr) == 0x000008, "Wrong alignment on FPropInfoPtr");
static_assert(sizeof(FPropInfoPtr) == 0x000008, "Wrong size on FPropInfoPtr");

// ScriptStruct ProjectPContentInfo.ElementalAttackSettingInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FElementalAttackSettingInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FElementalAttackSettingInfoPtr) == 0x000008, "Wrong alignment on FElementalAttackSettingInfoPtr");
static_assert(sizeof(FElementalAttackSettingInfoPtr) == 0x000008, "Wrong size on FElementalAttackSettingInfoPtr");

// ScriptStruct ProjectPContentInfo.CorrectionWeaponFirstStatInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FCorrectionWeaponFirstStatInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCorrectionWeaponFirstStatInfoPtr) == 0x000008, "Wrong alignment on FCorrectionWeaponFirstStatInfoPtr");
static_assert(sizeof(FCorrectionWeaponFirstStatInfoPtr) == 0x000008, "Wrong size on FCorrectionWeaponFirstStatInfoPtr");

// ScriptStruct ProjectPContentInfo.ExiledNpcInfo
// 0x0010 (0x0038 - 0x0028)
struct FExiledNpcInfo final : public FContentInfoBase
{
public:
	int32                                         _index;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _exiled_npc_code_name;                             // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FExiledNpcInfo) == 0x000008, "Wrong alignment on FExiledNpcInfo");
static_assert(sizeof(FExiledNpcInfo) == 0x000038, "Wrong size on FExiledNpcInfo");
static_assert(offsetof(FExiledNpcInfo, _index) == 0x000028, "Member 'FExiledNpcInfo::_index' has a wrong offset!");
static_assert(offsetof(FExiledNpcInfo, _exiled_npc_code_name) == 0x00002C, "Member 'FExiledNpcInfo::_exiled_npc_code_name' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ExiledNpcSpotInfo
// 0x0010 (0x0038 - 0x0028)
struct FExiledNpcSpotInfo final : public FContentInfoBase
{
public:
	int32                                         _index;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _exiled_npc_spot_code_name;                        // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FExiledNpcSpotInfo) == 0x000008, "Wrong alignment on FExiledNpcSpotInfo");
static_assert(sizeof(FExiledNpcSpotInfo) == 0x000038, "Wrong size on FExiledNpcSpotInfo");
static_assert(offsetof(FExiledNpcSpotInfo, _index) == 0x000028, "Member 'FExiledNpcSpotInfo::_index' has a wrong offset!");
static_assert(offsetof(FExiledNpcSpotInfo, _exiled_npc_spot_code_name) == 0x00002C, "Member 'FExiledNpcSpotInfo::_exiled_npc_spot_code_name' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ExiledNpcInfoDB
// 0x0038 (0x0060 - 0x0028)
struct FExiledNpcInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FExiledNpcInfo>                 _ExiledNpc_array;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FExiledNpcSpotInfo>             _ExiledNpcSpot_array;                              // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExiledNpcInfoDB) == 0x000008, "Wrong alignment on FExiledNpcInfoDB");
static_assert(sizeof(FExiledNpcInfoDB) == 0x000060, "Wrong size on FExiledNpcInfoDB");
static_assert(offsetof(FExiledNpcInfoDB, _ExiledNpc_array) == 0x000028, "Member 'FExiledNpcInfoDB::_ExiledNpc_array' has a wrong offset!");
static_assert(offsetof(FExiledNpcInfoDB, _ExiledNpcSpot_array) == 0x000038, "Member 'FExiledNpcInfoDB::_ExiledNpcSpot_array' has a wrong offset!");
static_assert(offsetof(FExiledNpcInfoDB, _version) == 0x000048, "Member 'FExiledNpcInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FExiledNpcInfoDB, _comment) == 0x000050, "Member 'FExiledNpcInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ExiledNpcSpotInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FExiledNpcSpotInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FExiledNpcSpotInfoPtr) == 0x000008, "Wrong alignment on FExiledNpcSpotInfoPtr");
static_assert(sizeof(FExiledNpcSpotInfoPtr) == 0x000008, "Wrong size on FExiledNpcSpotInfoPtr");

// ScriptStruct ProjectPContentInfo.ResetSystemSettingInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FResetSystemSettingInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FResetSystemSettingInfoPtr) == 0x000008, "Wrong alignment on FResetSystemSettingInfoPtr");
static_assert(sizeof(FResetSystemSettingInfoPtr) == 0x000008, "Wrong size on FResetSystemSettingInfoPtr");

// ScriptStruct ProjectPContentInfo.ExiledNpcInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FExiledNpcInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FExiledNpcInfoPtr) == 0x000008, "Wrong alignment on FExiledNpcInfoPtr");
static_assert(sizeof(FExiledNpcInfoPtr) == 0x000008, "Wrong size on FExiledNpcInfoPtr");

// ScriptStruct ProjectPContentInfo.FallingHeightDamageInfo
// 0x0008 (0x0030 - 0x0028)
struct FFallingHeightDamageInfo final : public FContentInfoBase
{
public:
	int32                                         _falling_height;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _fall_height_dmg_ratio;                            // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFallingHeightDamageInfo) == 0x000008, "Wrong alignment on FFallingHeightDamageInfo");
static_assert(sizeof(FFallingHeightDamageInfo) == 0x000030, "Wrong size on FFallingHeightDamageInfo");
static_assert(offsetof(FFallingHeightDamageInfo, _falling_height) == 0x000028, "Member 'FFallingHeightDamageInfo::_falling_height' has a wrong offset!");
static_assert(offsetof(FFallingHeightDamageInfo, _fall_height_dmg_ratio) == 0x00002C, "Member 'FFallingHeightDamageInfo::_fall_height_dmg_ratio' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.FallingHeightDamageInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FFallingHeightDamageInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FFallingHeightDamageInfo>       _FallingHeightDamage_array;                        // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFallingHeightDamageInfoDB) == 0x000008, "Wrong alignment on FFallingHeightDamageInfoDB");
static_assert(sizeof(FFallingHeightDamageInfoDB) == 0x000050, "Wrong size on FFallingHeightDamageInfoDB");
static_assert(offsetof(FFallingHeightDamageInfoDB, _FallingHeightDamage_array) == 0x000028, "Member 'FFallingHeightDamageInfoDB::_FallingHeightDamage_array' has a wrong offset!");
static_assert(offsetof(FFallingHeightDamageInfoDB, _version) == 0x000038, "Member 'FFallingHeightDamageInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FFallingHeightDamageInfoDB, _comment) == 0x000040, "Member 'FFallingHeightDamageInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PropDestructionInfo
// 0x0090 (0x00B8 - 0x0028)
struct FPropDestructionInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   _model_BP;                                         // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELDeathByOwnerFaction                         _destruction_condition_actor_type;                 // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _destruction_condition_actor_codename;             // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELDestructionConditionActionType              _destruction_condition_action_type;                // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           _destruction_condition_skill_codename;             // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FName>                           _destruction_condition_skillhit_codename;          // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	ELHpDiscountMethod                            _hp_discount_method;                               // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _hp;                                               // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _drop;                                             // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _drop_Prop;                                        // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _destroy_only_once;                                // 0x00B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPropDestructionInfo) == 0x000008, "Wrong alignment on FPropDestructionInfo");
static_assert(sizeof(FPropDestructionInfo) == 0x0000B8, "Wrong size on FPropDestructionInfo");
static_assert(offsetof(FPropDestructionInfo, _code_name) == 0x000028, "Member 'FPropDestructionInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FPropDestructionInfo, _model_BP) == 0x000030, "Member 'FPropDestructionInfo::_model_BP' has a wrong offset!");
static_assert(offsetof(FPropDestructionInfo, _destruction_condition_actor_type) == 0x000058, "Member 'FPropDestructionInfo::_destruction_condition_actor_type' has a wrong offset!");
static_assert(offsetof(FPropDestructionInfo, _destruction_condition_actor_codename) == 0x000060, "Member 'FPropDestructionInfo::_destruction_condition_actor_codename' has a wrong offset!");
static_assert(offsetof(FPropDestructionInfo, _destruction_condition_action_type) == 0x000070, "Member 'FPropDestructionInfo::_destruction_condition_action_type' has a wrong offset!");
static_assert(offsetof(FPropDestructionInfo, _destruction_condition_skill_codename) == 0x000078, "Member 'FPropDestructionInfo::_destruction_condition_skill_codename' has a wrong offset!");
static_assert(offsetof(FPropDestructionInfo, _destruction_condition_skillhit_codename) == 0x000088, "Member 'FPropDestructionInfo::_destruction_condition_skillhit_codename' has a wrong offset!");
static_assert(offsetof(FPropDestructionInfo, _hp_discount_method) == 0x000098, "Member 'FPropDestructionInfo::_hp_discount_method' has a wrong offset!");
static_assert(offsetof(FPropDestructionInfo, _hp) == 0x00009C, "Member 'FPropDestructionInfo::_hp' has a wrong offset!");
static_assert(offsetof(FPropDestructionInfo, _drop) == 0x0000A0, "Member 'FPropDestructionInfo::_drop' has a wrong offset!");
static_assert(offsetof(FPropDestructionInfo, _drop_Prop) == 0x0000A8, "Member 'FPropDestructionInfo::_drop_Prop' has a wrong offset!");
static_assert(offsetof(FPropDestructionInfo, _destroy_only_once) == 0x0000B0, "Member 'FPropDestructionInfo::_destroy_only_once' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PropDestructionInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FPropDestructionInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FPropDestructionInfo>           _PropDestruction_array;                            // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPropDestructionInfoDB) == 0x000008, "Wrong alignment on FPropDestructionInfoDB");
static_assert(sizeof(FPropDestructionInfoDB) == 0x000050, "Wrong size on FPropDestructionInfoDB");
static_assert(offsetof(FPropDestructionInfoDB, _PropDestruction_array) == 0x000028, "Member 'FPropDestructionInfoDB::_PropDestruction_array' has a wrong offset!");
static_assert(offsetof(FPropDestructionInfoDB, _version) == 0x000038, "Member 'FPropDestructionInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FPropDestructionInfoDB, _comment) == 0x000040, "Member 'FPropDestructionInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.FallingHeightDamageInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FFallingHeightDamageInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFallingHeightDamageInfoPtr) == 0x000008, "Wrong alignment on FFallingHeightDamageInfoPtr");
static_assert(sizeof(FFallingHeightDamageInfoPtr) == 0x000008, "Wrong size on FFallingHeightDamageInfoPtr");

// ScriptStruct ProjectPContentInfo.ItemBladeInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FItemBladeInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemBladeInfoPtr) == 0x000008, "Wrong alignment on FItemBladeInfoPtr");
static_assert(sizeof(FItemBladeInfoPtr) == 0x000008, "Wrong size on FItemBladeInfoPtr");

// ScriptStruct ProjectPContentInfo.FallingMotionTransitionInfo
// 0x0048 (0x0070 - 0x0028)
struct FFallingMotionTransitionInfo final : public FContentInfoBase
{
public:
	int32                                         _priority;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _condition_action_state;                           // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _condition_back_hit;                               // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELActionCategory                              _condition_action_category;                        // 0x0035(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _condition_common_action_montage;                  // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _falling_action;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _least_landing_height;                             // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _land_light;                                       // 0x004C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _land_heavy;                                       // 0x0054(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _land_die_light;                                   // 0x005C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _land_die_heavy;                                   // 0x0064(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFallingMotionTransitionInfo) == 0x000008, "Wrong alignment on FFallingMotionTransitionInfo");
static_assert(sizeof(FFallingMotionTransitionInfo) == 0x000070, "Wrong size on FFallingMotionTransitionInfo");
static_assert(offsetof(FFallingMotionTransitionInfo, _priority) == 0x000028, "Member 'FFallingMotionTransitionInfo::_priority' has a wrong offset!");
static_assert(offsetof(FFallingMotionTransitionInfo, _condition_action_state) == 0x00002C, "Member 'FFallingMotionTransitionInfo::_condition_action_state' has a wrong offset!");
static_assert(offsetof(FFallingMotionTransitionInfo, _condition_back_hit) == 0x000034, "Member 'FFallingMotionTransitionInfo::_condition_back_hit' has a wrong offset!");
static_assert(offsetof(FFallingMotionTransitionInfo, _condition_action_category) == 0x000035, "Member 'FFallingMotionTransitionInfo::_condition_action_category' has a wrong offset!");
static_assert(offsetof(FFallingMotionTransitionInfo, _condition_common_action_montage) == 0x000038, "Member 'FFallingMotionTransitionInfo::_condition_common_action_montage' has a wrong offset!");
static_assert(offsetof(FFallingMotionTransitionInfo, _falling_action) == 0x000040, "Member 'FFallingMotionTransitionInfo::_falling_action' has a wrong offset!");
static_assert(offsetof(FFallingMotionTransitionInfo, _least_landing_height) == 0x000048, "Member 'FFallingMotionTransitionInfo::_least_landing_height' has a wrong offset!");
static_assert(offsetof(FFallingMotionTransitionInfo, _land_light) == 0x00004C, "Member 'FFallingMotionTransitionInfo::_land_light' has a wrong offset!");
static_assert(offsetof(FFallingMotionTransitionInfo, _land_heavy) == 0x000054, "Member 'FFallingMotionTransitionInfo::_land_heavy' has a wrong offset!");
static_assert(offsetof(FFallingMotionTransitionInfo, _land_die_light) == 0x00005C, "Member 'FFallingMotionTransitionInfo::_land_die_light' has a wrong offset!");
static_assert(offsetof(FFallingMotionTransitionInfo, _land_die_heavy) == 0x000064, "Member 'FFallingMotionTransitionInfo::_land_die_heavy' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.FallingMotionTransitionInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FFallingMotionTransitionInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FFallingMotionTransitionInfo>   _FallingMotionTransition_array;                    // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFallingMotionTransitionInfoDB) == 0x000008, "Wrong alignment on FFallingMotionTransitionInfoDB");
static_assert(sizeof(FFallingMotionTransitionInfoDB) == 0x000050, "Wrong size on FFallingMotionTransitionInfoDB");
static_assert(offsetof(FFallingMotionTransitionInfoDB, _FallingMotionTransition_array) == 0x000028, "Member 'FFallingMotionTransitionInfoDB::_FallingMotionTransition_array' has a wrong offset!");
static_assert(offsetof(FFallingMotionTransitionInfoDB, _version) == 0x000038, "Member 'FFallingMotionTransitionInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FFallingMotionTransitionInfoDB, _comment) == 0x000040, "Member 'FFallingMotionTransitionInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.FallingMotionTransitionInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FFallingMotionTransitionInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFallingMotionTransitionInfoPtr) == 0x000008, "Wrong alignment on FFallingMotionTransitionInfoPtr");
static_assert(sizeof(FFallingMotionTransitionInfoPtr) == 0x000008, "Wrong size on FFallingMotionTransitionInfoPtr");

// ScriptStruct ProjectPContentInfo.FallingSurfaceDamageInfo
// 0x0008 (0x0030 - 0x0028)
struct FFallingSurfaceDamageInfo final : public FContentInfoBase
{
public:
	ELPhysicalSurfaceType                         _surface_type;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _fall_surface_dmg_ratio;                           // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFallingSurfaceDamageInfo) == 0x000008, "Wrong alignment on FFallingSurfaceDamageInfo");
static_assert(sizeof(FFallingSurfaceDamageInfo) == 0x000030, "Wrong size on FFallingSurfaceDamageInfo");
static_assert(offsetof(FFallingSurfaceDamageInfo, _surface_type) == 0x000028, "Member 'FFallingSurfaceDamageInfo::_surface_type' has a wrong offset!");
static_assert(offsetof(FFallingSurfaceDamageInfo, _fall_surface_dmg_ratio) == 0x00002C, "Member 'FFallingSurfaceDamageInfo::_fall_surface_dmg_ratio' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.FallingSurfaceDamageInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FFallingSurfaceDamageInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FFallingSurfaceDamageInfo>      _FallingSurfaceDamage_array;                       // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFallingSurfaceDamageInfoDB) == 0x000008, "Wrong alignment on FFallingSurfaceDamageInfoDB");
static_assert(sizeof(FFallingSurfaceDamageInfoDB) == 0x000050, "Wrong size on FFallingSurfaceDamageInfoDB");
static_assert(offsetof(FFallingSurfaceDamageInfoDB, _FallingSurfaceDamage_array) == 0x000028, "Member 'FFallingSurfaceDamageInfoDB::_FallingSurfaceDamage_array' has a wrong offset!");
static_assert(offsetof(FFallingSurfaceDamageInfoDB, _version) == 0x000038, "Member 'FFallingSurfaceDamageInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FFallingSurfaceDamageInfoDB, _comment) == 0x000040, "Member 'FFallingSurfaceDamageInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.NPCSkillStandbyInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FNPCSkillStandbyInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNPCSkillStandbyInfoPtr) == 0x000008, "Wrong alignment on FNPCSkillStandbyInfoPtr");
static_assert(sizeof(FNPCSkillStandbyInfoPtr) == 0x000008, "Wrong size on FNPCSkillStandbyInfoPtr");

// ScriptStruct ProjectPContentInfo.PulsePointMaxInfo
// 0x0008 (0x0030 - 0x0028)
struct FPulsePointMaxInfo final : public FContentInfoBase
{
public:
	int32                                         _recharge_count;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _pulse_recharge_point_max;                         // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPulsePointMaxInfo) == 0x000008, "Wrong alignment on FPulsePointMaxInfo");
static_assert(sizeof(FPulsePointMaxInfo) == 0x000030, "Wrong size on FPulsePointMaxInfo");
static_assert(offsetof(FPulsePointMaxInfo, _recharge_count) == 0x000028, "Member 'FPulsePointMaxInfo::_recharge_count' has a wrong offset!");
static_assert(offsetof(FPulsePointMaxInfo, _pulse_recharge_point_max) == 0x00002C, "Member 'FPulsePointMaxInfo::_pulse_recharge_point_max' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PulsePointMaxInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FPulsePointMaxInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FPulsePointMaxInfo>             _PulsePointMax_array;                              // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPulsePointMaxInfoDB) == 0x000008, "Wrong alignment on FPulsePointMaxInfoDB");
static_assert(sizeof(FPulsePointMaxInfoDB) == 0x000050, "Wrong size on FPulsePointMaxInfoDB");
static_assert(offsetof(FPulsePointMaxInfoDB, _PulsePointMax_array) == 0x000028, "Member 'FPulsePointMaxInfoDB::_PulsePointMax_array' has a wrong offset!");
static_assert(offsetof(FPulsePointMaxInfoDB, _version) == 0x000038, "Member 'FPulsePointMaxInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FPulsePointMaxInfoDB, _comment) == 0x000040, "Member 'FPulsePointMaxInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.FallingWeightDamageInfo
// 0x0008 (0x0030 - 0x0028)
struct FFallingWeightDamageInfo final : public FContentInfoBase
{
public:
	int32                                         _weight_rate;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _fall_weight_dmg_ratio;                            // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFallingWeightDamageInfo) == 0x000008, "Wrong alignment on FFallingWeightDamageInfo");
static_assert(sizeof(FFallingWeightDamageInfo) == 0x000030, "Wrong size on FFallingWeightDamageInfo");
static_assert(offsetof(FFallingWeightDamageInfo, _weight_rate) == 0x000028, "Member 'FFallingWeightDamageInfo::_weight_rate' has a wrong offset!");
static_assert(offsetof(FFallingWeightDamageInfo, _fall_weight_dmg_ratio) == 0x00002C, "Member 'FFallingWeightDamageInfo::_fall_weight_dmg_ratio' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.FallingWeightDamageInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FFallingWeightDamageInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FFallingWeightDamageInfo>       _FallingWeightDamage_array;                        // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFallingWeightDamageInfoDB) == 0x000008, "Wrong alignment on FFallingWeightDamageInfoDB");
static_assert(sizeof(FFallingWeightDamageInfoDB) == 0x000050, "Wrong size on FFallingWeightDamageInfoDB");
static_assert(offsetof(FFallingWeightDamageInfoDB, _FallingWeightDamage_array) == 0x000028, "Member 'FFallingWeightDamageInfoDB::_FallingWeightDamage_array' has a wrong offset!");
static_assert(offsetof(FFallingWeightDamageInfoDB, _version) == 0x000038, "Member 'FFallingWeightDamageInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FFallingWeightDamageInfoDB, _comment) == 0x000040, "Member 'FFallingWeightDamageInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.Skill_IndicatorInfo
// 0x0038 (0x0060 - 0x0028)
struct FSkill_IndicatorInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   _action_class;                                     // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELActionCategory                              _system_category;                                  // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkill_IndicatorInfo) == 0x000008, "Wrong alignment on FSkill_IndicatorInfo");
static_assert(sizeof(FSkill_IndicatorInfo) == 0x000060, "Wrong size on FSkill_IndicatorInfo");
static_assert(offsetof(FSkill_IndicatorInfo, _code_name) == 0x000028, "Member 'FSkill_IndicatorInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FSkill_IndicatorInfo, _action_class) == 0x000030, "Member 'FSkill_IndicatorInfo::_action_class' has a wrong offset!");
static_assert(offsetof(FSkill_IndicatorInfo, _system_category) == 0x000058, "Member 'FSkill_IndicatorInfo::_system_category' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.Skill_IndicatorInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FSkill_IndicatorInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSkill_IndicatorInfo>           _Skill_Indicator_array;                            // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkill_IndicatorInfoDB) == 0x000008, "Wrong alignment on FSkill_IndicatorInfoDB");
static_assert(sizeof(FSkill_IndicatorInfoDB) == 0x0000A0, "Wrong size on FSkill_IndicatorInfoDB");
static_assert(offsetof(FSkill_IndicatorInfoDB, _Skill_Indicator_array) == 0x000078, "Member 'FSkill_IndicatorInfoDB::_Skill_Indicator_array' has a wrong offset!");
static_assert(offsetof(FSkill_IndicatorInfoDB, _version) == 0x000088, "Member 'FSkill_IndicatorInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FSkill_IndicatorInfoDB, _comment) == 0x000090, "Member 'FSkill_IndicatorInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.FallingWeightDamageInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FFallingWeightDamageInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFallingWeightDamageInfoPtr) == 0x000008, "Wrong alignment on FFallingWeightDamageInfoPtr");
static_assert(sizeof(FFallingWeightDamageInfoPtr) == 0x000008, "Wrong size on FFallingWeightDamageInfoPtr");

// ScriptStruct ProjectPContentInfo.FlagFilterInfo
// 0x0050 (0x0078 - 0x0028)
struct FFlagFilterInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _priority;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELBooleanOrIgnore                             _lever_neutral;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELBooleanOrIgnore                             _acting;                                           // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELBooleanOrIgnore                             _jumping;                                          // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELBooleanOrIgnore                             _sprinting;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELBooleanOrIgnore                             _falling;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELBooleanOrIgnore                             _lock_on;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELBooleanOrIgnore                             _frenzy;                                           // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELBooleanOrIgnore                             _dash_disable;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELBooleanOrIgnore                             _dash_superheavy;                                  // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELBooleanOrIgnore                             _allow_dash_light;                                 // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELBooleanOrIgnore                             _allow_dash_heavy;                                 // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELBooleanOrIgnore                             _allowinput_doubledash;                            // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELBooleanOrIgnore                             _allowinput_getupdash_f;                           // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELBooleanOrIgnore                             _allowinput_getupdash_b;                           // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELBooleanOrIgnore                             _weapon_transform;                                 // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELBooleanOrIgnore                             _get_up_dash_disable;                              // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFlagFilterInfo) == 0x000008, "Wrong alignment on FFlagFilterInfo");
static_assert(sizeof(FFlagFilterInfo) == 0x000078, "Wrong size on FFlagFilterInfo");
static_assert(offsetof(FFlagFilterInfo, _code_name) == 0x000028, "Member 'FFlagFilterInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FFlagFilterInfo, _priority) == 0x000030, "Member 'FFlagFilterInfo::_priority' has a wrong offset!");
static_assert(offsetof(FFlagFilterInfo, _lever_neutral) == 0x000034, "Member 'FFlagFilterInfo::_lever_neutral' has a wrong offset!");
static_assert(offsetof(FFlagFilterInfo, _acting) == 0x000038, "Member 'FFlagFilterInfo::_acting' has a wrong offset!");
static_assert(offsetof(FFlagFilterInfo, _jumping) == 0x00003C, "Member 'FFlagFilterInfo::_jumping' has a wrong offset!");
static_assert(offsetof(FFlagFilterInfo, _sprinting) == 0x000040, "Member 'FFlagFilterInfo::_sprinting' has a wrong offset!");
static_assert(offsetof(FFlagFilterInfo, _falling) == 0x000044, "Member 'FFlagFilterInfo::_falling' has a wrong offset!");
static_assert(offsetof(FFlagFilterInfo, _lock_on) == 0x000048, "Member 'FFlagFilterInfo::_lock_on' has a wrong offset!");
static_assert(offsetof(FFlagFilterInfo, _frenzy) == 0x00004C, "Member 'FFlagFilterInfo::_frenzy' has a wrong offset!");
static_assert(offsetof(FFlagFilterInfo, _dash_disable) == 0x000050, "Member 'FFlagFilterInfo::_dash_disable' has a wrong offset!");
static_assert(offsetof(FFlagFilterInfo, _dash_superheavy) == 0x000054, "Member 'FFlagFilterInfo::_dash_superheavy' has a wrong offset!");
static_assert(offsetof(FFlagFilterInfo, _allow_dash_light) == 0x000058, "Member 'FFlagFilterInfo::_allow_dash_light' has a wrong offset!");
static_assert(offsetof(FFlagFilterInfo, _allow_dash_heavy) == 0x00005C, "Member 'FFlagFilterInfo::_allow_dash_heavy' has a wrong offset!");
static_assert(offsetof(FFlagFilterInfo, _allowinput_doubledash) == 0x000060, "Member 'FFlagFilterInfo::_allowinput_doubledash' has a wrong offset!");
static_assert(offsetof(FFlagFilterInfo, _allowinput_getupdash_f) == 0x000064, "Member 'FFlagFilterInfo::_allowinput_getupdash_f' has a wrong offset!");
static_assert(offsetof(FFlagFilterInfo, _allowinput_getupdash_b) == 0x000068, "Member 'FFlagFilterInfo::_allowinput_getupdash_b' has a wrong offset!");
static_assert(offsetof(FFlagFilterInfo, _weapon_transform) == 0x00006C, "Member 'FFlagFilterInfo::_weapon_transform' has a wrong offset!");
static_assert(offsetof(FFlagFilterInfo, _get_up_dash_disable) == 0x000070, "Member 'FFlagFilterInfo::_get_up_dash_disable' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.FlagFilterInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FFlagFilterInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFlagFilterInfo>                _FlagFilterInfo_array;                             // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFlagFilterInfoDB) == 0x000008, "Wrong alignment on FFlagFilterInfoDB");
static_assert(sizeof(FFlagFilterInfoDB) == 0x0000A0, "Wrong size on FFlagFilterInfoDB");
static_assert(offsetof(FFlagFilterInfoDB, _FlagFilterInfo_array) == 0x000078, "Member 'FFlagFilterInfoDB::_FlagFilterInfo_array' has a wrong offset!");
static_assert(offsetof(FFlagFilterInfoDB, _version) == 0x000088, "Member 'FFlagFilterInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FFlagFilterInfoDB, _comment) == 0x000090, "Member 'FFlagFilterInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.HandleStatCorrectionChangeInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FHandleStatCorrectionChangeInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHandleStatCorrectionChangeInfoPtr) == 0x000008, "Wrong alignment on FHandleStatCorrectionChangeInfoPtr");
static_assert(sizeof(FHandleStatCorrectionChangeInfoPtr) == 0x000008, "Wrong size on FHandleStatCorrectionChangeInfoPtr");

// ScriptStruct ProjectPContentInfo.FlagFilterInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FFlagFilterInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFlagFilterInfoPtr) == 0x000008, "Wrong alignment on FFlagFilterInfoPtr");
static_assert(sizeof(FFlagFilterInfoPtr) == 0x000008, "Wrong size on FFlagFilterInfoPtr");

// ScriptStruct ProjectPContentInfo.FootstepInfo
// 0x0088 (0x00B0 - 0x0028)
struct FFootstepInfo final : public FContentInfoBase
{
public:
	class FName                                   _event_name;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPhysicalSurfaceType                         _material_type;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 _effect;                                           // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _sound1;                                           // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _sound2;                                           // 0x0088(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootstepInfo) == 0x000008, "Wrong alignment on FFootstepInfo");
static_assert(sizeof(FFootstepInfo) == 0x0000B0, "Wrong size on FFootstepInfo");
static_assert(offsetof(FFootstepInfo, _event_name) == 0x000028, "Member 'FFootstepInfo::_event_name' has a wrong offset!");
static_assert(offsetof(FFootstepInfo, _material_type) == 0x000030, "Member 'FFootstepInfo::_material_type' has a wrong offset!");
static_assert(offsetof(FFootstepInfo, _effect) == 0x000038, "Member 'FFootstepInfo::_effect' has a wrong offset!");
static_assert(offsetof(FFootstepInfo, _sound1) == 0x000060, "Member 'FFootstepInfo::_sound1' has a wrong offset!");
static_assert(offsetof(FFootstepInfo, _sound2) == 0x000088, "Member 'FFootstepInfo::_sound2' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.FootstepInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FFootstepInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FFootstepInfo>                  _FootstepInfo_array;                               // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootstepInfoDB) == 0x000008, "Wrong alignment on FFootstepInfoDB");
static_assert(sizeof(FFootstepInfoDB) == 0x000050, "Wrong size on FFootstepInfoDB");
static_assert(offsetof(FFootstepInfoDB, _FootstepInfo_array) == 0x000028, "Member 'FFootstepInfoDB::_FootstepInfo_array' has a wrong offset!");
static_assert(offsetof(FFootstepInfoDB, _version) == 0x000038, "Member 'FFootstepInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FFootstepInfoDB, _comment) == 0x000040, "Member 'FFootstepInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PropSetProjectileInfo
// 0x00A8 (0x00D0 - 0x0028)
struct FPropSetProjectileInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _init_state;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _state;                                            // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _active_fire;                                      // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   _model_BP;                                         // 0x0040(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _model_resource;                                   // 0x0068(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _montage_resource;                                 // 0x0090(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _default_montage_section;                          // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _fire_montage_section;                             // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPropVolumeStateCheckType                    _volume_check_change_state;                        // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _set_state_num;                                    // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPropSetProjectileInfo) == 0x000008, "Wrong alignment on FPropSetProjectileInfo");
static_assert(sizeof(FPropSetProjectileInfo) == 0x0000D0, "Wrong size on FPropSetProjectileInfo");
static_assert(offsetof(FPropSetProjectileInfo, _code_name) == 0x000028, "Member 'FPropSetProjectileInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FPropSetProjectileInfo, _init_state) == 0x000030, "Member 'FPropSetProjectileInfo::_init_state' has a wrong offset!");
static_assert(offsetof(FPropSetProjectileInfo, _state) == 0x000034, "Member 'FPropSetProjectileInfo::_state' has a wrong offset!");
static_assert(offsetof(FPropSetProjectileInfo, _active_fire) == 0x000038, "Member 'FPropSetProjectileInfo::_active_fire' has a wrong offset!");
static_assert(offsetof(FPropSetProjectileInfo, _model_BP) == 0x000040, "Member 'FPropSetProjectileInfo::_model_BP' has a wrong offset!");
static_assert(offsetof(FPropSetProjectileInfo, _model_resource) == 0x000068, "Member 'FPropSetProjectileInfo::_model_resource' has a wrong offset!");
static_assert(offsetof(FPropSetProjectileInfo, _montage_resource) == 0x000090, "Member 'FPropSetProjectileInfo::_montage_resource' has a wrong offset!");
static_assert(offsetof(FPropSetProjectileInfo, _default_montage_section) == 0x0000B8, "Member 'FPropSetProjectileInfo::_default_montage_section' has a wrong offset!");
static_assert(offsetof(FPropSetProjectileInfo, _fire_montage_section) == 0x0000C0, "Member 'FPropSetProjectileInfo::_fire_montage_section' has a wrong offset!");
static_assert(offsetof(FPropSetProjectileInfo, _volume_check_change_state) == 0x0000C8, "Member 'FPropSetProjectileInfo::_volume_check_change_state' has a wrong offset!");
static_assert(offsetof(FPropSetProjectileInfo, _set_state_num) == 0x0000CC, "Member 'FPropSetProjectileInfo::_set_state_num' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.FootstepInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FFootstepInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFootstepInfoPtr) == 0x000008, "Wrong alignment on FFootstepInfoPtr");
static_assert(sizeof(FFootstepInfoPtr) == 0x000008, "Wrong size on FFootstepInfoPtr");

// ScriptStruct ProjectPContentInfo.FxInfo
// 0x0060 (0x0088 - 0x0028)
struct FFxInfo final : public FContentInfoBase
{
public:
	class FName                                   _event_name;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _attribute;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _effect;                                           // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _sound;                                            // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFxInfo) == 0x000008, "Wrong alignment on FFxInfo");
static_assert(sizeof(FFxInfo) == 0x000088, "Wrong size on FFxInfo");
static_assert(offsetof(FFxInfo, _event_name) == 0x000028, "Member 'FFxInfo::_event_name' has a wrong offset!");
static_assert(offsetof(FFxInfo, _attribute) == 0x000030, "Member 'FFxInfo::_attribute' has a wrong offset!");
static_assert(offsetof(FFxInfo, _effect) == 0x000038, "Member 'FFxInfo::_effect' has a wrong offset!");
static_assert(offsetof(FFxInfo, _sound) == 0x000060, "Member 'FFxInfo::_sound' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.FxInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FFxInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FFxInfo>                        _FxInfo_array;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFxInfoDB) == 0x000008, "Wrong alignment on FFxInfoDB");
static_assert(sizeof(FFxInfoDB) == 0x000050, "Wrong size on FFxInfoDB");
static_assert(offsetof(FFxInfoDB, _FxInfo_array) == 0x000028, "Member 'FFxInfoDB::_FxInfo_array' has a wrong offset!");
static_assert(offsetof(FFxInfoDB, _version) == 0x000038, "Member 'FFxInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FFxInfoDB, _comment) == 0x000040, "Member 'FFxInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.FirstStatToSecondStatInfo
// 0x0068 (0x0090 - 0x0028)
struct FFirstStatToSecondStatInfo final : public FContentInfoBase
{
public:
	int32                                         _stat_level;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELFirstStat                                   _first_stat_a;                                     // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSecondStat                                  _second_stat_a;                                    // 0x002D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _conversion_value_a;                               // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSecondStat                                  _second_stat_b;                                    // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _conversion_value_b;                               // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSecondStat                                  _second_stat_c;                                    // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _conversion_value_c;                               // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSecondStat                                  _second_stat_d;                                    // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _conversion_value_d;                               // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSecondStat                                  _second_stat_e;                                    // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _conversion_value_e;                               // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSecondStat                                  _second_stat_f;                                    // 0x0054(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _conversion_value_f;                               // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSecondStat                                  _second_stat_g;                                    // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _conversion_value_g;                               // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSecondStat                                  _second_stat_h;                                    // 0x0064(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _conversion_value_h;                               // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSecondStat                                  _second_stat_i;                                    // 0x006C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _conversion_value_i;                               // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSecondStat                                  _second_stat_j;                                    // 0x0074(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _conversion_value_j;                               // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSecondStat                                  _second_stat_k;                                    // 0x007C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _conversion_value_k;                               // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSecondStat                                  _second_stat_l;                                    // 0x0084(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _conversion_value_l;                               // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFirstStatToSecondStatInfo) == 0x000008, "Wrong alignment on FFirstStatToSecondStatInfo");
static_assert(sizeof(FFirstStatToSecondStatInfo) == 0x000090, "Wrong size on FFirstStatToSecondStatInfo");
static_assert(offsetof(FFirstStatToSecondStatInfo, _stat_level) == 0x000028, "Member 'FFirstStatToSecondStatInfo::_stat_level' has a wrong offset!");
static_assert(offsetof(FFirstStatToSecondStatInfo, _first_stat_a) == 0x00002C, "Member 'FFirstStatToSecondStatInfo::_first_stat_a' has a wrong offset!");
static_assert(offsetof(FFirstStatToSecondStatInfo, _second_stat_a) == 0x00002D, "Member 'FFirstStatToSecondStatInfo::_second_stat_a' has a wrong offset!");
static_assert(offsetof(FFirstStatToSecondStatInfo, _conversion_value_a) == 0x000030, "Member 'FFirstStatToSecondStatInfo::_conversion_value_a' has a wrong offset!");
static_assert(offsetof(FFirstStatToSecondStatInfo, _second_stat_b) == 0x000034, "Member 'FFirstStatToSecondStatInfo::_second_stat_b' has a wrong offset!");
static_assert(offsetof(FFirstStatToSecondStatInfo, _conversion_value_b) == 0x000038, "Member 'FFirstStatToSecondStatInfo::_conversion_value_b' has a wrong offset!");
static_assert(offsetof(FFirstStatToSecondStatInfo, _second_stat_c) == 0x00003C, "Member 'FFirstStatToSecondStatInfo::_second_stat_c' has a wrong offset!");
static_assert(offsetof(FFirstStatToSecondStatInfo, _conversion_value_c) == 0x000040, "Member 'FFirstStatToSecondStatInfo::_conversion_value_c' has a wrong offset!");
static_assert(offsetof(FFirstStatToSecondStatInfo, _second_stat_d) == 0x000044, "Member 'FFirstStatToSecondStatInfo::_second_stat_d' has a wrong offset!");
static_assert(offsetof(FFirstStatToSecondStatInfo, _conversion_value_d) == 0x000048, "Member 'FFirstStatToSecondStatInfo::_conversion_value_d' has a wrong offset!");
static_assert(offsetof(FFirstStatToSecondStatInfo, _second_stat_e) == 0x00004C, "Member 'FFirstStatToSecondStatInfo::_second_stat_e' has a wrong offset!");
static_assert(offsetof(FFirstStatToSecondStatInfo, _conversion_value_e) == 0x000050, "Member 'FFirstStatToSecondStatInfo::_conversion_value_e' has a wrong offset!");
static_assert(offsetof(FFirstStatToSecondStatInfo, _second_stat_f) == 0x000054, "Member 'FFirstStatToSecondStatInfo::_second_stat_f' has a wrong offset!");
static_assert(offsetof(FFirstStatToSecondStatInfo, _conversion_value_f) == 0x000058, "Member 'FFirstStatToSecondStatInfo::_conversion_value_f' has a wrong offset!");
static_assert(offsetof(FFirstStatToSecondStatInfo, _second_stat_g) == 0x00005C, "Member 'FFirstStatToSecondStatInfo::_second_stat_g' has a wrong offset!");
static_assert(offsetof(FFirstStatToSecondStatInfo, _conversion_value_g) == 0x000060, "Member 'FFirstStatToSecondStatInfo::_conversion_value_g' has a wrong offset!");
static_assert(offsetof(FFirstStatToSecondStatInfo, _second_stat_h) == 0x000064, "Member 'FFirstStatToSecondStatInfo::_second_stat_h' has a wrong offset!");
static_assert(offsetof(FFirstStatToSecondStatInfo, _conversion_value_h) == 0x000068, "Member 'FFirstStatToSecondStatInfo::_conversion_value_h' has a wrong offset!");
static_assert(offsetof(FFirstStatToSecondStatInfo, _second_stat_i) == 0x00006C, "Member 'FFirstStatToSecondStatInfo::_second_stat_i' has a wrong offset!");
static_assert(offsetof(FFirstStatToSecondStatInfo, _conversion_value_i) == 0x000070, "Member 'FFirstStatToSecondStatInfo::_conversion_value_i' has a wrong offset!");
static_assert(offsetof(FFirstStatToSecondStatInfo, _second_stat_j) == 0x000074, "Member 'FFirstStatToSecondStatInfo::_second_stat_j' has a wrong offset!");
static_assert(offsetof(FFirstStatToSecondStatInfo, _conversion_value_j) == 0x000078, "Member 'FFirstStatToSecondStatInfo::_conversion_value_j' has a wrong offset!");
static_assert(offsetof(FFirstStatToSecondStatInfo, _second_stat_k) == 0x00007C, "Member 'FFirstStatToSecondStatInfo::_second_stat_k' has a wrong offset!");
static_assert(offsetof(FFirstStatToSecondStatInfo, _conversion_value_k) == 0x000080, "Member 'FFirstStatToSecondStatInfo::_conversion_value_k' has a wrong offset!");
static_assert(offsetof(FFirstStatToSecondStatInfo, _second_stat_l) == 0x000084, "Member 'FFirstStatToSecondStatInfo::_second_stat_l' has a wrong offset!");
static_assert(offsetof(FFirstStatToSecondStatInfo, _conversion_value_l) == 0x000088, "Member 'FFirstStatToSecondStatInfo::_conversion_value_l' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.FxInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FFxInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFxInfoPtr) == 0x000008, "Wrong alignment on FFxInfoPtr");
static_assert(sizeof(FFxInfoPtr) == 0x000008, "Wrong size on FFxInfoPtr");

// ScriptStruct ProjectPContentInfo.SkillMoveInfo
// 0x00A0 (0x00C8 - 0x0028)
struct FSkillMoveInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ignore_rootmotion_move;                           // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ignore_rootmotion_rotation;                       // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _apply_anim_scaling;                               // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _rotate_enable;                                    // 0x0033(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _rotate_limit;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _rotate_angle_use;                                 // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _rotate_angle;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _rotate_use_capture_location;                      // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _rotate_tracking_use;                              // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _rotate_tracking_full_homing_use;                  // 0x0042(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _rotate_tracking_speed;                            // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _rotate_tracking_completion_degree;                // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _rotate_tracking_completion_degree_left;           // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _rotate_tracking_completion_degree_right;          // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _rotate_tracking_give_up_degree;                   // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTrackingDirectionType                       _rotate_tracking_direction;                        // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _rotate_tracking_rotate_angle_offset;              // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _rotate_tracking_set_direction_on_start;           // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _rotate_tracking_set_direction_on_start_left;      // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _rotate_tracking_set_direction_on_start_right;     // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _move_enable;                                      // 0x006C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _move_rot_yaw;                                     // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _move_fixed_direction_use;                         // 0x0074(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _move_distance;                                    // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _move_speed;                                       // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _move_check_nav_path;                              // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 _move_curve;                                       // 0x0088(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _move_ignore_rotate_use;                           // 0x00B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _move_to_target_use;                               // 0x00B1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0x2];                                       // 0x00B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _move_to_target_speed;                             // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _move_to_target_offset_distance;                   // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _pursuit_to_target_scaling_speed_use;              // 0x00BC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _pursuit_to_target_scaling_speed_max;              // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _pursuit_to_target_scaling_offset_distance;        // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillMoveInfo) == 0x000008, "Wrong alignment on FSkillMoveInfo");
static_assert(sizeof(FSkillMoveInfo) == 0x0000C8, "Wrong size on FSkillMoveInfo");
static_assert(offsetof(FSkillMoveInfo, _code_name) == 0x000028, "Member 'FSkillMoveInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _ignore_rootmotion_move) == 0x000030, "Member 'FSkillMoveInfo::_ignore_rootmotion_move' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _ignore_rootmotion_rotation) == 0x000031, "Member 'FSkillMoveInfo::_ignore_rootmotion_rotation' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _apply_anim_scaling) == 0x000032, "Member 'FSkillMoveInfo::_apply_anim_scaling' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _rotate_enable) == 0x000033, "Member 'FSkillMoveInfo::_rotate_enable' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _rotate_limit) == 0x000034, "Member 'FSkillMoveInfo::_rotate_limit' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _rotate_angle_use) == 0x000038, "Member 'FSkillMoveInfo::_rotate_angle_use' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _rotate_angle) == 0x00003C, "Member 'FSkillMoveInfo::_rotate_angle' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _rotate_use_capture_location) == 0x000040, "Member 'FSkillMoveInfo::_rotate_use_capture_location' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _rotate_tracking_use) == 0x000041, "Member 'FSkillMoveInfo::_rotate_tracking_use' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _rotate_tracking_full_homing_use) == 0x000042, "Member 'FSkillMoveInfo::_rotate_tracking_full_homing_use' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _rotate_tracking_speed) == 0x000044, "Member 'FSkillMoveInfo::_rotate_tracking_speed' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _rotate_tracking_completion_degree) == 0x000048, "Member 'FSkillMoveInfo::_rotate_tracking_completion_degree' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _rotate_tracking_completion_degree_left) == 0x00004C, "Member 'FSkillMoveInfo::_rotate_tracking_completion_degree_left' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _rotate_tracking_completion_degree_right) == 0x000050, "Member 'FSkillMoveInfo::_rotate_tracking_completion_degree_right' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _rotate_tracking_give_up_degree) == 0x000054, "Member 'FSkillMoveInfo::_rotate_tracking_give_up_degree' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _rotate_tracking_direction) == 0x000058, "Member 'FSkillMoveInfo::_rotate_tracking_direction' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _rotate_tracking_rotate_angle_offset) == 0x00005C, "Member 'FSkillMoveInfo::_rotate_tracking_rotate_angle_offset' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _rotate_tracking_set_direction_on_start) == 0x000060, "Member 'FSkillMoveInfo::_rotate_tracking_set_direction_on_start' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _rotate_tracking_set_direction_on_start_left) == 0x000064, "Member 'FSkillMoveInfo::_rotate_tracking_set_direction_on_start_left' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _rotate_tracking_set_direction_on_start_right) == 0x000068, "Member 'FSkillMoveInfo::_rotate_tracking_set_direction_on_start_right' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _move_enable) == 0x00006C, "Member 'FSkillMoveInfo::_move_enable' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _move_rot_yaw) == 0x000070, "Member 'FSkillMoveInfo::_move_rot_yaw' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _move_fixed_direction_use) == 0x000074, "Member 'FSkillMoveInfo::_move_fixed_direction_use' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _move_distance) == 0x000078, "Member 'FSkillMoveInfo::_move_distance' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _move_speed) == 0x00007C, "Member 'FSkillMoveInfo::_move_speed' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _move_check_nav_path) == 0x000080, "Member 'FSkillMoveInfo::_move_check_nav_path' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _move_curve) == 0x000088, "Member 'FSkillMoveInfo::_move_curve' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _move_ignore_rotate_use) == 0x0000B0, "Member 'FSkillMoveInfo::_move_ignore_rotate_use' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _move_to_target_use) == 0x0000B1, "Member 'FSkillMoveInfo::_move_to_target_use' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _move_to_target_speed) == 0x0000B4, "Member 'FSkillMoveInfo::_move_to_target_speed' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _move_to_target_offset_distance) == 0x0000B8, "Member 'FSkillMoveInfo::_move_to_target_offset_distance' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _pursuit_to_target_scaling_speed_use) == 0x0000BC, "Member 'FSkillMoveInfo::_pursuit_to_target_scaling_speed_use' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _pursuit_to_target_scaling_speed_max) == 0x0000C0, "Member 'FSkillMoveInfo::_pursuit_to_target_scaling_speed_max' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfo, _pursuit_to_target_scaling_offset_distance) == 0x0000C4, "Member 'FSkillMoveInfo::_pursuit_to_target_scaling_offset_distance' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.GameStringInfo
// 0x0020 (0x0048 - 0x0028)
struct FGameStringInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _game_string;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _game_string_cn;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameStringInfo) == 0x000008, "Wrong alignment on FGameStringInfo");
static_assert(sizeof(FGameStringInfo) == 0x000048, "Wrong size on FGameStringInfo");
static_assert(offsetof(FGameStringInfo, _code_name) == 0x000028, "Member 'FGameStringInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FGameStringInfo, _game_string) == 0x000030, "Member 'FGameStringInfo::_game_string' has a wrong offset!");
static_assert(offsetof(FGameStringInfo, _game_string_cn) == 0x000040, "Member 'FGameStringInfo::_game_string_cn' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.GameStringInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FGameStringInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameStringInfo>                _GameStringInfo_array;                             // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameStringInfoDB) == 0x000008, "Wrong alignment on FGameStringInfoDB");
static_assert(sizeof(FGameStringInfoDB) == 0x0000A0, "Wrong size on FGameStringInfoDB");
static_assert(offsetof(FGameStringInfoDB, _GameStringInfo_array) == 0x000078, "Member 'FGameStringInfoDB::_GameStringInfo_array' has a wrong offset!");
static_assert(offsetof(FGameStringInfoDB, _version) == 0x000088, "Member 'FGameStringInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FGameStringInfoDB, _comment) == 0x000090, "Member 'FGameStringInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PathWayInfo
// 0x0018 (0x0040 - 0x0028)
struct FPathWayInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _index;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPathWayType                                 _type;                                             // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _arrival_radius;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _wait_time;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPathWayInfo) == 0x000008, "Wrong alignment on FPathWayInfo");
static_assert(sizeof(FPathWayInfo) == 0x000040, "Wrong size on FPathWayInfo");
static_assert(offsetof(FPathWayInfo, _code_name) == 0x000028, "Member 'FPathWayInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FPathWayInfo, _index) == 0x000030, "Member 'FPathWayInfo::_index' has a wrong offset!");
static_assert(offsetof(FPathWayInfo, _type) == 0x000034, "Member 'FPathWayInfo::_type' has a wrong offset!");
static_assert(offsetof(FPathWayInfo, _arrival_radius) == 0x000038, "Member 'FPathWayInfo::_arrival_radius' has a wrong offset!");
static_assert(offsetof(FPathWayInfo, _wait_time) == 0x00003C, "Member 'FPathWayInfo::_wait_time' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.GameStringInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FGameStringInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameStringInfoPtr) == 0x000008, "Wrong alignment on FGameStringInfoPtr");
static_assert(sizeof(FGameStringInfoPtr) == 0x000008, "Wrong size on FGameStringInfoPtr");

// ScriptStruct ProjectPContentInfo.GlobalVariableInfo
// 0x0010 (0x0038 - 0x0028)
struct FGlobalVariableInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _init_value;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGlobalVariableInfo) == 0x000008, "Wrong alignment on FGlobalVariableInfo");
static_assert(sizeof(FGlobalVariableInfo) == 0x000038, "Wrong size on FGlobalVariableInfo");
static_assert(offsetof(FGlobalVariableInfo, _code_name) == 0x000028, "Member 'FGlobalVariableInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FGlobalVariableInfo, _init_value) == 0x000030, "Member 'FGlobalVariableInfo::_init_value' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.GlobalVariableInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FGlobalVariableInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGlobalVariableInfo>            _GlobalVariable_array;                             // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGlobalVariableInfoDB) == 0x000008, "Wrong alignment on FGlobalVariableInfoDB");
static_assert(sizeof(FGlobalVariableInfoDB) == 0x0000A0, "Wrong size on FGlobalVariableInfoDB");
static_assert(offsetof(FGlobalVariableInfoDB, _GlobalVariable_array) == 0x000078, "Member 'FGlobalVariableInfoDB::_GlobalVariable_array' has a wrong offset!");
static_assert(offsetof(FGlobalVariableInfoDB, _version) == 0x000088, "Member 'FGlobalVariableInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FGlobalVariableInfoDB, _comment) == 0x000090, "Member 'FGlobalVariableInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ResetNeedItemInfo
// 0x0010 (0x0038 - 0x0028)
struct FResetNeedItemInfo final : public FContentInfoBase
{
public:
	int32                                         _reset_count;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _need_item_code_name;                              // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _num;                                              // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResetNeedItemInfo) == 0x000008, "Wrong alignment on FResetNeedItemInfo");
static_assert(sizeof(FResetNeedItemInfo) == 0x000038, "Wrong size on FResetNeedItemInfo");
static_assert(offsetof(FResetNeedItemInfo, _reset_count) == 0x000028, "Member 'FResetNeedItemInfo::_reset_count' has a wrong offset!");
static_assert(offsetof(FResetNeedItemInfo, _need_item_code_name) == 0x00002C, "Member 'FResetNeedItemInfo::_need_item_code_name' has a wrong offset!");
static_assert(offsetof(FResetNeedItemInfo, _num) == 0x000034, "Member 'FResetNeedItemInfo::_num' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ResetSystemSettingInfo
// 0x0018 (0x0040 - 0x0028)
struct FResetSystemSettingInfo final : public FContentInfoBase
{
public:
	TArray<struct FResetNeedItemInfo>             _need_items_array;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FName                                   _code_name;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResetSystemSettingInfo) == 0x000008, "Wrong alignment on FResetSystemSettingInfo");
static_assert(sizeof(FResetSystemSettingInfo) == 0x000040, "Wrong size on FResetSystemSettingInfo");
static_assert(offsetof(FResetSystemSettingInfo, _need_items_array) == 0x000028, "Member 'FResetSystemSettingInfo::_need_items_array' has a wrong offset!");
static_assert(offsetof(FResetSystemSettingInfo, _code_name) == 0x000038, "Member 'FResetSystemSettingInfo::_code_name' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.GlobalVariableInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FGlobalVariableInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGlobalVariableInfoPtr) == 0x000008, "Wrong alignment on FGlobalVariableInfoPtr");
static_assert(sizeof(FGlobalVariableInfoPtr) == 0x000008, "Wrong size on FGlobalVariableInfoPtr");

// ScriptStruct ProjectPContentInfo.SubLevelOnOffInfo
// 0x0020 (0x0048 - 0x0028)
struct FSubLevelOnOffInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _condition;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _map_resource;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubLevelOnOffInfo) == 0x000008, "Wrong alignment on FSubLevelOnOffInfo");
static_assert(sizeof(FSubLevelOnOffInfo) == 0x000048, "Wrong size on FSubLevelOnOffInfo");
static_assert(offsetof(FSubLevelOnOffInfo, _code_name) == 0x000028, "Member 'FSubLevelOnOffInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FSubLevelOnOffInfo, _condition) == 0x000030, "Member 'FSubLevelOnOffInfo::_condition' has a wrong offset!");
static_assert(offsetof(FSubLevelOnOffInfo, _map_resource) == 0x000038, "Member 'FSubLevelOnOffInfo::_map_resource' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.HitIndexInfo
// 0x0020 (0x0048 - 0x0028)
struct FHitIndexInfo final : public FContentInfoBase
{
public:
	class FName                                   _skill_code_name;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _hit_index;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _skill_hit_code_name;                              // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _hit_group;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _hit_prioty;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHitIndexInfo) == 0x000008, "Wrong alignment on FHitIndexInfo");
static_assert(sizeof(FHitIndexInfo) == 0x000048, "Wrong size on FHitIndexInfo");
static_assert(offsetof(FHitIndexInfo, _skill_code_name) == 0x000028, "Member 'FHitIndexInfo::_skill_code_name' has a wrong offset!");
static_assert(offsetof(FHitIndexInfo, _hit_index) == 0x000030, "Member 'FHitIndexInfo::_hit_index' has a wrong offset!");
static_assert(offsetof(FHitIndexInfo, _skill_hit_code_name) == 0x000034, "Member 'FHitIndexInfo::_skill_hit_code_name' has a wrong offset!");
static_assert(offsetof(FHitIndexInfo, _hit_group) == 0x00003C, "Member 'FHitIndexInfo::_hit_group' has a wrong offset!");
static_assert(offsetof(FHitIndexInfo, _hit_prioty) == 0x000040, "Member 'FHitIndexInfo::_hit_prioty' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.HitIndexInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FHitIndexInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FHitIndexInfo>                  _HitIndexInfo_array;                               // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHitIndexInfoDB) == 0x000008, "Wrong alignment on FHitIndexInfoDB");
static_assert(sizeof(FHitIndexInfoDB) == 0x000050, "Wrong size on FHitIndexInfoDB");
static_assert(offsetof(FHitIndexInfoDB, _HitIndexInfo_array) == 0x000028, "Member 'FHitIndexInfoDB::_HitIndexInfo_array' has a wrong offset!");
static_assert(offsetof(FHitIndexInfoDB, _version) == 0x000038, "Member 'FHitIndexInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FHitIndexInfoDB, _comment) == 0x000040, "Member 'FHitIndexInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.LevelSequenceInfo
// 0x0080 (0x00A8 - 0x0028)
struct FLevelSequenceInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _sequence_resource;                                // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _skip_sequencer;                                   // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _before_played_sequencer;                          // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _after_played_sequencer;                           // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _toggle_player_sequencer;                          // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _after_command_exec;                               // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _use_cinematic_camera;                             // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _align_to_cine_camera;                             // 0x0081(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _set_to_player_location;                           // 0x0082(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _set_to_boss_location;                             // 0x0083(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ui_block;                                         // 0x0084(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _binding_player;                                   // 0x0085(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _lock_player_action;                               // 0x0086(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _lock_player_action_camera_enable;                 // 0x0087(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _loop_count;                                       // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _restore_state;                                    // 0x008C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _pause_at_end;                                     // 0x008D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _hide_player;                                      // 0x008E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _hide_hud;                                         // 0x008F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _show_hud;                                         // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ui_fadeout;                                       // 0x0091(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _disable_camera_cuts;                              // 0x0092(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _game_process_pause;                               // 0x0093(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _head_costume_off;                                 // 0x0094(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _no_skip;                                          // 0x0095(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _can_save;                                         // 0x0096(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_grab_skill;                                    // 0x0097(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _subtitle_code_name;                               // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _play_once;                                        // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _fix_camera_speed;                                 // 0x00A1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLevelSequenceInfo) == 0x000008, "Wrong alignment on FLevelSequenceInfo");
static_assert(sizeof(FLevelSequenceInfo) == 0x0000A8, "Wrong size on FLevelSequenceInfo");
static_assert(offsetof(FLevelSequenceInfo, _code_name) == 0x000028, "Member 'FLevelSequenceInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _sequence_resource) == 0x000030, "Member 'FLevelSequenceInfo::_sequence_resource' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _skip_sequencer) == 0x000058, "Member 'FLevelSequenceInfo::_skip_sequencer' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _before_played_sequencer) == 0x000060, "Member 'FLevelSequenceInfo::_before_played_sequencer' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _after_played_sequencer) == 0x000068, "Member 'FLevelSequenceInfo::_after_played_sequencer' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _toggle_player_sequencer) == 0x000070, "Member 'FLevelSequenceInfo::_toggle_player_sequencer' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _after_command_exec) == 0x000078, "Member 'FLevelSequenceInfo::_after_command_exec' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _use_cinematic_camera) == 0x000080, "Member 'FLevelSequenceInfo::_use_cinematic_camera' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _align_to_cine_camera) == 0x000081, "Member 'FLevelSequenceInfo::_align_to_cine_camera' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _set_to_player_location) == 0x000082, "Member 'FLevelSequenceInfo::_set_to_player_location' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _set_to_boss_location) == 0x000083, "Member 'FLevelSequenceInfo::_set_to_boss_location' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _ui_block) == 0x000084, "Member 'FLevelSequenceInfo::_ui_block' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _binding_player) == 0x000085, "Member 'FLevelSequenceInfo::_binding_player' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _lock_player_action) == 0x000086, "Member 'FLevelSequenceInfo::_lock_player_action' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _lock_player_action_camera_enable) == 0x000087, "Member 'FLevelSequenceInfo::_lock_player_action_camera_enable' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _loop_count) == 0x000088, "Member 'FLevelSequenceInfo::_loop_count' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _restore_state) == 0x00008C, "Member 'FLevelSequenceInfo::_restore_state' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _pause_at_end) == 0x00008D, "Member 'FLevelSequenceInfo::_pause_at_end' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _hide_player) == 0x00008E, "Member 'FLevelSequenceInfo::_hide_player' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _hide_hud) == 0x00008F, "Member 'FLevelSequenceInfo::_hide_hud' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _show_hud) == 0x000090, "Member 'FLevelSequenceInfo::_show_hud' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _ui_fadeout) == 0x000091, "Member 'FLevelSequenceInfo::_ui_fadeout' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _disable_camera_cuts) == 0x000092, "Member 'FLevelSequenceInfo::_disable_camera_cuts' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _game_process_pause) == 0x000093, "Member 'FLevelSequenceInfo::_game_process_pause' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _head_costume_off) == 0x000094, "Member 'FLevelSequenceInfo::_head_costume_off' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _no_skip) == 0x000095, "Member 'FLevelSequenceInfo::_no_skip' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _can_save) == 0x000096, "Member 'FLevelSequenceInfo::_can_save' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _is_grab_skill) == 0x000097, "Member 'FLevelSequenceInfo::_is_grab_skill' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _subtitle_code_name) == 0x000098, "Member 'FLevelSequenceInfo::_subtitle_code_name' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _play_once) == 0x0000A0, "Member 'FLevelSequenceInfo::_play_once' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfo, _fix_camera_speed) == 0x0000A1, "Member 'FLevelSequenceInfo::_fix_camera_speed' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.LevelSequenceInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FLevelSequenceInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLevelSequenceInfo>             _LevelSequence_array;                              // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelSequenceInfoDB) == 0x000008, "Wrong alignment on FLevelSequenceInfoDB");
static_assert(sizeof(FLevelSequenceInfoDB) == 0x0000A0, "Wrong size on FLevelSequenceInfoDB");
static_assert(offsetof(FLevelSequenceInfoDB, _LevelSequence_array) == 0x000078, "Member 'FLevelSequenceInfoDB::_LevelSequence_array' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfoDB, _version) == 0x000088, "Member 'FLevelSequenceInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FLevelSequenceInfoDB, _comment) == 0x000090, "Member 'FLevelSequenceInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.HitIndexInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FHitIndexInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHitIndexInfoPtr) == 0x000008, "Wrong alignment on FHitIndexInfoPtr");
static_assert(sizeof(FHitIndexInfoPtr) == 0x000008, "Wrong size on FHitIndexInfoPtr");

// ScriptStruct ProjectPContentInfo.HitMotionGroupInfo
// 0x0010 (0x0038 - 0x0028)
struct FHitMotionGroupInfo final : public FContentInfoBase
{
public:
	ELHitMotionType                               _hit_motion_type;                                  // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELHitMotionDirectionType                      _hit_motion_direction_type;                        // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _play_common_action_montage_code_name;             // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _chosen_probability;                               // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHitMotionGroupInfo) == 0x000008, "Wrong alignment on FHitMotionGroupInfo");
static_assert(sizeof(FHitMotionGroupInfo) == 0x000038, "Wrong size on FHitMotionGroupInfo");
static_assert(offsetof(FHitMotionGroupInfo, _hit_motion_type) == 0x000028, "Member 'FHitMotionGroupInfo::_hit_motion_type' has a wrong offset!");
static_assert(offsetof(FHitMotionGroupInfo, _hit_motion_direction_type) == 0x000029, "Member 'FHitMotionGroupInfo::_hit_motion_direction_type' has a wrong offset!");
static_assert(offsetof(FHitMotionGroupInfo, _play_common_action_montage_code_name) == 0x00002C, "Member 'FHitMotionGroupInfo::_play_common_action_montage_code_name' has a wrong offset!");
static_assert(offsetof(FHitMotionGroupInfo, _chosen_probability) == 0x000034, "Member 'FHitMotionGroupInfo::_chosen_probability' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.HitMotionGroupInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FHitMotionGroupInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FHitMotionGroupInfo>            _HitMotionGroup_array;                             // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHitMotionGroupInfoDB) == 0x000008, "Wrong alignment on FHitMotionGroupInfoDB");
static_assert(sizeof(FHitMotionGroupInfoDB) == 0x000050, "Wrong size on FHitMotionGroupInfoDB");
static_assert(offsetof(FHitMotionGroupInfoDB, _HitMotionGroup_array) == 0x000028, "Member 'FHitMotionGroupInfoDB::_HitMotionGroup_array' has a wrong offset!");
static_assert(offsetof(FHitMotionGroupInfoDB, _version) == 0x000038, "Member 'FHitMotionGroupInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FHitMotionGroupInfoDB, _comment) == 0x000040, "Member 'FHitMotionGroupInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.SpecialBuffInfo
// 0x00A8 (0x00D0 - 0x0028)
struct FSpecialBuffInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSpecialBuffType                             _type;                                             // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _local_text_name;                                  // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_tooltip;                               // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_name_cn;                               // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_tooltip_cn;                            // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _param_string_1;                                   // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _param_string_2;                                   // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _param_int_1;                                      // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _param_int_2;                                      // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _use_humanity_as_multiplier;                       // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _base;                                             // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _factor;                                           // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _bottom;                                           // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _exponent;                                         // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _param_num;                                        // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _show_ui;                                          // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 _icon_resource;                                    // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _humanization_buff_alter_code_name;                // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecialBuffInfo) == 0x000008, "Wrong alignment on FSpecialBuffInfo");
static_assert(sizeof(FSpecialBuffInfo) == 0x0000D0, "Wrong size on FSpecialBuffInfo");
static_assert(offsetof(FSpecialBuffInfo, _code_name) == 0x000028, "Member 'FSpecialBuffInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FSpecialBuffInfo, _type) == 0x000030, "Member 'FSpecialBuffInfo::_type' has a wrong offset!");
static_assert(offsetof(FSpecialBuffInfo, _local_text_name) == 0x000038, "Member 'FSpecialBuffInfo::_local_text_name' has a wrong offset!");
static_assert(offsetof(FSpecialBuffInfo, _local_text_tooltip) == 0x000048, "Member 'FSpecialBuffInfo::_local_text_tooltip' has a wrong offset!");
static_assert(offsetof(FSpecialBuffInfo, _local_text_name_cn) == 0x000058, "Member 'FSpecialBuffInfo::_local_text_name_cn' has a wrong offset!");
static_assert(offsetof(FSpecialBuffInfo, _local_text_tooltip_cn) == 0x000060, "Member 'FSpecialBuffInfo::_local_text_tooltip_cn' has a wrong offset!");
static_assert(offsetof(FSpecialBuffInfo, _param_string_1) == 0x000068, "Member 'FSpecialBuffInfo::_param_string_1' has a wrong offset!");
static_assert(offsetof(FSpecialBuffInfo, _param_string_2) == 0x000070, "Member 'FSpecialBuffInfo::_param_string_2' has a wrong offset!");
static_assert(offsetof(FSpecialBuffInfo, _param_int_1) == 0x000078, "Member 'FSpecialBuffInfo::_param_int_1' has a wrong offset!");
static_assert(offsetof(FSpecialBuffInfo, _param_int_2) == 0x00007C, "Member 'FSpecialBuffInfo::_param_int_2' has a wrong offset!");
static_assert(offsetof(FSpecialBuffInfo, _use_humanity_as_multiplier) == 0x000080, "Member 'FSpecialBuffInfo::_use_humanity_as_multiplier' has a wrong offset!");
static_assert(offsetof(FSpecialBuffInfo, _base) == 0x000084, "Member 'FSpecialBuffInfo::_base' has a wrong offset!");
static_assert(offsetof(FSpecialBuffInfo, _factor) == 0x000088, "Member 'FSpecialBuffInfo::_factor' has a wrong offset!");
static_assert(offsetof(FSpecialBuffInfo, _bottom) == 0x00008C, "Member 'FSpecialBuffInfo::_bottom' has a wrong offset!");
static_assert(offsetof(FSpecialBuffInfo, _exponent) == 0x000090, "Member 'FSpecialBuffInfo::_exponent' has a wrong offset!");
static_assert(offsetof(FSpecialBuffInfo, _param_num) == 0x000094, "Member 'FSpecialBuffInfo::_param_num' has a wrong offset!");
static_assert(offsetof(FSpecialBuffInfo, _show_ui) == 0x000098, "Member 'FSpecialBuffInfo::_show_ui' has a wrong offset!");
static_assert(offsetof(FSpecialBuffInfo, _icon_resource) == 0x0000A0, "Member 'FSpecialBuffInfo::_icon_resource' has a wrong offset!");
static_assert(offsetof(FSpecialBuffInfo, _humanization_buff_alter_code_name) == 0x0000C8, "Member 'FSpecialBuffInfo::_humanization_buff_alter_code_name' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.SpecialBuffInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FSpecialBuffInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSpecialBuffInfo>               _SpecialBuffInfo_array;                            // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecialBuffInfoDB) == 0x000008, "Wrong alignment on FSpecialBuffInfoDB");
static_assert(sizeof(FSpecialBuffInfoDB) == 0x0000A0, "Wrong size on FSpecialBuffInfoDB");
static_assert(offsetof(FSpecialBuffInfoDB, _SpecialBuffInfo_array) == 0x000078, "Member 'FSpecialBuffInfoDB::_SpecialBuffInfo_array' has a wrong offset!");
static_assert(offsetof(FSpecialBuffInfoDB, _version) == 0x000088, "Member 'FSpecialBuffInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FSpecialBuffInfoDB, _comment) == 0x000090, "Member 'FSpecialBuffInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.HitMotionGroupInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FHitMotionGroupInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHitMotionGroupInfoPtr) == 0x000008, "Wrong alignment on FHitMotionGroupInfoPtr");
static_assert(sizeof(FHitMotionGroupInfoPtr) == 0x000008, "Wrong size on FHitMotionGroupInfoPtr");

// ScriptStruct ProjectPContentInfo.ItemCostumeInfo
// 0x00B0 (0x00D8 - 0x0028)
struct FItemCostumeInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _need_shrink;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _accessory;                                        // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _hide_acc;                                         // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 _basic;                                            // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _wbasic;                                           // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _long;                                             // 0x0088(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _wlong;                                            // 0x00B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemCostumeInfo) == 0x000008, "Wrong alignment on FItemCostumeInfo");
static_assert(sizeof(FItemCostumeInfo) == 0x0000D8, "Wrong size on FItemCostumeInfo");
static_assert(offsetof(FItemCostumeInfo, _code_name) == 0x000028, "Member 'FItemCostumeInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FItemCostumeInfo, _need_shrink) == 0x000030, "Member 'FItemCostumeInfo::_need_shrink' has a wrong offset!");
static_assert(offsetof(FItemCostumeInfo, _accessory) == 0x000031, "Member 'FItemCostumeInfo::_accessory' has a wrong offset!");
static_assert(offsetof(FItemCostumeInfo, _hide_acc) == 0x000032, "Member 'FItemCostumeInfo::_hide_acc' has a wrong offset!");
static_assert(offsetof(FItemCostumeInfo, _basic) == 0x000038, "Member 'FItemCostumeInfo::_basic' has a wrong offset!");
static_assert(offsetof(FItemCostumeInfo, _wbasic) == 0x000060, "Member 'FItemCostumeInfo::_wbasic' has a wrong offset!");
static_assert(offsetof(FItemCostumeInfo, _long) == 0x000088, "Member 'FItemCostumeInfo::_long' has a wrong offset!");
static_assert(offsetof(FItemCostumeInfo, _wlong) == 0x0000B0, "Member 'FItemCostumeInfo::_wlong' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.HitMotionReplaceInfo
// 0x0030 (0x0058 - 0x0028)
struct FHitMotionReplaceInfo final : public FContentInfoBase
{
public:
	class FName                                   _hit_motion_replace_group_code_name;               // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELHitMotionType                               _origin_hit_motion_type;                           // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELHitMotionType                               _replace_hit_motion_type;                          // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _hit_anim_duration;                                // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELKnockBackDirectionType                      _knockback_direction;                              // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _knockback_duration;                               // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _knockback_scale;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _knockback_distance;                               // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _bound_height;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _bound_duration;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _hit_camera_shake_code_name;                       // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHitMotionReplaceInfo) == 0x000008, "Wrong alignment on FHitMotionReplaceInfo");
static_assert(sizeof(FHitMotionReplaceInfo) == 0x000058, "Wrong size on FHitMotionReplaceInfo");
static_assert(offsetof(FHitMotionReplaceInfo, _hit_motion_replace_group_code_name) == 0x000028, "Member 'FHitMotionReplaceInfo::_hit_motion_replace_group_code_name' has a wrong offset!");
static_assert(offsetof(FHitMotionReplaceInfo, _origin_hit_motion_type) == 0x000030, "Member 'FHitMotionReplaceInfo::_origin_hit_motion_type' has a wrong offset!");
static_assert(offsetof(FHitMotionReplaceInfo, _replace_hit_motion_type) == 0x000031, "Member 'FHitMotionReplaceInfo::_replace_hit_motion_type' has a wrong offset!");
static_assert(offsetof(FHitMotionReplaceInfo, _hit_anim_duration) == 0x000034, "Member 'FHitMotionReplaceInfo::_hit_anim_duration' has a wrong offset!");
static_assert(offsetof(FHitMotionReplaceInfo, _knockback_direction) == 0x000038, "Member 'FHitMotionReplaceInfo::_knockback_direction' has a wrong offset!");
static_assert(offsetof(FHitMotionReplaceInfo, _knockback_duration) == 0x00003C, "Member 'FHitMotionReplaceInfo::_knockback_duration' has a wrong offset!");
static_assert(offsetof(FHitMotionReplaceInfo, _knockback_scale) == 0x000040, "Member 'FHitMotionReplaceInfo::_knockback_scale' has a wrong offset!");
static_assert(offsetof(FHitMotionReplaceInfo, _knockback_distance) == 0x000044, "Member 'FHitMotionReplaceInfo::_knockback_distance' has a wrong offset!");
static_assert(offsetof(FHitMotionReplaceInfo, _bound_height) == 0x000048, "Member 'FHitMotionReplaceInfo::_bound_height' has a wrong offset!");
static_assert(offsetof(FHitMotionReplaceInfo, _bound_duration) == 0x00004C, "Member 'FHitMotionReplaceInfo::_bound_duration' has a wrong offset!");
static_assert(offsetof(FHitMotionReplaceInfo, _hit_camera_shake_code_name) == 0x000050, "Member 'FHitMotionReplaceInfo::_hit_camera_shake_code_name' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.HitMotionReplaceInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FHitMotionReplaceInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FHitMotionReplaceInfo>          _HitMotionReplace_array;                           // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHitMotionReplaceInfoDB) == 0x000008, "Wrong alignment on FHitMotionReplaceInfoDB");
static_assert(sizeof(FHitMotionReplaceInfoDB) == 0x000050, "Wrong size on FHitMotionReplaceInfoDB");
static_assert(offsetof(FHitMotionReplaceInfoDB, _HitMotionReplace_array) == 0x000028, "Member 'FHitMotionReplaceInfoDB::_HitMotionReplace_array' has a wrong offset!");
static_assert(offsetof(FHitMotionReplaceInfoDB, _version) == 0x000038, "Member 'FHitMotionReplaceInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FHitMotionReplaceInfoDB, _comment) == 0x000040, "Member 'FHitMotionReplaceInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PCLocomotionListInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FPCLocomotionListInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPCLocomotionListInfoPtr) == 0x000008, "Wrong alignment on FPCLocomotionListInfoPtr");
static_assert(sizeof(FPCLocomotionListInfoPtr) == 0x000008, "Wrong size on FPCLocomotionListInfoPtr");

// ScriptStruct ProjectPContentInfo.HitMotionReplaceInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FHitMotionReplaceInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHitMotionReplaceInfoPtr) == 0x000008, "Wrong alignment on FHitMotionReplaceInfoPtr");
static_assert(sizeof(FHitMotionReplaceInfoPtr) == 0x000008, "Wrong size on FHitMotionReplaceInfoPtr");

// ScriptStruct ProjectPContentInfo.DefaultPCWorldEventListInfo
// 0x0008 (0x0030 - 0x0028)
struct FDefaultPCWorldEventListInfo final : public FContentInfoBase
{
public:
	class FName                                   _WorldEvent_CodeName;                              // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDefaultPCWorldEventListInfo) == 0x000008, "Wrong alignment on FDefaultPCWorldEventListInfo");
static_assert(sizeof(FDefaultPCWorldEventListInfo) == 0x000030, "Wrong size on FDefaultPCWorldEventListInfo");
static_assert(offsetof(FDefaultPCWorldEventListInfo, _WorldEvent_CodeName) == 0x000028, "Member 'FDefaultPCWorldEventListInfo::_WorldEvent_CodeName' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.WorldEventInfoDB
// 0x0038 (0x0060 - 0x0028)
struct FWorldEventInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FWorldEventInfo>                _WorldEvent_array;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FDefaultPCWorldEventListInfo>   _Default_PC_WorldEventList_array;                  // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldEventInfoDB) == 0x000008, "Wrong alignment on FWorldEventInfoDB");
static_assert(sizeof(FWorldEventInfoDB) == 0x000060, "Wrong size on FWorldEventInfoDB");
static_assert(offsetof(FWorldEventInfoDB, _WorldEvent_array) == 0x000028, "Member 'FWorldEventInfoDB::_WorldEvent_array' has a wrong offset!");
static_assert(offsetof(FWorldEventInfoDB, _Default_PC_WorldEventList_array) == 0x000038, "Member 'FWorldEventInfoDB::_Default_PC_WorldEventList_array' has a wrong offset!");
static_assert(offsetof(FWorldEventInfoDB, _version) == 0x000048, "Member 'FWorldEventInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FWorldEventInfoDB, _comment) == 0x000050, "Member 'FWorldEventInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.HumanizationBuffAddInfo
// 0x0020 (0x0048 - 0x0028)
struct FHumanizationBuffAddInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _humanpoint_under;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _add_abnormalstate;                                // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _add_specialbuff;                                  // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHumanizationBuffAddInfo) == 0x000008, "Wrong alignment on FHumanizationBuffAddInfo");
static_assert(sizeof(FHumanizationBuffAddInfo) == 0x000048, "Wrong size on FHumanizationBuffAddInfo");
static_assert(offsetof(FHumanizationBuffAddInfo, _code_name) == 0x000028, "Member 'FHumanizationBuffAddInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FHumanizationBuffAddInfo, _humanpoint_under) == 0x000030, "Member 'FHumanizationBuffAddInfo::_humanpoint_under' has a wrong offset!");
static_assert(offsetof(FHumanizationBuffAddInfo, _add_abnormalstate) == 0x000034, "Member 'FHumanizationBuffAddInfo::_add_abnormalstate' has a wrong offset!");
static_assert(offsetof(FHumanizationBuffAddInfo, _add_specialbuff) == 0x00003C, "Member 'FHumanizationBuffAddInfo::_add_specialbuff' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.HumanizationBuffAlterInfo
// 0x0020 (0x0048 - 0x0028)
struct FHumanizationBuffAlterInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _humanpoint_under;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _alter_abnormal_code_name;                         // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _alter_specialbuff_code_name;                      // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHumanizationBuffAlterInfo) == 0x000008, "Wrong alignment on FHumanizationBuffAlterInfo");
static_assert(sizeof(FHumanizationBuffAlterInfo) == 0x000048, "Wrong size on FHumanizationBuffAlterInfo");
static_assert(offsetof(FHumanizationBuffAlterInfo, _code_name) == 0x000028, "Member 'FHumanizationBuffAlterInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FHumanizationBuffAlterInfo, _humanpoint_under) == 0x000030, "Member 'FHumanizationBuffAlterInfo::_humanpoint_under' has a wrong offset!");
static_assert(offsetof(FHumanizationBuffAlterInfo, _alter_abnormal_code_name) == 0x000034, "Member 'FHumanizationBuffAlterInfo::_alter_abnormal_code_name' has a wrong offset!");
static_assert(offsetof(FHumanizationBuffAlterInfo, _alter_specialbuff_code_name) == 0x00003C, "Member 'FHumanizationBuffAlterInfo::_alter_specialbuff_code_name' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.HumanizationInfoDB
// 0x0038 (0x0060 - 0x0028)
struct FHumanizationInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FHumanizationBuffAddInfo>       _HumanizationBuffAddInfo_array;                    // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FHumanizationBuffAlterInfo>     _HumanizationBuffAlterInfo_array;                  // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHumanizationInfoDB) == 0x000008, "Wrong alignment on FHumanizationInfoDB");
static_assert(sizeof(FHumanizationInfoDB) == 0x000060, "Wrong size on FHumanizationInfoDB");
static_assert(offsetof(FHumanizationInfoDB, _HumanizationBuffAddInfo_array) == 0x000028, "Member 'FHumanizationInfoDB::_HumanizationBuffAddInfo_array' has a wrong offset!");
static_assert(offsetof(FHumanizationInfoDB, _HumanizationBuffAlterInfo_array) == 0x000038, "Member 'FHumanizationInfoDB::_HumanizationBuffAlterInfo_array' has a wrong offset!");
static_assert(offsetof(FHumanizationInfoDB, _version) == 0x000048, "Member 'FHumanizationInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FHumanizationInfoDB, _comment) == 0x000050, "Member 'FHumanizationInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PropLiftInfo
// 0x01C0 (0x01E8 - 0x0028)
struct FPropLiftInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPropLiftStateType                           _lift_state;                                       // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _init_state;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   _model_BP;                                         // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   _point_A_door_BP;                                  // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   _point_B_door_BP;                                  // 0x0088(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   _point_A_trigger_BP;                               // 0x00B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   _point_B_trigger_BP;                               // 0x00D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _activate_interaction_user_motion_resource;        // 0x0100(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _move_interaction_user_motion_resource;            // 0x0128(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _call_fail_interaction_user_motion_resource;       // 0x0150(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _elevator_interaction_message_code_name;           // 0x0178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _trigger_interaction_message_code_name;            // 0x0180(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _contentCondition;                                 // 0x0188(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _condition_check_fail_message;                     // 0x0190(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _point_A_trigger_contentCondition;                 // 0x0198(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _point_A_trigger_condition_check_fail_message;     // 0x01A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _point_B_trigger_contentCondition;                 // 0x01A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _point_B_trigger_condition_check_fail_message;     // 0x01B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _moving_curve;                                     // 0x01B8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _moving_time;                                      // 0x01E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPropLiftInfo) == 0x000008, "Wrong alignment on FPropLiftInfo");
static_assert(sizeof(FPropLiftInfo) == 0x0001E8, "Wrong size on FPropLiftInfo");
static_assert(offsetof(FPropLiftInfo, _code_name) == 0x000028, "Member 'FPropLiftInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FPropLiftInfo, _lift_state) == 0x000030, "Member 'FPropLiftInfo::_lift_state' has a wrong offset!");
static_assert(offsetof(FPropLiftInfo, _init_state) == 0x000034, "Member 'FPropLiftInfo::_init_state' has a wrong offset!");
static_assert(offsetof(FPropLiftInfo, _model_BP) == 0x000038, "Member 'FPropLiftInfo::_model_BP' has a wrong offset!");
static_assert(offsetof(FPropLiftInfo, _point_A_door_BP) == 0x000060, "Member 'FPropLiftInfo::_point_A_door_BP' has a wrong offset!");
static_assert(offsetof(FPropLiftInfo, _point_B_door_BP) == 0x000088, "Member 'FPropLiftInfo::_point_B_door_BP' has a wrong offset!");
static_assert(offsetof(FPropLiftInfo, _point_A_trigger_BP) == 0x0000B0, "Member 'FPropLiftInfo::_point_A_trigger_BP' has a wrong offset!");
static_assert(offsetof(FPropLiftInfo, _point_B_trigger_BP) == 0x0000D8, "Member 'FPropLiftInfo::_point_B_trigger_BP' has a wrong offset!");
static_assert(offsetof(FPropLiftInfo, _activate_interaction_user_motion_resource) == 0x000100, "Member 'FPropLiftInfo::_activate_interaction_user_motion_resource' has a wrong offset!");
static_assert(offsetof(FPropLiftInfo, _move_interaction_user_motion_resource) == 0x000128, "Member 'FPropLiftInfo::_move_interaction_user_motion_resource' has a wrong offset!");
static_assert(offsetof(FPropLiftInfo, _call_fail_interaction_user_motion_resource) == 0x000150, "Member 'FPropLiftInfo::_call_fail_interaction_user_motion_resource' has a wrong offset!");
static_assert(offsetof(FPropLiftInfo, _elevator_interaction_message_code_name) == 0x000178, "Member 'FPropLiftInfo::_elevator_interaction_message_code_name' has a wrong offset!");
static_assert(offsetof(FPropLiftInfo, _trigger_interaction_message_code_name) == 0x000180, "Member 'FPropLiftInfo::_trigger_interaction_message_code_name' has a wrong offset!");
static_assert(offsetof(FPropLiftInfo, _contentCondition) == 0x000188, "Member 'FPropLiftInfo::_contentCondition' has a wrong offset!");
static_assert(offsetof(FPropLiftInfo, _condition_check_fail_message) == 0x000190, "Member 'FPropLiftInfo::_condition_check_fail_message' has a wrong offset!");
static_assert(offsetof(FPropLiftInfo, _point_A_trigger_contentCondition) == 0x000198, "Member 'FPropLiftInfo::_point_A_trigger_contentCondition' has a wrong offset!");
static_assert(offsetof(FPropLiftInfo, _point_A_trigger_condition_check_fail_message) == 0x0001A0, "Member 'FPropLiftInfo::_point_A_trigger_condition_check_fail_message' has a wrong offset!");
static_assert(offsetof(FPropLiftInfo, _point_B_trigger_contentCondition) == 0x0001A8, "Member 'FPropLiftInfo::_point_B_trigger_contentCondition' has a wrong offset!");
static_assert(offsetof(FPropLiftInfo, _point_B_trigger_condition_check_fail_message) == 0x0001B0, "Member 'FPropLiftInfo::_point_B_trigger_condition_check_fail_message' has a wrong offset!");
static_assert(offsetof(FPropLiftInfo, _moving_curve) == 0x0001B8, "Member 'FPropLiftInfo::_moving_curve' has a wrong offset!");
static_assert(offsetof(FPropLiftInfo, _moving_time) == 0x0001E0, "Member 'FPropLiftInfo::_moving_time' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PropLiftInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FPropLiftInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FPropLiftInfo>                  _PropLift_array;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPropLiftInfoDB) == 0x000008, "Wrong alignment on FPropLiftInfoDB");
static_assert(sizeof(FPropLiftInfoDB) == 0x000050, "Wrong size on FPropLiftInfoDB");
static_assert(offsetof(FPropLiftInfoDB, _PropLift_array) == 0x000028, "Member 'FPropLiftInfoDB::_PropLift_array' has a wrong offset!");
static_assert(offsetof(FPropLiftInfoDB, _version) == 0x000038, "Member 'FPropLiftInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FPropLiftInfoDB, _comment) == 0x000040, "Member 'FPropLiftInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PropDestructionInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FPropDestructionInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPropDestructionInfoPtr) == 0x000008, "Wrong alignment on FPropDestructionInfoPtr");
static_assert(sizeof(FPropDestructionInfoPtr) == 0x000008, "Wrong size on FPropDestructionInfoPtr");

// ScriptStruct ProjectPContentInfo.HumanizationBuffAddInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FHumanizationBuffAddInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHumanizationBuffAddInfoPtr) == 0x000008, "Wrong alignment on FHumanizationBuffAddInfoPtr");
static_assert(sizeof(FHumanizationBuffAddInfoPtr) == 0x000008, "Wrong size on FHumanizationBuffAddInfoPtr");

// ScriptStruct ProjectPContentInfo.ImageResourceInfo
// 0x0030 (0x0058 - 0x0028)
struct FImageResourceInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _image_resource;                                   // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FImageResourceInfo) == 0x000008, "Wrong alignment on FImageResourceInfo");
static_assert(sizeof(FImageResourceInfo) == 0x000058, "Wrong size on FImageResourceInfo");
static_assert(offsetof(FImageResourceInfo, _code_name) == 0x000028, "Member 'FImageResourceInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FImageResourceInfo, _image_resource) == 0x000030, "Member 'FImageResourceInfo::_image_resource' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ImageResourceInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FImageResourceInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FImageResourceInfo>             _ImageResource_array;                              // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FImageResourceInfoDB) == 0x000008, "Wrong alignment on FImageResourceInfoDB");
static_assert(sizeof(FImageResourceInfoDB) == 0x0000A0, "Wrong size on FImageResourceInfoDB");
static_assert(offsetof(FImageResourceInfoDB, _ImageResource_array) == 0x000078, "Member 'FImageResourceInfoDB::_ImageResource_array' has a wrong offset!");
static_assert(offsetof(FImageResourceInfoDB, _version) == 0x000088, "Member 'FImageResourceInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FImageResourceInfoDB, _comment) == 0x000090, "Member 'FImageResourceInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.SkillInfo
// 0x01B8 (0x01E0 - 0x0028)
struct FSkillInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_skill_name;                            // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_skill_name_cn;                         // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_skill_tooltip;                         // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_skill_tooltip_cn;                      // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _action_class_code_name;                           // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _shorthandle_action_class_code_name;               // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _longhandle_action_class_code_name;                // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELActionCategory                              _action_category;                                  // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _action_path_code_name;                            // 0x007C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _action_group_table_code_name;                     // 0x0084(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _anim_name;                                        // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _shorthandle_anim_name;                            // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _longhandle_anim_name;                             // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _weapon_break_change_skill;                        // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _require_stamina;                                  // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _require_frenzy_unit_count;                        // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _require_slave_magazine;                           // 0x00D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _require_item_code_name;                           // 0x00D4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _consume_stamina_point;                            // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _consume_frenzy_unit_count;                        // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _consume_slave_magazine;                           // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _consume_item_count;                               // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _immune_code_name;                                 // 0x00EC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _reset_tough_point;                                // 0x00F4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ELStartRotationType                           _start_rotation_type;                              // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _start_rotation_blend_time;                        // 0x00FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELStartRotationType                           _action_rotation_type;                             // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _start_section;                                    // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _end_section_by_landing;                           // 0x0118(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _end_section_calling_command;                      // 0x0120(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _cooltime_min;                                     // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _cooltime_max;                                     // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _use_global_cooltime;                              // 0x0138(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _global_cooltime_min;                              // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _global_cooltime_max;                              // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _skill_range_angle_start;                          // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _skill_range_angle_end;                            // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _skill_rotate_angle;                               // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _use_slope_lookat;                                 // 0x0150(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _enable_blade_weight;                              // 0x0151(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _use_pure_weapon_weight;                           // 0x0152(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_153[0x1];                                      // 0x0153(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _require_stamina_point;                            // 0x0154(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _require_slave_magazine_point;                     // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAdditiveHitType                             _additive_hit_type;                                // 0x015C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15D[0x3];                                      // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _destruction_defence_mod;                          // 0x0160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _destruction_reduce_mod;                           // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _auto_targeting;                                   // 0x0168(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169[0x3];                                      // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _fail_skill;                                       // 0x016C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _defence_skill;                                    // 0x0174(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_175[0x3];                                      // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _part_needed;                                      // 0x0178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _allow_falling;                                    // 0x0180(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181[0x3];                                      // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _skill_approach_dist_min;                          // 0x0184(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _skill_approach_dist_max;                          // 0x0188(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _skill_dist_min;                                   // 0x018C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _skill_dist_max;                                   // 0x0190(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _skill_dist_height;                                // 0x0194(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAIRangeCheckType                            _skillrange_checktype;                             // 0x0198(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ignore_check_rootmotion;                          // 0x0199(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19A[0x2];                                      // 0x019A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _skillmove_check_angle;                            // 0x019C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _skilmove_check_dist;                              // 0x01A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _abort_skill_cooltimereset_percent;                // 0x01A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELWeaponAttachPointType                       _weapon_attach_point_type;                         // 0x01A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPartsAttachPointType                        _body_weapon_attach_point_type;                    // 0x01A9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AA[0x2];                                      // 0x01AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _handle_anim_state;                                // 0x01AC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _not_use_destroyed;                                // 0x01B4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _navi_jump_enable;                                 // 0x01B5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B6[0x2];                                      // 0x01B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _skill_group_code_name;                            // 0x01B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _skill_group_cooltime_min;                         // 0x01C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _skill_group_cooltime_max;                         // 0x01C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _init_cooltime_min;                                // 0x01C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _init_cooltime_max;                                // 0x01CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _consume_ammo;                                     // 0x01D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _require_ammo;                                     // 0x01D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _prevent_falling_damage;                           // 0x01D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _dont_use_skill_count;                             // 0x01D9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _decreace_use_skill_count_by_cancel;               // 0x01DA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELInputTypeHudOnly                            _input_type_hud_only;                              // 0x01DB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELFableConsumeUIType                          _fable_consume_ui;                                 // 0x01DC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD[0x3];                                      // 0x01DD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillInfo) == 0x000008, "Wrong alignment on FSkillInfo");
static_assert(sizeof(FSkillInfo) == 0x0001E0, "Wrong size on FSkillInfo");
static_assert(offsetof(FSkillInfo, _code_name) == 0x000028, "Member 'FSkillInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _local_text_skill_name) == 0x000030, "Member 'FSkillInfo::_local_text_skill_name' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _local_text_skill_name_cn) == 0x000040, "Member 'FSkillInfo::_local_text_skill_name_cn' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _local_text_skill_tooltip) == 0x000048, "Member 'FSkillInfo::_local_text_skill_tooltip' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _local_text_skill_tooltip_cn) == 0x000058, "Member 'FSkillInfo::_local_text_skill_tooltip_cn' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _action_class_code_name) == 0x000060, "Member 'FSkillInfo::_action_class_code_name' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _shorthandle_action_class_code_name) == 0x000068, "Member 'FSkillInfo::_shorthandle_action_class_code_name' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _longhandle_action_class_code_name) == 0x000070, "Member 'FSkillInfo::_longhandle_action_class_code_name' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _action_category) == 0x000078, "Member 'FSkillInfo::_action_category' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _action_path_code_name) == 0x00007C, "Member 'FSkillInfo::_action_path_code_name' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _action_group_table_code_name) == 0x000084, "Member 'FSkillInfo::_action_group_table_code_name' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _anim_name) == 0x000090, "Member 'FSkillInfo::_anim_name' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _shorthandle_anim_name) == 0x0000A0, "Member 'FSkillInfo::_shorthandle_anim_name' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _longhandle_anim_name) == 0x0000B0, "Member 'FSkillInfo::_longhandle_anim_name' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _weapon_break_change_skill) == 0x0000C0, "Member 'FSkillInfo::_weapon_break_change_skill' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _require_stamina) == 0x0000C8, "Member 'FSkillInfo::_require_stamina' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _require_frenzy_unit_count) == 0x0000CC, "Member 'FSkillInfo::_require_frenzy_unit_count' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _require_slave_magazine) == 0x0000D0, "Member 'FSkillInfo::_require_slave_magazine' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _require_item_code_name) == 0x0000D4, "Member 'FSkillInfo::_require_item_code_name' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _consume_stamina_point) == 0x0000DC, "Member 'FSkillInfo::_consume_stamina_point' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _consume_frenzy_unit_count) == 0x0000E0, "Member 'FSkillInfo::_consume_frenzy_unit_count' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _consume_slave_magazine) == 0x0000E4, "Member 'FSkillInfo::_consume_slave_magazine' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _consume_item_count) == 0x0000E8, "Member 'FSkillInfo::_consume_item_count' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _immune_code_name) == 0x0000EC, "Member 'FSkillInfo::_immune_code_name' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _reset_tough_point) == 0x0000F4, "Member 'FSkillInfo::_reset_tough_point' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _start_rotation_type) == 0x0000F8, "Member 'FSkillInfo::_start_rotation_type' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _start_rotation_blend_time) == 0x0000FC, "Member 'FSkillInfo::_start_rotation_blend_time' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _action_rotation_type) == 0x000100, "Member 'FSkillInfo::_action_rotation_type' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _start_section) == 0x000108, "Member 'FSkillInfo::_start_section' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _end_section_by_landing) == 0x000118, "Member 'FSkillInfo::_end_section_by_landing' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _end_section_calling_command) == 0x000120, "Member 'FSkillInfo::_end_section_calling_command' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _cooltime_min) == 0x000130, "Member 'FSkillInfo::_cooltime_min' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _cooltime_max) == 0x000134, "Member 'FSkillInfo::_cooltime_max' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _use_global_cooltime) == 0x000138, "Member 'FSkillInfo::_use_global_cooltime' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _global_cooltime_min) == 0x00013C, "Member 'FSkillInfo::_global_cooltime_min' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _global_cooltime_max) == 0x000140, "Member 'FSkillInfo::_global_cooltime_max' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _skill_range_angle_start) == 0x000144, "Member 'FSkillInfo::_skill_range_angle_start' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _skill_range_angle_end) == 0x000148, "Member 'FSkillInfo::_skill_range_angle_end' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _skill_rotate_angle) == 0x00014C, "Member 'FSkillInfo::_skill_rotate_angle' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _use_slope_lookat) == 0x000150, "Member 'FSkillInfo::_use_slope_lookat' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _enable_blade_weight) == 0x000151, "Member 'FSkillInfo::_enable_blade_weight' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _use_pure_weapon_weight) == 0x000152, "Member 'FSkillInfo::_use_pure_weapon_weight' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _require_stamina_point) == 0x000154, "Member 'FSkillInfo::_require_stamina_point' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _require_slave_magazine_point) == 0x000158, "Member 'FSkillInfo::_require_slave_magazine_point' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _additive_hit_type) == 0x00015C, "Member 'FSkillInfo::_additive_hit_type' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _destruction_defence_mod) == 0x000160, "Member 'FSkillInfo::_destruction_defence_mod' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _destruction_reduce_mod) == 0x000164, "Member 'FSkillInfo::_destruction_reduce_mod' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _auto_targeting) == 0x000168, "Member 'FSkillInfo::_auto_targeting' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _fail_skill) == 0x00016C, "Member 'FSkillInfo::_fail_skill' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _defence_skill) == 0x000174, "Member 'FSkillInfo::_defence_skill' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _part_needed) == 0x000178, "Member 'FSkillInfo::_part_needed' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _allow_falling) == 0x000180, "Member 'FSkillInfo::_allow_falling' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _skill_approach_dist_min) == 0x000184, "Member 'FSkillInfo::_skill_approach_dist_min' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _skill_approach_dist_max) == 0x000188, "Member 'FSkillInfo::_skill_approach_dist_max' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _skill_dist_min) == 0x00018C, "Member 'FSkillInfo::_skill_dist_min' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _skill_dist_max) == 0x000190, "Member 'FSkillInfo::_skill_dist_max' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _skill_dist_height) == 0x000194, "Member 'FSkillInfo::_skill_dist_height' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _skillrange_checktype) == 0x000198, "Member 'FSkillInfo::_skillrange_checktype' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _ignore_check_rootmotion) == 0x000199, "Member 'FSkillInfo::_ignore_check_rootmotion' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _skillmove_check_angle) == 0x00019C, "Member 'FSkillInfo::_skillmove_check_angle' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _skilmove_check_dist) == 0x0001A0, "Member 'FSkillInfo::_skilmove_check_dist' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _abort_skill_cooltimereset_percent) == 0x0001A4, "Member 'FSkillInfo::_abort_skill_cooltimereset_percent' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _weapon_attach_point_type) == 0x0001A8, "Member 'FSkillInfo::_weapon_attach_point_type' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _body_weapon_attach_point_type) == 0x0001A9, "Member 'FSkillInfo::_body_weapon_attach_point_type' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _handle_anim_state) == 0x0001AC, "Member 'FSkillInfo::_handle_anim_state' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _not_use_destroyed) == 0x0001B4, "Member 'FSkillInfo::_not_use_destroyed' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _navi_jump_enable) == 0x0001B5, "Member 'FSkillInfo::_navi_jump_enable' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _skill_group_code_name) == 0x0001B8, "Member 'FSkillInfo::_skill_group_code_name' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _skill_group_cooltime_min) == 0x0001C0, "Member 'FSkillInfo::_skill_group_cooltime_min' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _skill_group_cooltime_max) == 0x0001C4, "Member 'FSkillInfo::_skill_group_cooltime_max' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _init_cooltime_min) == 0x0001C8, "Member 'FSkillInfo::_init_cooltime_min' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _init_cooltime_max) == 0x0001CC, "Member 'FSkillInfo::_init_cooltime_max' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _consume_ammo) == 0x0001D0, "Member 'FSkillInfo::_consume_ammo' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _require_ammo) == 0x0001D4, "Member 'FSkillInfo::_require_ammo' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _prevent_falling_damage) == 0x0001D8, "Member 'FSkillInfo::_prevent_falling_damage' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _dont_use_skill_count) == 0x0001D9, "Member 'FSkillInfo::_dont_use_skill_count' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _decreace_use_skill_count_by_cancel) == 0x0001DA, "Member 'FSkillInfo::_decreace_use_skill_count_by_cancel' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _input_type_hud_only) == 0x0001DB, "Member 'FSkillInfo::_input_type_hud_only' has a wrong offset!");
static_assert(offsetof(FSkillInfo, _fable_consume_ui) == 0x0001DC, "Member 'FSkillInfo::_fable_consume_ui' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.SkillInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FSkillInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSkillInfo>                     _Skill_array;                                      // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillInfoDB) == 0x000008, "Wrong alignment on FSkillInfoDB");
static_assert(sizeof(FSkillInfoDB) == 0x0000A0, "Wrong size on FSkillInfoDB");
static_assert(offsetof(FSkillInfoDB, _Skill_array) == 0x000078, "Member 'FSkillInfoDB::_Skill_array' has a wrong offset!");
static_assert(offsetof(FSkillInfoDB, _version) == 0x000088, "Member 'FSkillInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FSkillInfoDB, _comment) == 0x000090, "Member 'FSkillInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ImageResourceInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FImageResourceInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FImageResourceInfoPtr) == 0x000008, "Wrong alignment on FImageResourceInfoPtr");
static_assert(sizeof(FImageResourceInfoPtr) == 0x000008, "Wrong size on FImageResourceInfoPtr");

// ScriptStruct ProjectPContentInfo.NPCStatInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FNPCStatInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNPCStatInfoPtr) == 0x000008, "Wrong alignment on FNPCStatInfoPtr");
static_assert(sizeof(FNPCStatInfoPtr) == 0x000008, "Wrong size on FNPCStatInfoPtr");

// ScriptStruct ProjectPContentInfo.ImmuneInfo
// 0x0040 (0x0068 - 0x0028)
struct FImmuneInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _ignore_hit;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _damage;                                           // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _elemental_damage;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _special_elemental_damage;                         // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _hit_action_dmg_stand;                             // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _hit_action_knock_back;                            // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _hit_action_down_away_up;                          // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _hit_action_down_drag_stamp;                       // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _hit_action_grab;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _tough_attack;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _groggy_attack;                                    // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _weapon_attack_period;                             // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _critical_chance;                                  // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FImmuneInfo) == 0x000008, "Wrong alignment on FImmuneInfo");
static_assert(sizeof(FImmuneInfo) == 0x000068, "Wrong size on FImmuneInfo");
static_assert(offsetof(FImmuneInfo, _code_name) == 0x000028, "Member 'FImmuneInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FImmuneInfo, _ignore_hit) == 0x000030, "Member 'FImmuneInfo::_ignore_hit' has a wrong offset!");
static_assert(offsetof(FImmuneInfo, _damage) == 0x000034, "Member 'FImmuneInfo::_damage' has a wrong offset!");
static_assert(offsetof(FImmuneInfo, _elemental_damage) == 0x000038, "Member 'FImmuneInfo::_elemental_damage' has a wrong offset!");
static_assert(offsetof(FImmuneInfo, _special_elemental_damage) == 0x00003C, "Member 'FImmuneInfo::_special_elemental_damage' has a wrong offset!");
static_assert(offsetof(FImmuneInfo, _hit_action_dmg_stand) == 0x000040, "Member 'FImmuneInfo::_hit_action_dmg_stand' has a wrong offset!");
static_assert(offsetof(FImmuneInfo, _hit_action_knock_back) == 0x000044, "Member 'FImmuneInfo::_hit_action_knock_back' has a wrong offset!");
static_assert(offsetof(FImmuneInfo, _hit_action_down_away_up) == 0x000048, "Member 'FImmuneInfo::_hit_action_down_away_up' has a wrong offset!");
static_assert(offsetof(FImmuneInfo, _hit_action_down_drag_stamp) == 0x00004C, "Member 'FImmuneInfo::_hit_action_down_drag_stamp' has a wrong offset!");
static_assert(offsetof(FImmuneInfo, _hit_action_grab) == 0x000050, "Member 'FImmuneInfo::_hit_action_grab' has a wrong offset!");
static_assert(offsetof(FImmuneInfo, _tough_attack) == 0x000054, "Member 'FImmuneInfo::_tough_attack' has a wrong offset!");
static_assert(offsetof(FImmuneInfo, _groggy_attack) == 0x000058, "Member 'FImmuneInfo::_groggy_attack' has a wrong offset!");
static_assert(offsetof(FImmuneInfo, _weapon_attack_period) == 0x00005C, "Member 'FImmuneInfo::_weapon_attack_period' has a wrong offset!");
static_assert(offsetof(FImmuneInfo, _critical_chance) == 0x000060, "Member 'FImmuneInfo::_critical_chance' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ImmuneInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FImmuneInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FImmuneInfo>                    _ImmuneInfo_array;                                 // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FImmuneInfoDB) == 0x000008, "Wrong alignment on FImmuneInfoDB");
static_assert(sizeof(FImmuneInfoDB) == 0x0000A0, "Wrong size on FImmuneInfoDB");
static_assert(offsetof(FImmuneInfoDB, _ImmuneInfo_array) == 0x000078, "Member 'FImmuneInfoDB::_ImmuneInfo_array' has a wrong offset!");
static_assert(offsetof(FImmuneInfoDB, _version) == 0x000088, "Member 'FImmuneInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FImmuneInfoDB, _comment) == 0x000090, "Member 'FImmuneInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ImmuneInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FImmuneInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FImmuneInfoPtr) == 0x000008, "Wrong alignment on FImmuneInfoPtr");
static_assert(sizeof(FImmuneInfoPtr) == 0x000008, "Wrong size on FImmuneInfoPtr");

// ScriptStruct ProjectPContentInfo.ActionStateTypePtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FActionStateTypePtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActionStateTypePtr) == 0x000008, "Wrong alignment on FActionStateTypePtr");
static_assert(sizeof(FActionStateTypePtr) == 0x000008, "Wrong size on FActionStateTypePtr");

// ScriptStruct ProjectPContentInfo.PulsePointMaxInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FPulsePointMaxInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPulsePointMaxInfoPtr) == 0x000008, "Wrong alignment on FPulsePointMaxInfoPtr");
static_assert(sizeof(FPulsePointMaxInfoPtr) == 0x000008, "Wrong size on FPulsePointMaxInfoPtr");

// ScriptStruct ProjectPContentInfo.GeneralCallBackEventInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FGeneralCallBackEventInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeneralCallBackEventInfoPtr) == 0x000008, "Wrong alignment on FGeneralCallBackEventInfoPtr");
static_assert(sizeof(FGeneralCallBackEventInfoPtr) == 0x000008, "Wrong size on FGeneralCallBackEventInfoPtr");

// ScriptStruct ProjectPContentInfo.ItemCommonInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FItemCommonInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemCommonInfoPtr) == 0x000008, "Wrong alignment on FItemCommonInfoPtr");
static_assert(sizeof(FItemCommonInfoPtr) == 0x000008, "Wrong size on FItemCommonInfoPtr");

// ScriptStruct ProjectPContentInfo.GeneralCommandInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FGeneralCommandInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeneralCommandInfoPtr) == 0x000008, "Wrong alignment on FGeneralCommandInfoPtr");
static_assert(sizeof(FGeneralCommandInfoPtr) == 0x000008, "Wrong size on FGeneralCommandInfoPtr");

// ScriptStruct ProjectPContentInfo.GeneralConditionInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FGeneralConditionInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeneralConditionInfoPtr) == 0x000008, "Wrong alignment on FGeneralConditionInfoPtr");
static_assert(sizeof(FGeneralConditionInfoPtr) == 0x000008, "Wrong size on FGeneralConditionInfoPtr");

// ScriptStruct ProjectPContentInfo.ItemWeaponReinforceInfo
// 0x0098 (0x00C0 - 0x0028)
struct FItemWeaponReinforceInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_byname;                                // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _grade;                                            // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_attack_mod;                              // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _fire_attack_mod;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _acid_attack_mod;                                  // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _electric_attack_mod;                              // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELWeaponCorrectionPhysicalGrade               _first_stat_correction_motivity;                   // 0x0054(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELWeaponCorrectionPhysicalGrade               _first_stat_correction_technique;                  // 0x0055(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELWeaponCorrectionPhysicalGrade               _first_stat_correction_advance;                    // 0x0056(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_57[0x1];                                       // 0x0057(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _correction_code_name_for_motivity;                // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _correction_code_name_for_technique;               // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _correction_code_name_for_advance;                 // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_fine_point;                             // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_normal_point;                           // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_bad_point;                              // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_fine_point_mod;                         // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_normal_point_mod;                       // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_bad_point_mod;                          // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _abnormal_state_code_name;                         // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _abnormal_state_buildup_attack;                    // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _need_item_code_name;                              // 0x00AC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _need_item_num;                                    // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _need_ergo;                                        // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemWeaponReinforceInfo) == 0x000008, "Wrong alignment on FItemWeaponReinforceInfo");
static_assert(sizeof(FItemWeaponReinforceInfo) == 0x0000C0, "Wrong size on FItemWeaponReinforceInfo");
static_assert(offsetof(FItemWeaponReinforceInfo, _code_name) == 0x000028, "Member 'FItemWeaponReinforceInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FItemWeaponReinforceInfo, _local_text_byname) == 0x000030, "Member 'FItemWeaponReinforceInfo::_local_text_byname' has a wrong offset!");
static_assert(offsetof(FItemWeaponReinforceInfo, _grade) == 0x000040, "Member 'FItemWeaponReinforceInfo::_grade' has a wrong offset!");
static_assert(offsetof(FItemWeaponReinforceInfo, _physical_attack_mod) == 0x000044, "Member 'FItemWeaponReinforceInfo::_physical_attack_mod' has a wrong offset!");
static_assert(offsetof(FItemWeaponReinforceInfo, _fire_attack_mod) == 0x000048, "Member 'FItemWeaponReinforceInfo::_fire_attack_mod' has a wrong offset!");
static_assert(offsetof(FItemWeaponReinforceInfo, _acid_attack_mod) == 0x00004C, "Member 'FItemWeaponReinforceInfo::_acid_attack_mod' has a wrong offset!");
static_assert(offsetof(FItemWeaponReinforceInfo, _electric_attack_mod) == 0x000050, "Member 'FItemWeaponReinforceInfo::_electric_attack_mod' has a wrong offset!");
static_assert(offsetof(FItemWeaponReinforceInfo, _first_stat_correction_motivity) == 0x000054, "Member 'FItemWeaponReinforceInfo::_first_stat_correction_motivity' has a wrong offset!");
static_assert(offsetof(FItemWeaponReinforceInfo, _first_stat_correction_technique) == 0x000055, "Member 'FItemWeaponReinforceInfo::_first_stat_correction_technique' has a wrong offset!");
static_assert(offsetof(FItemWeaponReinforceInfo, _first_stat_correction_advance) == 0x000056, "Member 'FItemWeaponReinforceInfo::_first_stat_correction_advance' has a wrong offset!");
static_assert(offsetof(FItemWeaponReinforceInfo, _correction_code_name_for_motivity) == 0x000058, "Member 'FItemWeaponReinforceInfo::_correction_code_name_for_motivity' has a wrong offset!");
static_assert(offsetof(FItemWeaponReinforceInfo, _correction_code_name_for_technique) == 0x000068, "Member 'FItemWeaponReinforceInfo::_correction_code_name_for_technique' has a wrong offset!");
static_assert(offsetof(FItemWeaponReinforceInfo, _correction_code_name_for_advance) == 0x000078, "Member 'FItemWeaponReinforceInfo::_correction_code_name_for_advance' has a wrong offset!");
static_assert(offsetof(FItemWeaponReinforceInfo, _sharpness_fine_point) == 0x000088, "Member 'FItemWeaponReinforceInfo::_sharpness_fine_point' has a wrong offset!");
static_assert(offsetof(FItemWeaponReinforceInfo, _sharpness_normal_point) == 0x00008C, "Member 'FItemWeaponReinforceInfo::_sharpness_normal_point' has a wrong offset!");
static_assert(offsetof(FItemWeaponReinforceInfo, _sharpness_bad_point) == 0x000090, "Member 'FItemWeaponReinforceInfo::_sharpness_bad_point' has a wrong offset!");
static_assert(offsetof(FItemWeaponReinforceInfo, _sharpness_fine_point_mod) == 0x000094, "Member 'FItemWeaponReinforceInfo::_sharpness_fine_point_mod' has a wrong offset!");
static_assert(offsetof(FItemWeaponReinforceInfo, _sharpness_normal_point_mod) == 0x000098, "Member 'FItemWeaponReinforceInfo::_sharpness_normal_point_mod' has a wrong offset!");
static_assert(offsetof(FItemWeaponReinforceInfo, _sharpness_bad_point_mod) == 0x00009C, "Member 'FItemWeaponReinforceInfo::_sharpness_bad_point_mod' has a wrong offset!");
static_assert(offsetof(FItemWeaponReinforceInfo, _abnormal_state_code_name) == 0x0000A0, "Member 'FItemWeaponReinforceInfo::_abnormal_state_code_name' has a wrong offset!");
static_assert(offsetof(FItemWeaponReinforceInfo, _abnormal_state_buildup_attack) == 0x0000A8, "Member 'FItemWeaponReinforceInfo::_abnormal_state_buildup_attack' has a wrong offset!");
static_assert(offsetof(FItemWeaponReinforceInfo, _need_item_code_name) == 0x0000AC, "Member 'FItemWeaponReinforceInfo::_need_item_code_name' has a wrong offset!");
static_assert(offsetof(FItemWeaponReinforceInfo, _need_item_num) == 0x0000B4, "Member 'FItemWeaponReinforceInfo::_need_item_num' has a wrong offset!");
static_assert(offsetof(FItemWeaponReinforceInfo, _need_ergo) == 0x0000B8, "Member 'FItemWeaponReinforceInfo::_need_ergo' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.FloatRangeValuePtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FFloatRangeValuePtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFloatRangeValuePtr) == 0x000008, "Wrong alignment on FFloatRangeValuePtr");
static_assert(sizeof(FFloatRangeValuePtr) == 0x000008, "Wrong size on FFloatRangeValuePtr");

// ScriptStruct ProjectPContentInfo.NPCBodyWeaponInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FNPCBodyWeaponInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNPCBodyWeaponInfoPtr) == 0x000008, "Wrong alignment on FNPCBodyWeaponInfoPtr");
static_assert(sizeof(FNPCBodyWeaponInfoPtr) == 0x000008, "Wrong size on FNPCBodyWeaponInfoPtr");

// ScriptStruct ProjectPContentInfo.ActorParamInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FActorParamInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActorParamInfoPtr) == 0x000008, "Wrong alignment on FActorParamInfoPtr");
static_assert(sizeof(FActorParamInfoPtr) == 0x000008, "Wrong size on FActorParamInfoPtr");

// ScriptStruct ProjectPContentInfo.ActorParamInfo
// 0x0020 (0x0048 - 0x0028)
struct FActorParamInfo final : public FContentInfoBase
{
public:
	int32                                         _max_hp;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _max_mp;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _armor;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _attack_power;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _weapon_damage;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _weapon_attackperiod;                              // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _critical_chance;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _critical_rating;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorParamInfo) == 0x000008, "Wrong alignment on FActorParamInfo");
static_assert(sizeof(FActorParamInfo) == 0x000048, "Wrong size on FActorParamInfo");
static_assert(offsetof(FActorParamInfo, _max_hp) == 0x000028, "Member 'FActorParamInfo::_max_hp' has a wrong offset!");
static_assert(offsetof(FActorParamInfo, _max_mp) == 0x00002C, "Member 'FActorParamInfo::_max_mp' has a wrong offset!");
static_assert(offsetof(FActorParamInfo, _armor) == 0x000030, "Member 'FActorParamInfo::_armor' has a wrong offset!");
static_assert(offsetof(FActorParamInfo, _attack_power) == 0x000034, "Member 'FActorParamInfo::_attack_power' has a wrong offset!");
static_assert(offsetof(FActorParamInfo, _weapon_damage) == 0x000038, "Member 'FActorParamInfo::_weapon_damage' has a wrong offset!");
static_assert(offsetof(FActorParamInfo, _weapon_attackperiod) == 0x00003C, "Member 'FActorParamInfo::_weapon_attackperiod' has a wrong offset!");
static_assert(offsetof(FActorParamInfo, _critical_chance) == 0x000040, "Member 'FActorParamInfo::_critical_chance' has a wrong offset!");
static_assert(offsetof(FActorParamInfo, _critical_rating) == 0x000044, "Member 'FActorParamInfo::_critical_rating' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PropShapeObjectInfo
// 0x01E0 (0x0208 - 0x0028)
struct FPropShapeObjectInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _state;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _init_state;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   _model_BP;                                         // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _model_resource;                                   // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _loop_motion_resource;                             // 0x0088(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _drop;                                             // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _drop_Prop;                                        // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _drop_itemspot;                                    // 0x00C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _item_GetState;                                    // 0x00C1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPropInteractType                            _interact_type;                                    // 0x00C2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C3[0x1];                                       // 0x00C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _interaction_radius;                               // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _interaction_offset_x;                             // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _interaction_offset_y;                             // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _interaction_offset_z;                             // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _interaction_confront_angle;                       // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _interaction_confront_angle_prop;                  // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _interaction_approach_message_code_name;           // 0x00DC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _interaction_success_massage;                      // 0x00E4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELMessageAlertType                            _succes_message_type;                              // 0x00EC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _interaction_message_time;                         // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _interaction_condition;                            // 0x00F4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _interaction_condition_item;                       // 0x00FC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _del_condition_item;                               // 0x0104(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _interaction_condition_human_point;                // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _interaction_condition_fail_approach_message;      // 0x010C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _interaction_condition_fail_message;               // 0x0114(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELMessageAlertType                            _fail_message_type;                                // 0x011C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _interaction_prop_motion_delay_time;               // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 _interaction_prop_motion_resource;                 // 0x0128(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _interaction_user_motion_resource;                 // 0x0150(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_possible_blocking;                             // 0x0178(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _contentCommand_codename;                          // 0x017C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _reverse_react;                                    // 0x0184(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_185[0x3];                                      // 0x0185(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 _reverse_prop_motion_resource;                     // 0x0188(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _reverse_user_motion_resource;                     // 0x01B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _sound_resource;                                   // 0x01D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _linked_prop_state_change;                         // 0x0200(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELLinkedPropExecute                           _linked_prop_execute;                              // 0x0201(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _FixCamera_onInterAction;                          // 0x0202(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _reset_state;                                      // 0x0203(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPropShapeObjectInfo) == 0x000008, "Wrong alignment on FPropShapeObjectInfo");
static_assert(sizeof(FPropShapeObjectInfo) == 0x000208, "Wrong size on FPropShapeObjectInfo");
static_assert(offsetof(FPropShapeObjectInfo, _code_name) == 0x000028, "Member 'FPropShapeObjectInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _state) == 0x000030, "Member 'FPropShapeObjectInfo::_state' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _init_state) == 0x000034, "Member 'FPropShapeObjectInfo::_init_state' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _model_BP) == 0x000038, "Member 'FPropShapeObjectInfo::_model_BP' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _model_resource) == 0x000060, "Member 'FPropShapeObjectInfo::_model_resource' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _loop_motion_resource) == 0x000088, "Member 'FPropShapeObjectInfo::_loop_motion_resource' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _drop) == 0x0000B0, "Member 'FPropShapeObjectInfo::_drop' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _drop_Prop) == 0x0000B8, "Member 'FPropShapeObjectInfo::_drop_Prop' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _drop_itemspot) == 0x0000C0, "Member 'FPropShapeObjectInfo::_drop_itemspot' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _item_GetState) == 0x0000C1, "Member 'FPropShapeObjectInfo::_item_GetState' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _interact_type) == 0x0000C2, "Member 'FPropShapeObjectInfo::_interact_type' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _interaction_radius) == 0x0000C4, "Member 'FPropShapeObjectInfo::_interaction_radius' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _interaction_offset_x) == 0x0000C8, "Member 'FPropShapeObjectInfo::_interaction_offset_x' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _interaction_offset_y) == 0x0000CC, "Member 'FPropShapeObjectInfo::_interaction_offset_y' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _interaction_offset_z) == 0x0000D0, "Member 'FPropShapeObjectInfo::_interaction_offset_z' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _interaction_confront_angle) == 0x0000D4, "Member 'FPropShapeObjectInfo::_interaction_confront_angle' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _interaction_confront_angle_prop) == 0x0000D8, "Member 'FPropShapeObjectInfo::_interaction_confront_angle_prop' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _interaction_approach_message_code_name) == 0x0000DC, "Member 'FPropShapeObjectInfo::_interaction_approach_message_code_name' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _interaction_success_massage) == 0x0000E4, "Member 'FPropShapeObjectInfo::_interaction_success_massage' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _succes_message_type) == 0x0000EC, "Member 'FPropShapeObjectInfo::_succes_message_type' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _interaction_message_time) == 0x0000F0, "Member 'FPropShapeObjectInfo::_interaction_message_time' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _interaction_condition) == 0x0000F4, "Member 'FPropShapeObjectInfo::_interaction_condition' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _interaction_condition_item) == 0x0000FC, "Member 'FPropShapeObjectInfo::_interaction_condition_item' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _del_condition_item) == 0x000104, "Member 'FPropShapeObjectInfo::_del_condition_item' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _interaction_condition_human_point) == 0x000108, "Member 'FPropShapeObjectInfo::_interaction_condition_human_point' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _interaction_condition_fail_approach_message) == 0x00010C, "Member 'FPropShapeObjectInfo::_interaction_condition_fail_approach_message' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _interaction_condition_fail_message) == 0x000114, "Member 'FPropShapeObjectInfo::_interaction_condition_fail_message' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _fail_message_type) == 0x00011C, "Member 'FPropShapeObjectInfo::_fail_message_type' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _interaction_prop_motion_delay_time) == 0x000120, "Member 'FPropShapeObjectInfo::_interaction_prop_motion_delay_time' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _interaction_prop_motion_resource) == 0x000128, "Member 'FPropShapeObjectInfo::_interaction_prop_motion_resource' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _interaction_user_motion_resource) == 0x000150, "Member 'FPropShapeObjectInfo::_interaction_user_motion_resource' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _is_possible_blocking) == 0x000178, "Member 'FPropShapeObjectInfo::_is_possible_blocking' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _contentCommand_codename) == 0x00017C, "Member 'FPropShapeObjectInfo::_contentCommand_codename' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _reverse_react) == 0x000184, "Member 'FPropShapeObjectInfo::_reverse_react' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _reverse_prop_motion_resource) == 0x000188, "Member 'FPropShapeObjectInfo::_reverse_prop_motion_resource' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _reverse_user_motion_resource) == 0x0001B0, "Member 'FPropShapeObjectInfo::_reverse_user_motion_resource' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _sound_resource) == 0x0001D8, "Member 'FPropShapeObjectInfo::_sound_resource' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _linked_prop_state_change) == 0x000200, "Member 'FPropShapeObjectInfo::_linked_prop_state_change' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _linked_prop_execute) == 0x000201, "Member 'FPropShapeObjectInfo::_linked_prop_execute' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _FixCamera_onInterAction) == 0x000202, "Member 'FPropShapeObjectInfo::_FixCamera_onInterAction' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfo, _reset_state) == 0x000203, "Member 'FPropShapeObjectInfo::_reset_state' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PropShapeObjectInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FPropShapeObjectInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FPropShapeObjectInfo>           _PropShapeObject_array;                            // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPropShapeObjectInfoDB) == 0x000008, "Wrong alignment on FPropShapeObjectInfoDB");
static_assert(sizeof(FPropShapeObjectInfoDB) == 0x000050, "Wrong size on FPropShapeObjectInfoDB");
static_assert(offsetof(FPropShapeObjectInfoDB, _PropShapeObject_array) == 0x000028, "Member 'FPropShapeObjectInfoDB::_PropShapeObject_array' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfoDB, _version) == 0x000038, "Member 'FPropShapeObjectInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FPropShapeObjectInfoDB, _comment) == 0x000040, "Member 'FPropShapeObjectInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PackageSettingInfo
// 0x0050 (0x0078 - 0x0028)
struct FPackageSettingInfo final : public FContentInfoBase
{
public:
	EPackageOwnerType                             _owner_type;                                       // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _owner_id;                                         // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPackageOfferReasonType                       _offer_reason;                                     // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPackageOfferMethodType                       _offer_method;                                     // 0x0035(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _acquisition_percentage;                           // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _acquisition_delay_ms;                             // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _package_configure_id;                             // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _prop_code_name;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 _drop_offset;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	bool                                          _force_acquisition;                                // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELFirstKillRewardType                         _first_kill_reward_type;                           // 0x0061(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _first_kill_package_configure_codename;            // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPackageSettingInfo) == 0x000008, "Wrong alignment on FPackageSettingInfo");
static_assert(sizeof(FPackageSettingInfo) == 0x000078, "Wrong size on FPackageSettingInfo");
static_assert(offsetof(FPackageSettingInfo, _owner_type) == 0x000028, "Member 'FPackageSettingInfo::_owner_type' has a wrong offset!");
static_assert(offsetof(FPackageSettingInfo, _owner_id) == 0x00002C, "Member 'FPackageSettingInfo::_owner_id' has a wrong offset!");
static_assert(offsetof(FPackageSettingInfo, _offer_reason) == 0x000034, "Member 'FPackageSettingInfo::_offer_reason' has a wrong offset!");
static_assert(offsetof(FPackageSettingInfo, _offer_method) == 0x000035, "Member 'FPackageSettingInfo::_offer_method' has a wrong offset!");
static_assert(offsetof(FPackageSettingInfo, _acquisition_percentage) == 0x000038, "Member 'FPackageSettingInfo::_acquisition_percentage' has a wrong offset!");
static_assert(offsetof(FPackageSettingInfo, _acquisition_delay_ms) == 0x00003C, "Member 'FPackageSettingInfo::_acquisition_delay_ms' has a wrong offset!");
static_assert(offsetof(FPackageSettingInfo, _package_configure_id) == 0x000040, "Member 'FPackageSettingInfo::_package_configure_id' has a wrong offset!");
static_assert(offsetof(FPackageSettingInfo, _prop_code_name) == 0x000048, "Member 'FPackageSettingInfo::_prop_code_name' has a wrong offset!");
static_assert(offsetof(FPackageSettingInfo, _drop_offset) == 0x000050, "Member 'FPackageSettingInfo::_drop_offset' has a wrong offset!");
static_assert(offsetof(FPackageSettingInfo, _force_acquisition) == 0x000060, "Member 'FPackageSettingInfo::_force_acquisition' has a wrong offset!");
static_assert(offsetof(FPackageSettingInfo, _first_kill_reward_type) == 0x000061, "Member 'FPackageSettingInfo::_first_kill_reward_type' has a wrong offset!");
static_assert(offsetof(FPackageSettingInfo, _first_kill_package_configure_codename) == 0x000068, "Member 'FPackageSettingInfo::_first_kill_package_configure_codename' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PackageConfigureInfo
// 0x0038 (0x0060 - 0x0028)
struct FPackageConfigureInfo final : public FContentInfoBase
{
public:
	class FName                                   _index;                                            // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _index_detail;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _NGP_round;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELDropType                                    _DropType;                                         // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _item_code_name;                                   // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _Drop_Set_Code_name;                               // 0x0044(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _item_count;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _item_acquisition_percentage;                      // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _condition_codename;                               // 0x0054(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPackageConfigureInfo) == 0x000008, "Wrong alignment on FPackageConfigureInfo");
static_assert(sizeof(FPackageConfigureInfo) == 0x000060, "Wrong size on FPackageConfigureInfo");
static_assert(offsetof(FPackageConfigureInfo, _index) == 0x000028, "Member 'FPackageConfigureInfo::_index' has a wrong offset!");
static_assert(offsetof(FPackageConfigureInfo, _index_detail) == 0x000030, "Member 'FPackageConfigureInfo::_index_detail' has a wrong offset!");
static_assert(offsetof(FPackageConfigureInfo, _NGP_round) == 0x000034, "Member 'FPackageConfigureInfo::_NGP_round' has a wrong offset!");
static_assert(offsetof(FPackageConfigureInfo, _DropType) == 0x000038, "Member 'FPackageConfigureInfo::_DropType' has a wrong offset!");
static_assert(offsetof(FPackageConfigureInfo, _item_code_name) == 0x00003C, "Member 'FPackageConfigureInfo::_item_code_name' has a wrong offset!");
static_assert(offsetof(FPackageConfigureInfo, _Drop_Set_Code_name) == 0x000044, "Member 'FPackageConfigureInfo::_Drop_Set_Code_name' has a wrong offset!");
static_assert(offsetof(FPackageConfigureInfo, _item_count) == 0x00004C, "Member 'FPackageConfigureInfo::_item_count' has a wrong offset!");
static_assert(offsetof(FPackageConfigureInfo, _item_acquisition_percentage) == 0x000050, "Member 'FPackageConfigureInfo::_item_acquisition_percentage' has a wrong offset!");
static_assert(offsetof(FPackageConfigureInfo, _condition_codename) == 0x000054, "Member 'FPackageConfigureInfo::_condition_codename' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ItemDropInfoDB
// 0x0038 (0x0060 - 0x0028)
struct FItemDropInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FPackageSettingInfo>            _PackageSettingInfo_array;                         // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FPackageConfigureInfo>          _PackageConfigureInfo_array;                       // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemDropInfoDB) == 0x000008, "Wrong alignment on FItemDropInfoDB");
static_assert(sizeof(FItemDropInfoDB) == 0x000060, "Wrong size on FItemDropInfoDB");
static_assert(offsetof(FItemDropInfoDB, _PackageSettingInfo_array) == 0x000028, "Member 'FItemDropInfoDB::_PackageSettingInfo_array' has a wrong offset!");
static_assert(offsetof(FItemDropInfoDB, _PackageConfigureInfo_array) == 0x000038, "Member 'FItemDropInfoDB::_PackageConfigureInfo_array' has a wrong offset!");
static_assert(offsetof(FItemDropInfoDB, _version) == 0x000048, "Member 'FItemDropInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FItemDropInfoDB, _comment) == 0x000050, "Member 'FItemDropInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.SlaveArmTreeInfo
// 0x00C8 (0x00F0 - 0x0028)
struct FSlaveArmTreeInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _slavearm_page_code_name;                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _depth;                                            // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 _attach_mesh;                                      // 0x0040(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _require_item_code_name;                           // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _require_item_count;                               // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _reinforcement_code_name;                          // 0x0074(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _prerequisite_tree_code_name;                      // 0x007C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _video;                                            // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _icon;                                             // 0x0098(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_name;                                  // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_tooltip;                               // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_name_cn;                               // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_tooltip_cn;                            // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSlaveArmTreeInfo) == 0x000008, "Wrong alignment on FSlaveArmTreeInfo");
static_assert(sizeof(FSlaveArmTreeInfo) == 0x0000F0, "Wrong size on FSlaveArmTreeInfo");
static_assert(offsetof(FSlaveArmTreeInfo, _code_name) == 0x000028, "Member 'FSlaveArmTreeInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FSlaveArmTreeInfo, _slavearm_page_code_name) == 0x000030, "Member 'FSlaveArmTreeInfo::_slavearm_page_code_name' has a wrong offset!");
static_assert(offsetof(FSlaveArmTreeInfo, _depth) == 0x000038, "Member 'FSlaveArmTreeInfo::_depth' has a wrong offset!");
static_assert(offsetof(FSlaveArmTreeInfo, _attach_mesh) == 0x000040, "Member 'FSlaveArmTreeInfo::_attach_mesh' has a wrong offset!");
static_assert(offsetof(FSlaveArmTreeInfo, _require_item_code_name) == 0x000068, "Member 'FSlaveArmTreeInfo::_require_item_code_name' has a wrong offset!");
static_assert(offsetof(FSlaveArmTreeInfo, _require_item_count) == 0x000070, "Member 'FSlaveArmTreeInfo::_require_item_count' has a wrong offset!");
static_assert(offsetof(FSlaveArmTreeInfo, _reinforcement_code_name) == 0x000074, "Member 'FSlaveArmTreeInfo::_reinforcement_code_name' has a wrong offset!");
static_assert(offsetof(FSlaveArmTreeInfo, _prerequisite_tree_code_name) == 0x00007C, "Member 'FSlaveArmTreeInfo::_prerequisite_tree_code_name' has a wrong offset!");
static_assert(offsetof(FSlaveArmTreeInfo, _video) == 0x000088, "Member 'FSlaveArmTreeInfo::_video' has a wrong offset!");
static_assert(offsetof(FSlaveArmTreeInfo, _icon) == 0x000098, "Member 'FSlaveArmTreeInfo::_icon' has a wrong offset!");
static_assert(offsetof(FSlaveArmTreeInfo, _local_text_name) == 0x0000C0, "Member 'FSlaveArmTreeInfo::_local_text_name' has a wrong offset!");
static_assert(offsetof(FSlaveArmTreeInfo, _local_text_tooltip) == 0x0000D0, "Member 'FSlaveArmTreeInfo::_local_text_tooltip' has a wrong offset!");
static_assert(offsetof(FSlaveArmTreeInfo, _local_text_name_cn) == 0x0000E0, "Member 'FSlaveArmTreeInfo::_local_text_name_cn' has a wrong offset!");
static_assert(offsetof(FSlaveArmTreeInfo, _local_text_tooltip_cn) == 0x0000E8, "Member 'FSlaveArmTreeInfo::_local_text_tooltip_cn' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PatchRewardInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FPatchRewardInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPatchRewardInfoPtr) == 0x000008, "Wrong alignment on FPatchRewardInfoPtr");
static_assert(sizeof(FPatchRewardInfoPtr) == 0x000008, "Wrong size on FPatchRewardInfoPtr");

// ScriptStruct ProjectPContentInfo.PackageSettingInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FPackageSettingInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPackageSettingInfoPtr) == 0x000008, "Wrong alignment on FPackageSettingInfoPtr");
static_assert(sizeof(FPackageSettingInfoPtr) == 0x000008, "Wrong size on FPackageSettingInfoPtr");

// ScriptStruct ProjectPContentInfo.ItemCommonInfo
// 0x0190 (0x01B8 - 0x0028)
struct FItemCommonInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_item_name;                             // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_item_name_cn;                          // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELItemFirstCategory                           _first_category;                                   // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELItemSecondCategory                          _second_category;                                  // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 _image_resource;                                   // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _image_2_resource;                                 // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _image_3_resource;                                 // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _image_4_resource;                                 // 0x00C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _item_costume_codename;                            // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _heroic_weapon_image_resource;                     // 0x00F8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _equip_specialbuff_code_name;                      // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _weight;                                           // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _quickslot_equipment;                              // 0x012C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _can_selling;                                      // 0x012D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12E[0x2];                                      // 0x012E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _selling_price;                                    // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _can_stack_inventory;                              // 0x0134(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _max_stack_count;                                  // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _battle_item;                                      // 0x013C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _can_abandonment;                                  // 0x013D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _can_keep;                                         // 0x013E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13F[0x1];                                      // 0x013F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _local_text_tooltip_1;                             // 0x0140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_tooltip_1_cn;                          // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_tooltip_2;                             // 0x0158(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_tooltip_2_cn;                          // 0x0168(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _value_grade;                                      // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTooltipIconType                             _simple_tooltip_type;                              // 0x0174(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_175[0x3];                                      // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _simple_tooltip;                                   // 0x0178(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _simple_tooltip_cn;                                // 0x0188(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _NGP_Keep;                                         // 0x0190(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _NGP_Delete;                                       // 0x0191(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _NGP_OnlyOne;                                      // 0x0192(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_193[0x1];                                      // 0x0193(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _equip_group_id;                                   // 0x0194(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sort_priority;                                    // 0x0198(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _show_tooltip_unusable_now;                        // 0x019C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _info_notice_count;                                // 0x01A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_minimum_requirements;                          // 0x01A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _humanity_item;                                    // 0x01A9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _use_changecodename;                               // 0x01AA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AB[0x1];                                      // 0x01AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _change_code_name;                                 // 0x01AC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemCommonInfo) == 0x000008, "Wrong alignment on FItemCommonInfo");
static_assert(sizeof(FItemCommonInfo) == 0x0001B8, "Wrong size on FItemCommonInfo");
static_assert(offsetof(FItemCommonInfo, _code_name) == 0x000028, "Member 'FItemCommonInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _local_text_item_name) == 0x000030, "Member 'FItemCommonInfo::_local_text_item_name' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _local_text_item_name_cn) == 0x000040, "Member 'FItemCommonInfo::_local_text_item_name_cn' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _first_category) == 0x000048, "Member 'FItemCommonInfo::_first_category' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _second_category) == 0x000049, "Member 'FItemCommonInfo::_second_category' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _image_resource) == 0x000050, "Member 'FItemCommonInfo::_image_resource' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _image_2_resource) == 0x000078, "Member 'FItemCommonInfo::_image_2_resource' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _image_3_resource) == 0x0000A0, "Member 'FItemCommonInfo::_image_3_resource' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _image_4_resource) == 0x0000C8, "Member 'FItemCommonInfo::_image_4_resource' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _item_costume_codename) == 0x0000F0, "Member 'FItemCommonInfo::_item_costume_codename' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _heroic_weapon_image_resource) == 0x0000F8, "Member 'FItemCommonInfo::_heroic_weapon_image_resource' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _equip_specialbuff_code_name) == 0x000120, "Member 'FItemCommonInfo::_equip_specialbuff_code_name' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _weight) == 0x000128, "Member 'FItemCommonInfo::_weight' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _quickslot_equipment) == 0x00012C, "Member 'FItemCommonInfo::_quickslot_equipment' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _can_selling) == 0x00012D, "Member 'FItemCommonInfo::_can_selling' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _selling_price) == 0x000130, "Member 'FItemCommonInfo::_selling_price' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _can_stack_inventory) == 0x000134, "Member 'FItemCommonInfo::_can_stack_inventory' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _max_stack_count) == 0x000138, "Member 'FItemCommonInfo::_max_stack_count' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _battle_item) == 0x00013C, "Member 'FItemCommonInfo::_battle_item' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _can_abandonment) == 0x00013D, "Member 'FItemCommonInfo::_can_abandonment' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _can_keep) == 0x00013E, "Member 'FItemCommonInfo::_can_keep' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _local_text_tooltip_1) == 0x000140, "Member 'FItemCommonInfo::_local_text_tooltip_1' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _local_text_tooltip_1_cn) == 0x000150, "Member 'FItemCommonInfo::_local_text_tooltip_1_cn' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _local_text_tooltip_2) == 0x000158, "Member 'FItemCommonInfo::_local_text_tooltip_2' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _local_text_tooltip_2_cn) == 0x000168, "Member 'FItemCommonInfo::_local_text_tooltip_2_cn' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _value_grade) == 0x000170, "Member 'FItemCommonInfo::_value_grade' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _simple_tooltip_type) == 0x000174, "Member 'FItemCommonInfo::_simple_tooltip_type' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _simple_tooltip) == 0x000178, "Member 'FItemCommonInfo::_simple_tooltip' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _simple_tooltip_cn) == 0x000188, "Member 'FItemCommonInfo::_simple_tooltip_cn' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _NGP_Keep) == 0x000190, "Member 'FItemCommonInfo::_NGP_Keep' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _NGP_Delete) == 0x000191, "Member 'FItemCommonInfo::_NGP_Delete' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _NGP_OnlyOne) == 0x000192, "Member 'FItemCommonInfo::_NGP_OnlyOne' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _equip_group_id) == 0x000194, "Member 'FItemCommonInfo::_equip_group_id' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _sort_priority) == 0x000198, "Member 'FItemCommonInfo::_sort_priority' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _show_tooltip_unusable_now) == 0x00019C, "Member 'FItemCommonInfo::_show_tooltip_unusable_now' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _info_notice_count) == 0x0001A4, "Member 'FItemCommonInfo::_info_notice_count' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _is_minimum_requirements) == 0x0001A8, "Member 'FItemCommonInfo::_is_minimum_requirements' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _humanity_item) == 0x0001A9, "Member 'FItemCommonInfo::_humanity_item' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _use_changecodename) == 0x0001AA, "Member 'FItemCommonInfo::_use_changecodename' has a wrong offset!");
static_assert(offsetof(FItemCommonInfo, _change_code_name) == 0x0001AC, "Member 'FItemCommonInfo::_change_code_name' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.CorrectionWeaponFirstStatInfo
// 0x01B0 (0x01D8 - 0x0028)
struct FCorrectionWeaponFirstStatInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level1;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level2;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level3;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level4;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level5;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level6;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level7;                                      // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level8;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level9;                                      // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level10;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level11;                                     // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level12;                                     // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level13;                                     // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level14;                                     // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level15;                                     // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level16;                                     // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level17;                                     // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level18;                                     // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level19;                                     // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level20;                                     // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level21;                                     // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level22;                                     // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level23;                                     // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level24;                                     // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level25;                                     // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level26;                                     // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level27;                                     // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level28;                                     // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level29;                                     // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level30;                                     // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level31;                                     // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level32;                                     // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level33;                                     // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level34;                                     // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level35;                                     // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level36;                                     // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level37;                                     // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level38;                                     // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level39;                                     // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level40;                                     // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level41;                                     // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level42;                                     // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level43;                                     // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level44;                                     // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level45;                                     // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level46;                                     // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level47;                                     // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level48;                                     // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level49;                                     // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level50;                                     // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level51;                                     // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level52;                                     // 0x00FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level53;                                     // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level54;                                     // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level55;                                     // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level56;                                     // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level57;                                     // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level58;                                     // 0x0114(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level59;                                     // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level60;                                     // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level61;                                     // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level62;                                     // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level63;                                     // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level64;                                     // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level65;                                     // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level66;                                     // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level67;                                     // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level68;                                     // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level69;                                     // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level70;                                     // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level71;                                     // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level72;                                     // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level73;                                     // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level74;                                     // 0x0154(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level75;                                     // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level76;                                     // 0x015C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level77;                                     // 0x0160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level78;                                     // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level79;                                     // 0x0168(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level80;                                     // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level81;                                     // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level82;                                     // 0x0174(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level83;                                     // 0x0178(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level84;                                     // 0x017C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level85;                                     // 0x0180(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level86;                                     // 0x0184(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level87;                                     // 0x0188(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level88;                                     // 0x018C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level89;                                     // 0x0190(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level90;                                     // 0x0194(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level91;                                     // 0x0198(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level92;                                     // 0x019C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level93;                                     // 0x01A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level94;                                     // 0x01A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level95;                                     // 0x01A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level96;                                     // 0x01AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level97;                                     // 0x01B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level98;                                     // 0x01B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level99;                                     // 0x01B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stat_level100;                                    // 0x01BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _upgrade_codename;                                 // 0x01C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _downgrade_codename;                               // 0x01C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELWeaponCorrectionPhysicalGrade               _grade;                                            // 0x01D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCorrectionWeaponFirstStatInfo) == 0x000008, "Wrong alignment on FCorrectionWeaponFirstStatInfo");
static_assert(sizeof(FCorrectionWeaponFirstStatInfo) == 0x0001D8, "Wrong size on FCorrectionWeaponFirstStatInfo");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _code_name) == 0x000028, "Member 'FCorrectionWeaponFirstStatInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level1) == 0x000030, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level1' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level2) == 0x000034, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level2' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level3) == 0x000038, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level3' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level4) == 0x00003C, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level4' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level5) == 0x000040, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level5' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level6) == 0x000044, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level6' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level7) == 0x000048, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level7' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level8) == 0x00004C, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level8' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level9) == 0x000050, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level9' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level10) == 0x000054, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level10' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level11) == 0x000058, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level11' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level12) == 0x00005C, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level12' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level13) == 0x000060, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level13' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level14) == 0x000064, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level14' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level15) == 0x000068, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level15' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level16) == 0x00006C, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level16' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level17) == 0x000070, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level17' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level18) == 0x000074, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level18' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level19) == 0x000078, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level19' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level20) == 0x00007C, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level20' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level21) == 0x000080, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level21' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level22) == 0x000084, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level22' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level23) == 0x000088, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level23' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level24) == 0x00008C, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level24' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level25) == 0x000090, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level25' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level26) == 0x000094, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level26' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level27) == 0x000098, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level27' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level28) == 0x00009C, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level28' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level29) == 0x0000A0, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level29' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level30) == 0x0000A4, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level30' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level31) == 0x0000A8, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level31' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level32) == 0x0000AC, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level32' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level33) == 0x0000B0, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level33' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level34) == 0x0000B4, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level34' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level35) == 0x0000B8, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level35' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level36) == 0x0000BC, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level36' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level37) == 0x0000C0, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level37' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level38) == 0x0000C4, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level38' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level39) == 0x0000C8, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level39' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level40) == 0x0000CC, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level40' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level41) == 0x0000D0, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level41' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level42) == 0x0000D4, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level42' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level43) == 0x0000D8, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level43' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level44) == 0x0000DC, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level44' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level45) == 0x0000E0, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level45' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level46) == 0x0000E4, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level46' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level47) == 0x0000E8, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level47' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level48) == 0x0000EC, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level48' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level49) == 0x0000F0, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level49' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level50) == 0x0000F4, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level50' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level51) == 0x0000F8, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level51' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level52) == 0x0000FC, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level52' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level53) == 0x000100, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level53' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level54) == 0x000104, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level54' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level55) == 0x000108, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level55' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level56) == 0x00010C, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level56' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level57) == 0x000110, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level57' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level58) == 0x000114, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level58' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level59) == 0x000118, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level59' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level60) == 0x00011C, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level60' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level61) == 0x000120, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level61' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level62) == 0x000124, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level62' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level63) == 0x000128, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level63' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level64) == 0x00012C, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level64' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level65) == 0x000130, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level65' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level66) == 0x000134, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level66' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level67) == 0x000138, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level67' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level68) == 0x00013C, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level68' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level69) == 0x000140, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level69' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level70) == 0x000144, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level70' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level71) == 0x000148, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level71' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level72) == 0x00014C, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level72' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level73) == 0x000150, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level73' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level74) == 0x000154, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level74' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level75) == 0x000158, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level75' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level76) == 0x00015C, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level76' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level77) == 0x000160, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level77' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level78) == 0x000164, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level78' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level79) == 0x000168, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level79' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level80) == 0x00016C, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level80' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level81) == 0x000170, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level81' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level82) == 0x000174, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level82' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level83) == 0x000178, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level83' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level84) == 0x00017C, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level84' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level85) == 0x000180, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level85' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level86) == 0x000184, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level86' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level87) == 0x000188, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level87' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level88) == 0x00018C, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level88' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level89) == 0x000190, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level89' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level90) == 0x000194, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level90' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level91) == 0x000198, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level91' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level92) == 0x00019C, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level92' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level93) == 0x0001A0, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level93' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level94) == 0x0001A4, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level94' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level95) == 0x0001A8, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level95' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level96) == 0x0001AC, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level96' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level97) == 0x0001B0, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level97' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level98) == 0x0001B4, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level98' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level99) == 0x0001B8, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level99' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _stat_level100) == 0x0001BC, "Member 'FCorrectionWeaponFirstStatInfo::_stat_level100' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _upgrade_codename) == 0x0001C0, "Member 'FCorrectionWeaponFirstStatInfo::_upgrade_codename' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _downgrade_codename) == 0x0001C8, "Member 'FCorrectionWeaponFirstStatInfo::_downgrade_codename' has a wrong offset!");
static_assert(offsetof(FCorrectionWeaponFirstStatInfo, _grade) == 0x0001D0, "Member 'FCorrectionWeaponFirstStatInfo::_grade' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ItemCollectionInfo
// 0x0178 (0x01A0 - 0x0028)
struct FItemCollectionInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELItemCollectionType                          _type;                                             // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 _image_resource;                                   // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _page_max;                                         // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _local_text_content_1;                             // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_content_2;                             // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_content_3;                             // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_content_4;                             // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_content_5;                             // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_content_6;                             // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_content_7;                             // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_content_8;                             // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_content_9;                             // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_content_10;                            // 0x00F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_content_1_cn;                          // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_content_2_cn;                          // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_content_3_cn;                          // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_content_4_cn;                          // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_content_5_cn;                          // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_content_6_cn;                          // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_content_7_cn;                          // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_content_8_cn;                          // 0x0140(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_content_9_cn;                          // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_content_10_cn;                         // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _acquisition_humanity_point;                       // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 _bgm_resource;                                     // 0x0160(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _bgm_duration;                                     // 0x0188(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _acquisition_humanity_play_time;                   // 0x018C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _record_list_order;                                // 0x0190(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _contentCommand_codename;                          // 0x0194(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _command_exec_time;                                // 0x019C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemCollectionInfo) == 0x000008, "Wrong alignment on FItemCollectionInfo");
static_assert(sizeof(FItemCollectionInfo) == 0x0001A0, "Wrong size on FItemCollectionInfo");
static_assert(offsetof(FItemCollectionInfo, _code_name) == 0x000028, "Member 'FItemCollectionInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _type) == 0x000030, "Member 'FItemCollectionInfo::_type' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _image_resource) == 0x000038, "Member 'FItemCollectionInfo::_image_resource' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _page_max) == 0x000060, "Member 'FItemCollectionInfo::_page_max' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _local_text_content_1) == 0x000068, "Member 'FItemCollectionInfo::_local_text_content_1' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _local_text_content_2) == 0x000078, "Member 'FItemCollectionInfo::_local_text_content_2' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _local_text_content_3) == 0x000088, "Member 'FItemCollectionInfo::_local_text_content_3' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _local_text_content_4) == 0x000098, "Member 'FItemCollectionInfo::_local_text_content_4' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _local_text_content_5) == 0x0000A8, "Member 'FItemCollectionInfo::_local_text_content_5' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _local_text_content_6) == 0x0000B8, "Member 'FItemCollectionInfo::_local_text_content_6' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _local_text_content_7) == 0x0000C8, "Member 'FItemCollectionInfo::_local_text_content_7' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _local_text_content_8) == 0x0000D8, "Member 'FItemCollectionInfo::_local_text_content_8' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _local_text_content_9) == 0x0000E8, "Member 'FItemCollectionInfo::_local_text_content_9' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _local_text_content_10) == 0x0000F8, "Member 'FItemCollectionInfo::_local_text_content_10' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _local_text_content_1_cn) == 0x000108, "Member 'FItemCollectionInfo::_local_text_content_1_cn' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _local_text_content_2_cn) == 0x000110, "Member 'FItemCollectionInfo::_local_text_content_2_cn' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _local_text_content_3_cn) == 0x000118, "Member 'FItemCollectionInfo::_local_text_content_3_cn' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _local_text_content_4_cn) == 0x000120, "Member 'FItemCollectionInfo::_local_text_content_4_cn' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _local_text_content_5_cn) == 0x000128, "Member 'FItemCollectionInfo::_local_text_content_5_cn' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _local_text_content_6_cn) == 0x000130, "Member 'FItemCollectionInfo::_local_text_content_6_cn' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _local_text_content_7_cn) == 0x000138, "Member 'FItemCollectionInfo::_local_text_content_7_cn' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _local_text_content_8_cn) == 0x000140, "Member 'FItemCollectionInfo::_local_text_content_8_cn' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _local_text_content_9_cn) == 0x000148, "Member 'FItemCollectionInfo::_local_text_content_9_cn' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _local_text_content_10_cn) == 0x000150, "Member 'FItemCollectionInfo::_local_text_content_10_cn' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _acquisition_humanity_point) == 0x000158, "Member 'FItemCollectionInfo::_acquisition_humanity_point' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _bgm_resource) == 0x000160, "Member 'FItemCollectionInfo::_bgm_resource' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _bgm_duration) == 0x000188, "Member 'FItemCollectionInfo::_bgm_duration' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _acquisition_humanity_play_time) == 0x00018C, "Member 'FItemCollectionInfo::_acquisition_humanity_play_time' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _record_list_order) == 0x000190, "Member 'FItemCollectionInfo::_record_list_order' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _contentCommand_codename) == 0x000194, "Member 'FItemCollectionInfo::_contentCommand_codename' has a wrong offset!");
static_assert(offsetof(FItemCollectionInfo, _command_exec_time) == 0x00019C, "Member 'FItemCollectionInfo::_command_exec_time' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.BladeWeightInfo
// 0x0050 (0x0078 - 0x0028)
struct FBladeWeightInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _knockback_distance_ratio;                         // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _hit_anim_duration_ratio;                          // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _intro_play_rate;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _intro_montage_slot;                               // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _charge_play_rate;                                 // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _charge_montage_slot;                              // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _swing_play_rate;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _swing_montage_slot;                               // 0x0054(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _delay_play_rate;                                  // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _delay_montage_slot;                               // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _end_play_rate;                                    // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _end_montage_slot;                                 // 0x006C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stamina_consume_ratio;                            // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBladeWeightInfo) == 0x000008, "Wrong alignment on FBladeWeightInfo");
static_assert(sizeof(FBladeWeightInfo) == 0x000078, "Wrong size on FBladeWeightInfo");
static_assert(offsetof(FBladeWeightInfo, _code_name) == 0x000028, "Member 'FBladeWeightInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FBladeWeightInfo, _knockback_distance_ratio) == 0x000030, "Member 'FBladeWeightInfo::_knockback_distance_ratio' has a wrong offset!");
static_assert(offsetof(FBladeWeightInfo, _hit_anim_duration_ratio) == 0x000034, "Member 'FBladeWeightInfo::_hit_anim_duration_ratio' has a wrong offset!");
static_assert(offsetof(FBladeWeightInfo, _intro_play_rate) == 0x000038, "Member 'FBladeWeightInfo::_intro_play_rate' has a wrong offset!");
static_assert(offsetof(FBladeWeightInfo, _intro_montage_slot) == 0x00003C, "Member 'FBladeWeightInfo::_intro_montage_slot' has a wrong offset!");
static_assert(offsetof(FBladeWeightInfo, _charge_play_rate) == 0x000044, "Member 'FBladeWeightInfo::_charge_play_rate' has a wrong offset!");
static_assert(offsetof(FBladeWeightInfo, _charge_montage_slot) == 0x000048, "Member 'FBladeWeightInfo::_charge_montage_slot' has a wrong offset!");
static_assert(offsetof(FBladeWeightInfo, _swing_play_rate) == 0x000050, "Member 'FBladeWeightInfo::_swing_play_rate' has a wrong offset!");
static_assert(offsetof(FBladeWeightInfo, _swing_montage_slot) == 0x000054, "Member 'FBladeWeightInfo::_swing_montage_slot' has a wrong offset!");
static_assert(offsetof(FBladeWeightInfo, _delay_play_rate) == 0x00005C, "Member 'FBladeWeightInfo::_delay_play_rate' has a wrong offset!");
static_assert(offsetof(FBladeWeightInfo, _delay_montage_slot) == 0x000060, "Member 'FBladeWeightInfo::_delay_montage_slot' has a wrong offset!");
static_assert(offsetof(FBladeWeightInfo, _end_play_rate) == 0x000068, "Member 'FBladeWeightInfo::_end_play_rate' has a wrong offset!");
static_assert(offsetof(FBladeWeightInfo, _end_montage_slot) == 0x00006C, "Member 'FBladeWeightInfo::_end_montage_slot' has a wrong offset!");
static_assert(offsetof(FBladeWeightInfo, _stamina_consume_ratio) == 0x000074, "Member 'FBladeWeightInfo::_stamina_consume_ratio' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ItemSlaveArmInfo
// 0x00D8 (0x0100 - 0x0028)
struct FItemSlaveArmInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           _mesh;                                             // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _skill_code_name;                                  // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELReserveType                                 _reserve_type;                                     // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _consume_command;                                  // 0x0061(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _slavearm_physical_attack;                         // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _slavearm_fire_attack;                             // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _slavearm_acid_attack;                             // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _slavearm_electric_attack;                         // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _slavearm_destruction_power;                       // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _attack_gain_frenzy_point_passive;                 // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _attack_gain_frenzy_point_active;                  // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _destruction_defence;                              // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _destruction_reduce;                               // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _abnormal_state_codename;                          // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _abnormal_state_build_up_attack;                   // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _rigidity;                                         // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _consume_stamina_point;                            // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _skill_action_path_code_name;                      // 0x009C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _action_group_table_code_name;                     // 0x00A4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _tough_recovery_delay_time;                        // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _pulse_recharge_attack;                            // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _correction_code_name_for_advance;                 // 0x00B4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _correction_code_name_for_motivity;                // 0x00BC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _correction_code_name_for_technique;               // 0x00C4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _ammo_max;                                         // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _ammo_reload_cooltime;                             // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _ammo_reload_amount;                               // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _additional_groggy_time;                           // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           _preload_skill_list;                               // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FName>                           _preload_projectile_list;                          // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemSlaveArmInfo) == 0x000008, "Wrong alignment on FItemSlaveArmInfo");
static_assert(sizeof(FItemSlaveArmInfo) == 0x000100, "Wrong size on FItemSlaveArmInfo");
static_assert(offsetof(FItemSlaveArmInfo, _code_name) == 0x000028, "Member 'FItemSlaveArmInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _mesh) == 0x000030, "Member 'FItemSlaveArmInfo::_mesh' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _skill_code_name) == 0x000058, "Member 'FItemSlaveArmInfo::_skill_code_name' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _reserve_type) == 0x000060, "Member 'FItemSlaveArmInfo::_reserve_type' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _consume_command) == 0x000061, "Member 'FItemSlaveArmInfo::_consume_command' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _slavearm_physical_attack) == 0x000064, "Member 'FItemSlaveArmInfo::_slavearm_physical_attack' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _slavearm_fire_attack) == 0x000068, "Member 'FItemSlaveArmInfo::_slavearm_fire_attack' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _slavearm_acid_attack) == 0x00006C, "Member 'FItemSlaveArmInfo::_slavearm_acid_attack' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _slavearm_electric_attack) == 0x000070, "Member 'FItemSlaveArmInfo::_slavearm_electric_attack' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _slavearm_destruction_power) == 0x000074, "Member 'FItemSlaveArmInfo::_slavearm_destruction_power' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _attack_gain_frenzy_point_passive) == 0x000078, "Member 'FItemSlaveArmInfo::_attack_gain_frenzy_point_passive' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _attack_gain_frenzy_point_active) == 0x00007C, "Member 'FItemSlaveArmInfo::_attack_gain_frenzy_point_active' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _destruction_defence) == 0x000080, "Member 'FItemSlaveArmInfo::_destruction_defence' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _destruction_reduce) == 0x000084, "Member 'FItemSlaveArmInfo::_destruction_reduce' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _abnormal_state_codename) == 0x000088, "Member 'FItemSlaveArmInfo::_abnormal_state_codename' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _abnormal_state_build_up_attack) == 0x000090, "Member 'FItemSlaveArmInfo::_abnormal_state_build_up_attack' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _rigidity) == 0x000094, "Member 'FItemSlaveArmInfo::_rigidity' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _consume_stamina_point) == 0x000098, "Member 'FItemSlaveArmInfo::_consume_stamina_point' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _skill_action_path_code_name) == 0x00009C, "Member 'FItemSlaveArmInfo::_skill_action_path_code_name' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _action_group_table_code_name) == 0x0000A4, "Member 'FItemSlaveArmInfo::_action_group_table_code_name' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _tough_recovery_delay_time) == 0x0000AC, "Member 'FItemSlaveArmInfo::_tough_recovery_delay_time' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _pulse_recharge_attack) == 0x0000B0, "Member 'FItemSlaveArmInfo::_pulse_recharge_attack' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _correction_code_name_for_advance) == 0x0000B4, "Member 'FItemSlaveArmInfo::_correction_code_name_for_advance' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _correction_code_name_for_motivity) == 0x0000BC, "Member 'FItemSlaveArmInfo::_correction_code_name_for_motivity' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _correction_code_name_for_technique) == 0x0000C4, "Member 'FItemSlaveArmInfo::_correction_code_name_for_technique' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _ammo_max) == 0x0000CC, "Member 'FItemSlaveArmInfo::_ammo_max' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _ammo_reload_cooltime) == 0x0000D0, "Member 'FItemSlaveArmInfo::_ammo_reload_cooltime' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _ammo_reload_amount) == 0x0000D4, "Member 'FItemSlaveArmInfo::_ammo_reload_amount' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _additional_groggy_time) == 0x0000D8, "Member 'FItemSlaveArmInfo::_additional_groggy_time' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _preload_skill_list) == 0x0000E0, "Member 'FItemSlaveArmInfo::_preload_skill_list' has a wrong offset!");
static_assert(offsetof(FItemSlaveArmInfo, _preload_projectile_list) == 0x0000F0, "Member 'FItemSlaveArmInfo::_preload_projectile_list' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ItemHandleInfo
// 0x0190 (0x01B8 - 0x0028)
struct FItemHandleInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_byname;                                // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_byname_cn;                             // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _weapon_bp_code_name;                              // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _weapon_combine_cost;                              // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _weapon_combine_item_code_name;                    // 0x0054(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _weapon_combine_item_count;                        // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _weapon_divide_cost;                               // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _weapon_divide_item_code_name;                     // 0x0064(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _weapon_divide_item_count;                         // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELWeaponShapeType                             _shape_type;                                       // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _guard_stamina_reduction_ratio;                    // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_duration_ratio;                             // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _blade_weight_code_name;                           // 0x007C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_point;                                      // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_knockback_distance_reduction_ratio;         // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _perfect_guard_decrease_enemy_weapon_durability;   // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _attack_speed;                                     // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _destruction_defence;                              // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _destruction_reduce;                               // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _swing_sound_codename;                             // 0x009C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _reinforce_table_code_name;                        // 0x00A4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELWeaponPostureType                           _posture_type;                                     // 0x00AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELWeaponStyleType                             _style_type;                                       // 0x00AD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AE[0x2];                                       // 0x00AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ELBladeShapeType>                      _allow_blade_shape_type;                           // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FName                                   _combo_type;                                       // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _common_action_path_code_name;                     // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _locomotion_action_path_code_name;                 // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _skill_action_path_code_name;                      // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _action_group_table_code_name;                     // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _necessity_motivity;                               // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _necessity_technique;                              // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _necessity_advance;                                // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _correction_code_name_for_advance;                 // 0x00F4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _correction_code_name_for_motivity;                // 0x00FC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _correction_code_name_for_technique;               // 0x0104(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_fine_point_mod;                         // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_normal_point_mod;                       // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_bad_point_mod;                          // 0x0114(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _have_swing_motion;                                // 0x0118(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _have_thrust_motion;                               // 0x0119(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A[0x2];                                      // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _guard_gain_frenzy_point_passive;                  // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _perfect_guard_gain_frenzy_point_passive;          // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_gain_frenzy_point_active;                   // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _perfect_guard_gain_frenzy_point_active;           // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _perfect_guard_gain_frenzy_point_ratio_furyattack; // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _original_blade_code_name;                         // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _stamina_consume_ratio_min;                        // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _stamina_consume_ratio_max;                        // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _intro_play_rate_min;                              // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _intro_play_rate_max;                              // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _charge_play_rate_min;                             // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _charge_play_rate_max;                             // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _swing_play_rate_min;                              // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _swing_play_rate_max;                              // 0x0154(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _delay_play_rate_min;                              // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _delay_play_rate_max;                              // 0x015C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _end_play_rate_min;                                // 0x0160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _end_play_rate_max;                                // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _rigidity;                                         // 0x0168(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _handle_need_stat_lack_atk_ratio;                  // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _handle_need_stat_lack_guard_save_stamina_ratio;   // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _handle_need_stat_lack_abnormal_state_code_name;   // 0x0174(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_regain_ratio;                               // 0x017C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_intensity;                                  // 0x0180(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _heroic_weapon;                                    // 0x0184(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_185[0x3];                                      // 0x0185(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _frenzy_skill_code_name;                           // 0x0188(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _guard_parry_counter_skill_code_name;              // 0x0190(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           _preload_skill_list;                               // 0x0198(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FName>                           _preload_weapon_list;                              // 0x01A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemHandleInfo) == 0x000008, "Wrong alignment on FItemHandleInfo");
static_assert(sizeof(FItemHandleInfo) == 0x0001B8, "Wrong size on FItemHandleInfo");
static_assert(offsetof(FItemHandleInfo, _code_name) == 0x000028, "Member 'FItemHandleInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _local_text_byname) == 0x000030, "Member 'FItemHandleInfo::_local_text_byname' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _local_text_byname_cn) == 0x000040, "Member 'FItemHandleInfo::_local_text_byname_cn' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _weapon_bp_code_name) == 0x000048, "Member 'FItemHandleInfo::_weapon_bp_code_name' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _weapon_combine_cost) == 0x000050, "Member 'FItemHandleInfo::_weapon_combine_cost' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _weapon_combine_item_code_name) == 0x000054, "Member 'FItemHandleInfo::_weapon_combine_item_code_name' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _weapon_combine_item_count) == 0x00005C, "Member 'FItemHandleInfo::_weapon_combine_item_count' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _weapon_divide_cost) == 0x000060, "Member 'FItemHandleInfo::_weapon_divide_cost' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _weapon_divide_item_code_name) == 0x000064, "Member 'FItemHandleInfo::_weapon_divide_item_code_name' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _weapon_divide_item_count) == 0x00006C, "Member 'FItemHandleInfo::_weapon_divide_item_count' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _shape_type) == 0x000070, "Member 'FItemHandleInfo::_shape_type' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _guard_stamina_reduction_ratio) == 0x000074, "Member 'FItemHandleInfo::_guard_stamina_reduction_ratio' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _guard_duration_ratio) == 0x000078, "Member 'FItemHandleInfo::_guard_duration_ratio' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _blade_weight_code_name) == 0x00007C, "Member 'FItemHandleInfo::_blade_weight_code_name' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _guard_point) == 0x000084, "Member 'FItemHandleInfo::_guard_point' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _guard_knockback_distance_reduction_ratio) == 0x000088, "Member 'FItemHandleInfo::_guard_knockback_distance_reduction_ratio' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _perfect_guard_decrease_enemy_weapon_durability) == 0x00008C, "Member 'FItemHandleInfo::_perfect_guard_decrease_enemy_weapon_durability' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _attack_speed) == 0x000090, "Member 'FItemHandleInfo::_attack_speed' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _destruction_defence) == 0x000094, "Member 'FItemHandleInfo::_destruction_defence' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _destruction_reduce) == 0x000098, "Member 'FItemHandleInfo::_destruction_reduce' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _swing_sound_codename) == 0x00009C, "Member 'FItemHandleInfo::_swing_sound_codename' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _reinforce_table_code_name) == 0x0000A4, "Member 'FItemHandleInfo::_reinforce_table_code_name' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _posture_type) == 0x0000AC, "Member 'FItemHandleInfo::_posture_type' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _style_type) == 0x0000AD, "Member 'FItemHandleInfo::_style_type' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _allow_blade_shape_type) == 0x0000B0, "Member 'FItemHandleInfo::_allow_blade_shape_type' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _combo_type) == 0x0000C0, "Member 'FItemHandleInfo::_combo_type' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _common_action_path_code_name) == 0x0000C8, "Member 'FItemHandleInfo::_common_action_path_code_name' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _locomotion_action_path_code_name) == 0x0000D0, "Member 'FItemHandleInfo::_locomotion_action_path_code_name' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _skill_action_path_code_name) == 0x0000D8, "Member 'FItemHandleInfo::_skill_action_path_code_name' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _action_group_table_code_name) == 0x0000E0, "Member 'FItemHandleInfo::_action_group_table_code_name' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _necessity_motivity) == 0x0000E8, "Member 'FItemHandleInfo::_necessity_motivity' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _necessity_technique) == 0x0000EC, "Member 'FItemHandleInfo::_necessity_technique' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _necessity_advance) == 0x0000F0, "Member 'FItemHandleInfo::_necessity_advance' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _correction_code_name_for_advance) == 0x0000F4, "Member 'FItemHandleInfo::_correction_code_name_for_advance' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _correction_code_name_for_motivity) == 0x0000FC, "Member 'FItemHandleInfo::_correction_code_name_for_motivity' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _correction_code_name_for_technique) == 0x000104, "Member 'FItemHandleInfo::_correction_code_name_for_technique' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _sharpness_fine_point_mod) == 0x00010C, "Member 'FItemHandleInfo::_sharpness_fine_point_mod' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _sharpness_normal_point_mod) == 0x000110, "Member 'FItemHandleInfo::_sharpness_normal_point_mod' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _sharpness_bad_point_mod) == 0x000114, "Member 'FItemHandleInfo::_sharpness_bad_point_mod' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _have_swing_motion) == 0x000118, "Member 'FItemHandleInfo::_have_swing_motion' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _have_thrust_motion) == 0x000119, "Member 'FItemHandleInfo::_have_thrust_motion' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _guard_gain_frenzy_point_passive) == 0x00011C, "Member 'FItemHandleInfo::_guard_gain_frenzy_point_passive' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _perfect_guard_gain_frenzy_point_passive) == 0x000120, "Member 'FItemHandleInfo::_perfect_guard_gain_frenzy_point_passive' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _guard_gain_frenzy_point_active) == 0x000124, "Member 'FItemHandleInfo::_guard_gain_frenzy_point_active' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _perfect_guard_gain_frenzy_point_active) == 0x000128, "Member 'FItemHandleInfo::_perfect_guard_gain_frenzy_point_active' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _perfect_guard_gain_frenzy_point_ratio_furyattack) == 0x00012C, "Member 'FItemHandleInfo::_perfect_guard_gain_frenzy_point_ratio_furyattack' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _original_blade_code_name) == 0x000130, "Member 'FItemHandleInfo::_original_blade_code_name' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _stamina_consume_ratio_min) == 0x000138, "Member 'FItemHandleInfo::_stamina_consume_ratio_min' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _stamina_consume_ratio_max) == 0x00013C, "Member 'FItemHandleInfo::_stamina_consume_ratio_max' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _intro_play_rate_min) == 0x000140, "Member 'FItemHandleInfo::_intro_play_rate_min' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _intro_play_rate_max) == 0x000144, "Member 'FItemHandleInfo::_intro_play_rate_max' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _charge_play_rate_min) == 0x000148, "Member 'FItemHandleInfo::_charge_play_rate_min' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _charge_play_rate_max) == 0x00014C, "Member 'FItemHandleInfo::_charge_play_rate_max' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _swing_play_rate_min) == 0x000150, "Member 'FItemHandleInfo::_swing_play_rate_min' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _swing_play_rate_max) == 0x000154, "Member 'FItemHandleInfo::_swing_play_rate_max' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _delay_play_rate_min) == 0x000158, "Member 'FItemHandleInfo::_delay_play_rate_min' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _delay_play_rate_max) == 0x00015C, "Member 'FItemHandleInfo::_delay_play_rate_max' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _end_play_rate_min) == 0x000160, "Member 'FItemHandleInfo::_end_play_rate_min' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _end_play_rate_max) == 0x000164, "Member 'FItemHandleInfo::_end_play_rate_max' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _rigidity) == 0x000168, "Member 'FItemHandleInfo::_rigidity' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _handle_need_stat_lack_atk_ratio) == 0x00016C, "Member 'FItemHandleInfo::_handle_need_stat_lack_atk_ratio' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _handle_need_stat_lack_guard_save_stamina_ratio) == 0x000170, "Member 'FItemHandleInfo::_handle_need_stat_lack_guard_save_stamina_ratio' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _handle_need_stat_lack_abnormal_state_code_name) == 0x000174, "Member 'FItemHandleInfo::_handle_need_stat_lack_abnormal_state_code_name' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _guard_regain_ratio) == 0x00017C, "Member 'FItemHandleInfo::_guard_regain_ratio' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _guard_intensity) == 0x000180, "Member 'FItemHandleInfo::_guard_intensity' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _heroic_weapon) == 0x000184, "Member 'FItemHandleInfo::_heroic_weapon' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _frenzy_skill_code_name) == 0x000188, "Member 'FItemHandleInfo::_frenzy_skill_code_name' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _guard_parry_counter_skill_code_name) == 0x000190, "Member 'FItemHandleInfo::_guard_parry_counter_skill_code_name' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _preload_skill_list) == 0x000198, "Member 'FItemHandleInfo::_preload_skill_list' has a wrong offset!");
static_assert(offsetof(FItemHandleInfo, _preload_weapon_list) == 0x0001A8, "Member 'FItemHandleInfo::_preload_weapon_list' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ItemBladeInfo
// 0x01D8 (0x0200 - 0x0028)
struct FItemBladeInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_byname;                                // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_byname_cn;                             // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _weapon_bp_code_name;                              // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _weapon_combine_cost;                              // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _weapon_combine_item_code_name;                    // 0x0054(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _weapon_combine_item_count;                        // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _weapon_divide_cost;                               // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _weapon_divide_item_code_name;                     // 0x0064(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _weapon_divide_item_count;                         // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELWeaponShapeType                             _shape_type;                                       // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _guard_duration_ratio;                             // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _blade_weight_code_name;                           // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_point;                                      // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_knockback_distance_reduction_ratio;         // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_damage_reduction_ratio;                     // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _perfect_guard_decrease_enemy_weapon_durability;   // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _attack_speed;                                     // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _destruction_defence;                              // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _destruction_reduce;                               // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _destruction_power;                                // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _perfectguard_destruction_power;                   // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _swing_sound_codename;                             // 0x00A4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _reinforce_table_code_name;                        // 0x00AC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _tough_recovery_delay_time;                        // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPhysicalSurfaceType                         _hit_material;                                     // 0x00B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSwingPowerType                              _hit_fx_level;                                     // 0x00B9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x2];                                       // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _necessity_motivity;                               // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _necessity_technique;                              // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _necessity_advance;                                // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELBladeShapeType                              _blade_shape_type;                                 // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _physical_attack;                                  // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELElementDamageType                           _element_attack_type;                              // 0x00D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _elemental_attack;                                 // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _stiffen_playrate_attacker;                        // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _stiffen_playrate_defender;                        // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_fine_point;                             // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_normal_point;                           // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_bad_point;                              // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_fine_attack_mod;                        // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_normal_attack_mod;                      // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_bad_attack_mod;                         // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_break_attack_mod;                       // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _sharpness_fine_abnormalstate;                     // 0x00FC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _sharpness_normal_abnormalstate;                   // 0x0104(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _sharpness_bad_abnormalstate;                      // 0x010C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _sharpness_break_abnormalstate;                    // 0x0114(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_reduce_value_ratio;                     // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_reduce_value_ratio_on_guard;            // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_repulse_level_fine;                     // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_repulse_level_normal;                   // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_repulse_level_bad;                      // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_repulse_level_break;                    // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_sharpness_defence;                          // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_durability_attack;                          // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPhysicalDamageType                          _physical_subtype_with_swing;                      // 0x013C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPhysicalDamageType                          _physical_subtype_with_thrust;                     // 0x013D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13E[0x2];                                      // 0x013E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _physical_subtype_with_swing_mod;                  // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_subtype_with_thrust_mod;                 // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _attack_gain_frenzy_point_passive;                 // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _attack_gain_frenzy_point_active;                  // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _abnormal_state_codename;                          // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _abnormal_state_build_up_attack;                   // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _rigidity;                                         // 0x015C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _consume_stamina_point;                            // 0x0160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _blade_need_stat_lack_atk_ratio;                   // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _blade_need_stat_lack_destruction_ratio;           // 0x0168(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _blade_need_stat_lack_stamina_ratio;               // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _blade_need_stat_lack_abnormal_state_code_name;    // 0x0170(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _use_blunt_trail;                                  // 0x0178(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _pulse_recharge_attack;                            // 0x017C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_regain_point_max_ratio;                     // 0x0180(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_regain_perfect_guard_heal;                  // 0x0184(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_regain_attack_heal;                         // 0x0188(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _projectile_code_name;                             // 0x018C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELCrashType                                   _crash_type;                                       // 0x0194(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELActionCategory                              _action_category;                                  // 0x0195(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_196[0x2];                                      // 0x0196(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _frenzy_skill_code_name;                           // 0x0198(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _dash_parry_counter_skill_code_name;               // 0x01A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _abnormal_enchant_disable;                         // 0x01A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _abnormal_element_disable;                         // 0x01A9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELBladeFatalType                              _fatal_type;                                       // 0x01AA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AB[0x1];                                      // 0x01AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _critical_rate;                                    // 0x01AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _repair_ratio_per_second;                          // 0x01B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _additional_groggy_time;                           // 0x01B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _fatal_damage_ratio;                               // 0x01B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _require_ergo_count;                               // 0x01BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _consume_ergo_count;                               // 0x01C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _consume_ergo_rate;                                // 0x01C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _ergo_frenzy_skill_code_name;                      // 0x01C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           _preload_skill_list;                               // 0x01D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FName>                           _preload_weapon_list;                              // 0x01E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FName>                           _preload_projectile_list;                          // 0x01F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemBladeInfo) == 0x000008, "Wrong alignment on FItemBladeInfo");
static_assert(sizeof(FItemBladeInfo) == 0x000200, "Wrong size on FItemBladeInfo");
static_assert(offsetof(FItemBladeInfo, _code_name) == 0x000028, "Member 'FItemBladeInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _local_text_byname) == 0x000030, "Member 'FItemBladeInfo::_local_text_byname' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _local_text_byname_cn) == 0x000040, "Member 'FItemBladeInfo::_local_text_byname_cn' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _weapon_bp_code_name) == 0x000048, "Member 'FItemBladeInfo::_weapon_bp_code_name' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _weapon_combine_cost) == 0x000050, "Member 'FItemBladeInfo::_weapon_combine_cost' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _weapon_combine_item_code_name) == 0x000054, "Member 'FItemBladeInfo::_weapon_combine_item_code_name' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _weapon_combine_item_count) == 0x00005C, "Member 'FItemBladeInfo::_weapon_combine_item_count' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _weapon_divide_cost) == 0x000060, "Member 'FItemBladeInfo::_weapon_divide_cost' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _weapon_divide_item_code_name) == 0x000064, "Member 'FItemBladeInfo::_weapon_divide_item_code_name' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _weapon_divide_item_count) == 0x00006C, "Member 'FItemBladeInfo::_weapon_divide_item_count' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _shape_type) == 0x000070, "Member 'FItemBladeInfo::_shape_type' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _guard_duration_ratio) == 0x000074, "Member 'FItemBladeInfo::_guard_duration_ratio' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _blade_weight_code_name) == 0x000078, "Member 'FItemBladeInfo::_blade_weight_code_name' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _guard_point) == 0x000080, "Member 'FItemBladeInfo::_guard_point' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _guard_knockback_distance_reduction_ratio) == 0x000084, "Member 'FItemBladeInfo::_guard_knockback_distance_reduction_ratio' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _guard_damage_reduction_ratio) == 0x000088, "Member 'FItemBladeInfo::_guard_damage_reduction_ratio' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _perfect_guard_decrease_enemy_weapon_durability) == 0x00008C, "Member 'FItemBladeInfo::_perfect_guard_decrease_enemy_weapon_durability' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _attack_speed) == 0x000090, "Member 'FItemBladeInfo::_attack_speed' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _destruction_defence) == 0x000094, "Member 'FItemBladeInfo::_destruction_defence' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _destruction_reduce) == 0x000098, "Member 'FItemBladeInfo::_destruction_reduce' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _destruction_power) == 0x00009C, "Member 'FItemBladeInfo::_destruction_power' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _perfectguard_destruction_power) == 0x0000A0, "Member 'FItemBladeInfo::_perfectguard_destruction_power' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _swing_sound_codename) == 0x0000A4, "Member 'FItemBladeInfo::_swing_sound_codename' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _reinforce_table_code_name) == 0x0000AC, "Member 'FItemBladeInfo::_reinforce_table_code_name' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _tough_recovery_delay_time) == 0x0000B4, "Member 'FItemBladeInfo::_tough_recovery_delay_time' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _hit_material) == 0x0000B8, "Member 'FItemBladeInfo::_hit_material' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _hit_fx_level) == 0x0000B9, "Member 'FItemBladeInfo::_hit_fx_level' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _necessity_motivity) == 0x0000BC, "Member 'FItemBladeInfo::_necessity_motivity' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _necessity_technique) == 0x0000C0, "Member 'FItemBladeInfo::_necessity_technique' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _necessity_advance) == 0x0000C4, "Member 'FItemBladeInfo::_necessity_advance' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _blade_shape_type) == 0x0000C8, "Member 'FItemBladeInfo::_blade_shape_type' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _physical_attack) == 0x0000CC, "Member 'FItemBladeInfo::_physical_attack' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _element_attack_type) == 0x0000D0, "Member 'FItemBladeInfo::_element_attack_type' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _elemental_attack) == 0x0000D4, "Member 'FItemBladeInfo::_elemental_attack' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _stiffen_playrate_attacker) == 0x0000D8, "Member 'FItemBladeInfo::_stiffen_playrate_attacker' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _stiffen_playrate_defender) == 0x0000DC, "Member 'FItemBladeInfo::_stiffen_playrate_defender' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _sharpness_fine_point) == 0x0000E0, "Member 'FItemBladeInfo::_sharpness_fine_point' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _sharpness_normal_point) == 0x0000E4, "Member 'FItemBladeInfo::_sharpness_normal_point' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _sharpness_bad_point) == 0x0000E8, "Member 'FItemBladeInfo::_sharpness_bad_point' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _sharpness_fine_attack_mod) == 0x0000EC, "Member 'FItemBladeInfo::_sharpness_fine_attack_mod' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _sharpness_normal_attack_mod) == 0x0000F0, "Member 'FItemBladeInfo::_sharpness_normal_attack_mod' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _sharpness_bad_attack_mod) == 0x0000F4, "Member 'FItemBladeInfo::_sharpness_bad_attack_mod' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _sharpness_break_attack_mod) == 0x0000F8, "Member 'FItemBladeInfo::_sharpness_break_attack_mod' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _sharpness_fine_abnormalstate) == 0x0000FC, "Member 'FItemBladeInfo::_sharpness_fine_abnormalstate' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _sharpness_normal_abnormalstate) == 0x000104, "Member 'FItemBladeInfo::_sharpness_normal_abnormalstate' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _sharpness_bad_abnormalstate) == 0x00010C, "Member 'FItemBladeInfo::_sharpness_bad_abnormalstate' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _sharpness_break_abnormalstate) == 0x000114, "Member 'FItemBladeInfo::_sharpness_break_abnormalstate' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _sharpness_reduce_value_ratio) == 0x00011C, "Member 'FItemBladeInfo::_sharpness_reduce_value_ratio' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _sharpness_reduce_value_ratio_on_guard) == 0x000120, "Member 'FItemBladeInfo::_sharpness_reduce_value_ratio_on_guard' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _sharpness_repulse_level_fine) == 0x000124, "Member 'FItemBladeInfo::_sharpness_repulse_level_fine' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _sharpness_repulse_level_normal) == 0x000128, "Member 'FItemBladeInfo::_sharpness_repulse_level_normal' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _sharpness_repulse_level_bad) == 0x00012C, "Member 'FItemBladeInfo::_sharpness_repulse_level_bad' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _sharpness_repulse_level_break) == 0x000130, "Member 'FItemBladeInfo::_sharpness_repulse_level_break' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _guard_sharpness_defence) == 0x000134, "Member 'FItemBladeInfo::_guard_sharpness_defence' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _guard_durability_attack) == 0x000138, "Member 'FItemBladeInfo::_guard_durability_attack' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _physical_subtype_with_swing) == 0x00013C, "Member 'FItemBladeInfo::_physical_subtype_with_swing' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _physical_subtype_with_thrust) == 0x00013D, "Member 'FItemBladeInfo::_physical_subtype_with_thrust' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _physical_subtype_with_swing_mod) == 0x000140, "Member 'FItemBladeInfo::_physical_subtype_with_swing_mod' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _physical_subtype_with_thrust_mod) == 0x000144, "Member 'FItemBladeInfo::_physical_subtype_with_thrust_mod' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _attack_gain_frenzy_point_passive) == 0x000148, "Member 'FItemBladeInfo::_attack_gain_frenzy_point_passive' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _attack_gain_frenzy_point_active) == 0x00014C, "Member 'FItemBladeInfo::_attack_gain_frenzy_point_active' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _abnormal_state_codename) == 0x000150, "Member 'FItemBladeInfo::_abnormal_state_codename' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _abnormal_state_build_up_attack) == 0x000158, "Member 'FItemBladeInfo::_abnormal_state_build_up_attack' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _rigidity) == 0x00015C, "Member 'FItemBladeInfo::_rigidity' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _consume_stamina_point) == 0x000160, "Member 'FItemBladeInfo::_consume_stamina_point' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _blade_need_stat_lack_atk_ratio) == 0x000164, "Member 'FItemBladeInfo::_blade_need_stat_lack_atk_ratio' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _blade_need_stat_lack_destruction_ratio) == 0x000168, "Member 'FItemBladeInfo::_blade_need_stat_lack_destruction_ratio' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _blade_need_stat_lack_stamina_ratio) == 0x00016C, "Member 'FItemBladeInfo::_blade_need_stat_lack_stamina_ratio' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _blade_need_stat_lack_abnormal_state_code_name) == 0x000170, "Member 'FItemBladeInfo::_blade_need_stat_lack_abnormal_state_code_name' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _use_blunt_trail) == 0x000178, "Member 'FItemBladeInfo::_use_blunt_trail' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _pulse_recharge_attack) == 0x00017C, "Member 'FItemBladeInfo::_pulse_recharge_attack' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _guard_regain_point_max_ratio) == 0x000180, "Member 'FItemBladeInfo::_guard_regain_point_max_ratio' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _guard_regain_perfect_guard_heal) == 0x000184, "Member 'FItemBladeInfo::_guard_regain_perfect_guard_heal' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _guard_regain_attack_heal) == 0x000188, "Member 'FItemBladeInfo::_guard_regain_attack_heal' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _projectile_code_name) == 0x00018C, "Member 'FItemBladeInfo::_projectile_code_name' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _crash_type) == 0x000194, "Member 'FItemBladeInfo::_crash_type' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _action_category) == 0x000195, "Member 'FItemBladeInfo::_action_category' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _frenzy_skill_code_name) == 0x000198, "Member 'FItemBladeInfo::_frenzy_skill_code_name' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _dash_parry_counter_skill_code_name) == 0x0001A0, "Member 'FItemBladeInfo::_dash_parry_counter_skill_code_name' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _abnormal_enchant_disable) == 0x0001A8, "Member 'FItemBladeInfo::_abnormal_enchant_disable' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _abnormal_element_disable) == 0x0001A9, "Member 'FItemBladeInfo::_abnormal_element_disable' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _fatal_type) == 0x0001AA, "Member 'FItemBladeInfo::_fatal_type' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _critical_rate) == 0x0001AC, "Member 'FItemBladeInfo::_critical_rate' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _repair_ratio_per_second) == 0x0001B0, "Member 'FItemBladeInfo::_repair_ratio_per_second' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _additional_groggy_time) == 0x0001B4, "Member 'FItemBladeInfo::_additional_groggy_time' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _fatal_damage_ratio) == 0x0001B8, "Member 'FItemBladeInfo::_fatal_damage_ratio' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _require_ergo_count) == 0x0001BC, "Member 'FItemBladeInfo::_require_ergo_count' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _consume_ergo_count) == 0x0001C0, "Member 'FItemBladeInfo::_consume_ergo_count' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _consume_ergo_rate) == 0x0001C4, "Member 'FItemBladeInfo::_consume_ergo_rate' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _ergo_frenzy_skill_code_name) == 0x0001C8, "Member 'FItemBladeInfo::_ergo_frenzy_skill_code_name' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _preload_skill_list) == 0x0001D0, "Member 'FItemBladeInfo::_preload_skill_list' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _preload_weapon_list) == 0x0001E0, "Member 'FItemBladeInfo::_preload_weapon_list' has a wrong offset!");
static_assert(offsetof(FItemBladeInfo, _preload_projectile_list) == 0x0001F0, "Member 'FItemBladeInfo::_preload_projectile_list' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.HandleStatCorrectionChangeInfo
// 0x0048 (0x0070 - 0x0028)
struct FHandleStatCorrectionChangeInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _motivity_grade_change;                            // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _technique_grade_change;                           // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _advance_grade_change;                             // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELStatCorrectChangeType                       _upgrade_stat;                                     // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _key_item_codename;                                // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _key_item_codename_hero;                           // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _key_item_num_clear;                               // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _require_ergo;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _require_ergo_hero;                                // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _key_item_num_A_to_S;                              // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _key_item_num_B_to_A;                              // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _key_item_num_C_to_B;                              // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _key_item_num_D_to_C;                              // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _key_item_num_None_to_D;                           // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHandleStatCorrectionChangeInfo) == 0x000008, "Wrong alignment on FHandleStatCorrectionChangeInfo");
static_assert(sizeof(FHandleStatCorrectionChangeInfo) == 0x000070, "Wrong size on FHandleStatCorrectionChangeInfo");
static_assert(offsetof(FHandleStatCorrectionChangeInfo, _code_name) == 0x000028, "Member 'FHandleStatCorrectionChangeInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FHandleStatCorrectionChangeInfo, _motivity_grade_change) == 0x000030, "Member 'FHandleStatCorrectionChangeInfo::_motivity_grade_change' has a wrong offset!");
static_assert(offsetof(FHandleStatCorrectionChangeInfo, _technique_grade_change) == 0x000034, "Member 'FHandleStatCorrectionChangeInfo::_technique_grade_change' has a wrong offset!");
static_assert(offsetof(FHandleStatCorrectionChangeInfo, _advance_grade_change) == 0x000038, "Member 'FHandleStatCorrectionChangeInfo::_advance_grade_change' has a wrong offset!");
static_assert(offsetof(FHandleStatCorrectionChangeInfo, _upgrade_stat) == 0x00003C, "Member 'FHandleStatCorrectionChangeInfo::_upgrade_stat' has a wrong offset!");
static_assert(offsetof(FHandleStatCorrectionChangeInfo, _key_item_codename) == 0x000040, "Member 'FHandleStatCorrectionChangeInfo::_key_item_codename' has a wrong offset!");
static_assert(offsetof(FHandleStatCorrectionChangeInfo, _key_item_codename_hero) == 0x000048, "Member 'FHandleStatCorrectionChangeInfo::_key_item_codename_hero' has a wrong offset!");
static_assert(offsetof(FHandleStatCorrectionChangeInfo, _key_item_num_clear) == 0x000050, "Member 'FHandleStatCorrectionChangeInfo::_key_item_num_clear' has a wrong offset!");
static_assert(offsetof(FHandleStatCorrectionChangeInfo, _require_ergo) == 0x000054, "Member 'FHandleStatCorrectionChangeInfo::_require_ergo' has a wrong offset!");
static_assert(offsetof(FHandleStatCorrectionChangeInfo, _require_ergo_hero) == 0x000058, "Member 'FHandleStatCorrectionChangeInfo::_require_ergo_hero' has a wrong offset!");
static_assert(offsetof(FHandleStatCorrectionChangeInfo, _key_item_num_A_to_S) == 0x00005C, "Member 'FHandleStatCorrectionChangeInfo::_key_item_num_A_to_S' has a wrong offset!");
static_assert(offsetof(FHandleStatCorrectionChangeInfo, _key_item_num_B_to_A) == 0x000060, "Member 'FHandleStatCorrectionChangeInfo::_key_item_num_B_to_A' has a wrong offset!");
static_assert(offsetof(FHandleStatCorrectionChangeInfo, _key_item_num_C_to_B) == 0x000064, "Member 'FHandleStatCorrectionChangeInfo::_key_item_num_C_to_B' has a wrong offset!");
static_assert(offsetof(FHandleStatCorrectionChangeInfo, _key_item_num_D_to_C) == 0x000068, "Member 'FHandleStatCorrectionChangeInfo::_key_item_num_D_to_C' has a wrong offset!");
static_assert(offsetof(FHandleStatCorrectionChangeInfo, _key_item_num_None_to_D) == 0x00006C, "Member 'FHandleStatCorrectionChangeInfo::_key_item_num_None_to_D' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.SlavearmAlterItemMatchInfo
// 0x0048 (0x0070 - 0x0028)
struct FSlavearmAlterItemMatchInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _slavearm_codename;                                // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _alter_consume_item_codename;                      // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _alter_action;                                     // 0x0040(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _require_magazine;                                 // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSlavearmAlterItemMatchInfo) == 0x000008, "Wrong alignment on FSlavearmAlterItemMatchInfo");
static_assert(sizeof(FSlavearmAlterItemMatchInfo) == 0x000070, "Wrong size on FSlavearmAlterItemMatchInfo");
static_assert(offsetof(FSlavearmAlterItemMatchInfo, _code_name) == 0x000028, "Member 'FSlavearmAlterItemMatchInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FSlavearmAlterItemMatchInfo, _slavearm_codename) == 0x000030, "Member 'FSlavearmAlterItemMatchInfo::_slavearm_codename' has a wrong offset!");
static_assert(offsetof(FSlavearmAlterItemMatchInfo, _alter_consume_item_codename) == 0x000038, "Member 'FSlavearmAlterItemMatchInfo::_alter_consume_item_codename' has a wrong offset!");
static_assert(offsetof(FSlavearmAlterItemMatchInfo, _alter_action) == 0x000040, "Member 'FSlavearmAlterItemMatchInfo::_alter_action' has a wrong offset!");
static_assert(offsetof(FSlavearmAlterItemMatchInfo, _require_magazine) == 0x000068, "Member 'FSlavearmAlterItemMatchInfo::_require_magazine' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ItemRedundancyExchangeInfo
// 0x0010 (0x0038 - 0x0028)
struct FItemRedundancyExchangeInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _code_name_exchange;                               // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemRedundancyExchangeInfo) == 0x000008, "Wrong alignment on FItemRedundancyExchangeInfo");
static_assert(sizeof(FItemRedundancyExchangeInfo) == 0x000038, "Wrong size on FItemRedundancyExchangeInfo");
static_assert(offsetof(FItemRedundancyExchangeInfo, _code_name) == 0x000028, "Member 'FItemRedundancyExchangeInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FItemRedundancyExchangeInfo, _code_name_exchange) == 0x000030, "Member 'FItemRedundancyExchangeInfo::_code_name_exchange' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ItemInfoDB
// 0x0518 (0x0540 - 0x0028)
struct FItemInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FItemCommonInfo>                _ItemCommon_array;                                 // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x50];                                      // 0x0088(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FItemCostumeInfo>               _ItemCostume_array;                                // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x50];                                      // 0x00E8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCorrectionWeaponFirstStatInfo> _CorrectionWeaponFirstStat_array;                  // 0x0138(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_148[0x50];                                     // 0x0148(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FItemPartsInfo>                 _ItemParts_array;                                  // 0x0198(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8[0x50];                                     // 0x01A8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FItemCollectionInfo>            _ItemCollection_array;                             // 0x01F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_208[0x50];                                     // 0x0208(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FItemConsumeInfo>               _ItemConsume_array;                                // 0x0258(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_268[0x50];                                     // 0x0268(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBladeWeightInfo>               _BladeWeight_array;                                // 0x02B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C8[0x50];                                     // 0x02C8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FItemWeaponMonster>             _ItemWeaponMonster_array;                          // 0x0318(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_328[0x50];                                     // 0x0328(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FItemSlaveArmInfo>              _ItemSlaveArm_array;                               // 0x0378(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_388[0x50];                                     // 0x0388(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FItemHandleInfo>                _ItemHandle_array;                                 // 0x03D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E8[0x50];                                     // 0x03E8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FItemBladeInfo>                 _ItemBlade_array;                                  // 0x0438(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FItemWeaponReinforceInfo>       _ItemWeaponReinforce_array;                        // 0x0448(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_458[0x50];                                     // 0x0458(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHandleStatCorrectionChangeInfo> _HandleStatCorrectionChange_array;                 // 0x04A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSlavearmAlterItemMatchInfo>    _SlavearmAlterItemMatch_array;                     // 0x04B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C8[0x50];                                     // 0x04C8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FItemRedundancyExchangeInfo>    _ItemRedundancyExchange_array;                     // 0x0518(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0528(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52C[0x4];                                      // 0x052C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0530(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemInfoDB) == 0x000008, "Wrong alignment on FItemInfoDB");
static_assert(sizeof(FItemInfoDB) == 0x000540, "Wrong size on FItemInfoDB");
static_assert(offsetof(FItemInfoDB, _ItemCommon_array) == 0x000078, "Member 'FItemInfoDB::_ItemCommon_array' has a wrong offset!");
static_assert(offsetof(FItemInfoDB, _ItemCostume_array) == 0x0000D8, "Member 'FItemInfoDB::_ItemCostume_array' has a wrong offset!");
static_assert(offsetof(FItemInfoDB, _CorrectionWeaponFirstStat_array) == 0x000138, "Member 'FItemInfoDB::_CorrectionWeaponFirstStat_array' has a wrong offset!");
static_assert(offsetof(FItemInfoDB, _ItemParts_array) == 0x000198, "Member 'FItemInfoDB::_ItemParts_array' has a wrong offset!");
static_assert(offsetof(FItemInfoDB, _ItemCollection_array) == 0x0001F8, "Member 'FItemInfoDB::_ItemCollection_array' has a wrong offset!");
static_assert(offsetof(FItemInfoDB, _ItemConsume_array) == 0x000258, "Member 'FItemInfoDB::_ItemConsume_array' has a wrong offset!");
static_assert(offsetof(FItemInfoDB, _BladeWeight_array) == 0x0002B8, "Member 'FItemInfoDB::_BladeWeight_array' has a wrong offset!");
static_assert(offsetof(FItemInfoDB, _ItemWeaponMonster_array) == 0x000318, "Member 'FItemInfoDB::_ItemWeaponMonster_array' has a wrong offset!");
static_assert(offsetof(FItemInfoDB, _ItemSlaveArm_array) == 0x000378, "Member 'FItemInfoDB::_ItemSlaveArm_array' has a wrong offset!");
static_assert(offsetof(FItemInfoDB, _ItemHandle_array) == 0x0003D8, "Member 'FItemInfoDB::_ItemHandle_array' has a wrong offset!");
static_assert(offsetof(FItemInfoDB, _ItemBlade_array) == 0x000438, "Member 'FItemInfoDB::_ItemBlade_array' has a wrong offset!");
static_assert(offsetof(FItemInfoDB, _ItemWeaponReinforce_array) == 0x000448, "Member 'FItemInfoDB::_ItemWeaponReinforce_array' has a wrong offset!");
static_assert(offsetof(FItemInfoDB, _HandleStatCorrectionChange_array) == 0x0004A8, "Member 'FItemInfoDB::_HandleStatCorrectionChange_array' has a wrong offset!");
static_assert(offsetof(FItemInfoDB, _SlavearmAlterItemMatch_array) == 0x0004B8, "Member 'FItemInfoDB::_SlavearmAlterItemMatch_array' has a wrong offset!");
static_assert(offsetof(FItemInfoDB, _ItemRedundancyExchange_array) == 0x000518, "Member 'FItemInfoDB::_ItemRedundancyExchange_array' has a wrong offset!");
static_assert(offsetof(FItemInfoDB, _version) == 0x000528, "Member 'FItemInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FItemInfoDB, _comment) == 0x000530, "Member 'FItemInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.SlavearmAlterItemMatchInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSlavearmAlterItemMatchInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSlavearmAlterItemMatchInfoPtr) == 0x000008, "Wrong alignment on FSlavearmAlterItemMatchInfoPtr");
static_assert(sizeof(FSlavearmAlterItemMatchInfoPtr) == 0x000008, "Wrong size on FSlavearmAlterItemMatchInfoPtr");

// ScriptStruct ProjectPContentInfo.ItemWeaponReinforceInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FItemWeaponReinforceInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemWeaponReinforceInfoPtr) == 0x000008, "Wrong alignment on FItemWeaponReinforceInfoPtr");
static_assert(sizeof(FItemWeaponReinforceInfoPtr) == 0x000008, "Wrong size on FItemWeaponReinforceInfoPtr");

// ScriptStruct ProjectPContentInfo.ItemHandleInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FItemHandleInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemHandleInfoPtr) == 0x000008, "Wrong alignment on FItemHandleInfoPtr");
static_assert(sizeof(FItemHandleInfoPtr) == 0x000008, "Wrong size on FItemHandleInfoPtr");

// ScriptStruct ProjectPContentInfo.ItemSlaveArmInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FItemSlaveArmInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemSlaveArmInfoPtr) == 0x000008, "Wrong alignment on FItemSlaveArmInfoPtr");
static_assert(sizeof(FItemSlaveArmInfoPtr) == 0x000008, "Wrong size on FItemSlaveArmInfoPtr");

// ScriptStruct ProjectPContentInfo.ItemWeaponMonsterPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FItemWeaponMonsterPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemWeaponMonsterPtr) == 0x000008, "Wrong alignment on FItemWeaponMonsterPtr");
static_assert(sizeof(FItemWeaponMonsterPtr) == 0x000008, "Wrong size on FItemWeaponMonsterPtr");

// ScriptStruct ProjectPContentInfo.BladeWeightInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FBladeWeightInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBladeWeightInfoPtr) == 0x000008, "Wrong alignment on FBladeWeightInfoPtr");
static_assert(sizeof(FBladeWeightInfoPtr) == 0x000008, "Wrong size on FBladeWeightInfoPtr");

// ScriptStruct ProjectPContentInfo.ItemConsumeInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FItemConsumeInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemConsumeInfoPtr) == 0x000008, "Wrong alignment on FItemConsumeInfoPtr");
static_assert(sizeof(FItemConsumeInfoPtr) == 0x000008, "Wrong size on FItemConsumeInfoPtr");

// ScriptStruct ProjectPContentInfo.ItemPartsInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FItemPartsInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemPartsInfoPtr) == 0x000008, "Wrong alignment on FItemPartsInfoPtr");
static_assert(sizeof(FItemPartsInfoPtr) == 0x000008, "Wrong size on FItemPartsInfoPtr");

// ScriptStruct ProjectPContentInfo.ItemCostumeInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FItemCostumeInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemCostumeInfoPtr) == 0x000008, "Wrong alignment on FItemCostumeInfoPtr");
static_assert(sizeof(FItemCostumeInfoPtr) == 0x000008, "Wrong size on FItemCostumeInfoPtr");

// ScriptStruct ProjectPContentInfo.ItemPackageInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FItemPackageInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FItemPackageInfo>               _ItemPackage_array;                                // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemPackageInfoDB) == 0x000008, "Wrong alignment on FItemPackageInfoDB");
static_assert(sizeof(FItemPackageInfoDB) == 0x0000A0, "Wrong size on FItemPackageInfoDB");
static_assert(offsetof(FItemPackageInfoDB, _ItemPackage_array) == 0x000078, "Member 'FItemPackageInfoDB::_ItemPackage_array' has a wrong offset!");
static_assert(offsetof(FItemPackageInfoDB, _version) == 0x000088, "Member 'FItemPackageInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FItemPackageInfoDB, _comment) == 0x000090, "Member 'FItemPackageInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ItemPackageInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FItemPackageInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemPackageInfoPtr) == 0x000008, "Wrong alignment on FItemPackageInfoPtr");
static_assert(sizeof(FItemPackageInfoPtr) == 0x000008, "Wrong size on FItemPackageInfoPtr");

// ScriptStruct ProjectPContentInfo.LoadingScreenInfo
// 0x0050 (0x0078 - 0x0028)
struct FLoadingScreenInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _image_code_name;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _condition_quest;                                  // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELConditionLoadingType                        _condition_loading_type;                           // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _condition_next_chapter;                           // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _first_draw_priority;                              // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           _first_draw_chain_tip;                             // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	bool                                          _reset_condition_new_game_plus;                    // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLoadingScreenInfo) == 0x000008, "Wrong alignment on FLoadingScreenInfo");
static_assert(sizeof(FLoadingScreenInfo) == 0x000078, "Wrong size on FLoadingScreenInfo");
static_assert(offsetof(FLoadingScreenInfo, _code_name) == 0x000028, "Member 'FLoadingScreenInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FLoadingScreenInfo, _image_code_name) == 0x000030, "Member 'FLoadingScreenInfo::_image_code_name' has a wrong offset!");
static_assert(offsetof(FLoadingScreenInfo, _condition_quest) == 0x000038, "Member 'FLoadingScreenInfo::_condition_quest' has a wrong offset!");
static_assert(offsetof(FLoadingScreenInfo, _condition_loading_type) == 0x000040, "Member 'FLoadingScreenInfo::_condition_loading_type' has a wrong offset!");
static_assert(offsetof(FLoadingScreenInfo, _condition_next_chapter) == 0x000048, "Member 'FLoadingScreenInfo::_condition_next_chapter' has a wrong offset!");
static_assert(offsetof(FLoadingScreenInfo, _first_draw_priority) == 0x000058, "Member 'FLoadingScreenInfo::_first_draw_priority' has a wrong offset!");
static_assert(offsetof(FLoadingScreenInfo, _first_draw_chain_tip) == 0x000060, "Member 'FLoadingScreenInfo::_first_draw_chain_tip' has a wrong offset!");
static_assert(offsetof(FLoadingScreenInfo, _reset_condition_new_game_plus) == 0x000070, "Member 'FLoadingScreenInfo::_reset_condition_new_game_plus' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.LoadingScreenInfoDB
// 0x00D8 (0x0100 - 0x0028)
struct FLoadingScreenInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLoadingScreenInfo>             _LoadingScreenInfo_array;                          // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x50];                                      // 0x0088(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLoadingTipInfo>                _LoadingTipInfo_array;                             // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoadingScreenInfoDB) == 0x000008, "Wrong alignment on FLoadingScreenInfoDB");
static_assert(sizeof(FLoadingScreenInfoDB) == 0x000100, "Wrong size on FLoadingScreenInfoDB");
static_assert(offsetof(FLoadingScreenInfoDB, _LoadingScreenInfo_array) == 0x000078, "Member 'FLoadingScreenInfoDB::_LoadingScreenInfo_array' has a wrong offset!");
static_assert(offsetof(FLoadingScreenInfoDB, _LoadingTipInfo_array) == 0x0000D8, "Member 'FLoadingScreenInfoDB::_LoadingTipInfo_array' has a wrong offset!");
static_assert(offsetof(FLoadingScreenInfoDB, _version) == 0x0000E8, "Member 'FLoadingScreenInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FLoadingScreenInfoDB, _comment) == 0x0000F0, "Member 'FLoadingScreenInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.LoadingTipInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FLoadingTipInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLoadingTipInfoPtr) == 0x000008, "Wrong alignment on FLoadingTipInfoPtr");
static_assert(sizeof(FLoadingTipInfoPtr) == 0x000008, "Wrong size on FLoadingTipInfoPtr");

// ScriptStruct ProjectPContentInfo.LoadingScreenInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FLoadingScreenInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLoadingScreenInfoPtr) == 0x000008, "Wrong alignment on FLoadingScreenInfoPtr");
static_assert(sizeof(FLoadingScreenInfoPtr) == 0x000008, "Wrong size on FLoadingScreenInfoPtr");

// ScriptStruct ProjectPContentInfo.LocalDataInfo
// 0x00C8 (0x00F0 - 0x0028)
struct FLocalDataInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _korean;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _english;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _japanese;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _french;                                           // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _chinese_simplified;                               // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _chinese_traditional;                              // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _german;                                           // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _italian;                                          // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _russian;                                          // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _portuguese;                                       // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _polish;                                           // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _spanish;                                          // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocalDataInfo) == 0x000008, "Wrong alignment on FLocalDataInfo");
static_assert(sizeof(FLocalDataInfo) == 0x0000F0, "Wrong size on FLocalDataInfo");
static_assert(offsetof(FLocalDataInfo, _code_name) == 0x000028, "Member 'FLocalDataInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FLocalDataInfo, _korean) == 0x000030, "Member 'FLocalDataInfo::_korean' has a wrong offset!");
static_assert(offsetof(FLocalDataInfo, _english) == 0x000040, "Member 'FLocalDataInfo::_english' has a wrong offset!");
static_assert(offsetof(FLocalDataInfo, _japanese) == 0x000050, "Member 'FLocalDataInfo::_japanese' has a wrong offset!");
static_assert(offsetof(FLocalDataInfo, _french) == 0x000060, "Member 'FLocalDataInfo::_french' has a wrong offset!");
static_assert(offsetof(FLocalDataInfo, _chinese_simplified) == 0x000070, "Member 'FLocalDataInfo::_chinese_simplified' has a wrong offset!");
static_assert(offsetof(FLocalDataInfo, _chinese_traditional) == 0x000080, "Member 'FLocalDataInfo::_chinese_traditional' has a wrong offset!");
static_assert(offsetof(FLocalDataInfo, _german) == 0x000090, "Member 'FLocalDataInfo::_german' has a wrong offset!");
static_assert(offsetof(FLocalDataInfo, _italian) == 0x0000A0, "Member 'FLocalDataInfo::_italian' has a wrong offset!");
static_assert(offsetof(FLocalDataInfo, _russian) == 0x0000B0, "Member 'FLocalDataInfo::_russian' has a wrong offset!");
static_assert(offsetof(FLocalDataInfo, _portuguese) == 0x0000C0, "Member 'FLocalDataInfo::_portuguese' has a wrong offset!");
static_assert(offsetof(FLocalDataInfo, _polish) == 0x0000D0, "Member 'FLocalDataInfo::_polish' has a wrong offset!");
static_assert(offsetof(FLocalDataInfo, _spanish) == 0x0000E0, "Member 'FLocalDataInfo::_spanish' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.LocalDataInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FLocalDataInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLocalDataInfo>                 _LocalDataInfo_array;                              // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocalDataInfoDB) == 0x000008, "Wrong alignment on FLocalDataInfoDB");
static_assert(sizeof(FLocalDataInfoDB) == 0x0000A0, "Wrong size on FLocalDataInfoDB");
static_assert(offsetof(FLocalDataInfoDB, _LocalDataInfo_array) == 0x000078, "Member 'FLocalDataInfoDB::_LocalDataInfo_array' has a wrong offset!");
static_assert(offsetof(FLocalDataInfoDB, _version) == 0x000088, "Member 'FLocalDataInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FLocalDataInfoDB, _comment) == 0x000090, "Member 'FLocalDataInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.LocalDataInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FLocalDataInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLocalDataInfoPtr) == 0x000008, "Wrong alignment on FLocalDataInfoPtr");
static_assert(sizeof(FLocalDataInfoPtr) == 0x000008, "Wrong size on FLocalDataInfoPtr");

// ScriptStruct ProjectPContentInfo.LocationInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FLocationInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLocationInfo>                  _Location_array;                                   // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocationInfoDB) == 0x000008, "Wrong alignment on FLocationInfoDB");
static_assert(sizeof(FLocationInfoDB) == 0x0000A0, "Wrong size on FLocationInfoDB");
static_assert(offsetof(FLocationInfoDB, _Location_array) == 0x000078, "Member 'FLocationInfoDB::_Location_array' has a wrong offset!");
static_assert(offsetof(FLocationInfoDB, _version) == 0x000088, "Member 'FLocationInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FLocationInfoDB, _comment) == 0x000090, "Member 'FLocationInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.LocationInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FLocationInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLocationInfoPtr) == 0x000008, "Wrong alignment on FLocationInfoPtr");
static_assert(sizeof(FLocationInfoPtr) == 0x000008, "Wrong size on FLocationInfoPtr");

// ScriptStruct ProjectPContentInfo.NPCLocomotionListInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FNPCLocomotionListInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNPCLocomotionListInfoPtr) == 0x000008, "Wrong alignment on FNPCLocomotionListInfoPtr");
static_assert(sizeof(FNPCLocomotionListInfoPtr) == 0x000008, "Wrong size on FNPCLocomotionListInfoPtr");

// ScriptStruct ProjectPContentInfo.MomentConditionInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FMomentConditionInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FMomentConditionInfo>           _MomentCondition_array;                            // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMomentConditionInfoDB) == 0x000008, "Wrong alignment on FMomentConditionInfoDB");
static_assert(sizeof(FMomentConditionInfoDB) == 0x000050, "Wrong size on FMomentConditionInfoDB");
static_assert(offsetof(FMomentConditionInfoDB, _MomentCondition_array) == 0x000028, "Member 'FMomentConditionInfoDB::_MomentCondition_array' has a wrong offset!");
static_assert(offsetof(FMomentConditionInfoDB, _version) == 0x000038, "Member 'FMomentConditionInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FMomentConditionInfoDB, _comment) == 0x000040, "Member 'FMomentConditionInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.MomentConditionInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FMomentConditionInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMomentConditionInfoPtr) == 0x000008, "Wrong alignment on FMomentConditionInfoPtr");
static_assert(sizeof(FMomentConditionInfoPtr) == 0x000008, "Wrong size on FMomentConditionInfoPtr");

// ScriptStruct ProjectPContentInfo.MovieResourceInfo
// 0x0040 (0x0068 - 0x0028)
struct FMovieResourceInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _movie_resource;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _movie_resource_fhd;                               // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _after_command_exec;                               // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _lock_player_action;                               // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _hide_hud;                                         // 0x0059(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _show_hud;                                         // 0x005A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ui_fadeout;                                       // 0x005B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _game_process_pause;                               // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _no_skip;                                          // 0x005D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _can_save;                                         // 0x005E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _pause_on_reached_end;                             // 0x005F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _subtitle_code_name;                               // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieResourceInfo) == 0x000008, "Wrong alignment on FMovieResourceInfo");
static_assert(sizeof(FMovieResourceInfo) == 0x000068, "Wrong size on FMovieResourceInfo");
static_assert(offsetof(FMovieResourceInfo, _code_name) == 0x000028, "Member 'FMovieResourceInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FMovieResourceInfo, _movie_resource) == 0x000030, "Member 'FMovieResourceInfo::_movie_resource' has a wrong offset!");
static_assert(offsetof(FMovieResourceInfo, _movie_resource_fhd) == 0x000040, "Member 'FMovieResourceInfo::_movie_resource_fhd' has a wrong offset!");
static_assert(offsetof(FMovieResourceInfo, _after_command_exec) == 0x000050, "Member 'FMovieResourceInfo::_after_command_exec' has a wrong offset!");
static_assert(offsetof(FMovieResourceInfo, _lock_player_action) == 0x000058, "Member 'FMovieResourceInfo::_lock_player_action' has a wrong offset!");
static_assert(offsetof(FMovieResourceInfo, _hide_hud) == 0x000059, "Member 'FMovieResourceInfo::_hide_hud' has a wrong offset!");
static_assert(offsetof(FMovieResourceInfo, _show_hud) == 0x00005A, "Member 'FMovieResourceInfo::_show_hud' has a wrong offset!");
static_assert(offsetof(FMovieResourceInfo, _ui_fadeout) == 0x00005B, "Member 'FMovieResourceInfo::_ui_fadeout' has a wrong offset!");
static_assert(offsetof(FMovieResourceInfo, _game_process_pause) == 0x00005C, "Member 'FMovieResourceInfo::_game_process_pause' has a wrong offset!");
static_assert(offsetof(FMovieResourceInfo, _no_skip) == 0x00005D, "Member 'FMovieResourceInfo::_no_skip' has a wrong offset!");
static_assert(offsetof(FMovieResourceInfo, _can_save) == 0x00005E, "Member 'FMovieResourceInfo::_can_save' has a wrong offset!");
static_assert(offsetof(FMovieResourceInfo, _pause_on_reached_end) == 0x00005F, "Member 'FMovieResourceInfo::_pause_on_reached_end' has a wrong offset!");
static_assert(offsetof(FMovieResourceInfo, _subtitle_code_name) == 0x000060, "Member 'FMovieResourceInfo::_subtitle_code_name' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.MovieResourceInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FMovieResourceInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMovieResourceInfo>             _MovieResource_array;                              // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieResourceInfoDB) == 0x000008, "Wrong alignment on FMovieResourceInfoDB");
static_assert(sizeof(FMovieResourceInfoDB) == 0x0000A0, "Wrong size on FMovieResourceInfoDB");
static_assert(offsetof(FMovieResourceInfoDB, _MovieResource_array) == 0x000078, "Member 'FMovieResourceInfoDB::_MovieResource_array' has a wrong offset!");
static_assert(offsetof(FMovieResourceInfoDB, _version) == 0x000088, "Member 'FMovieResourceInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FMovieResourceInfoDB, _comment) == 0x000090, "Member 'FMovieResourceInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.NGPKeepConfigInfo
// 0x0078 (0x00A0 - 0x0028)
struct FNGPKeepConfigInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ELItemFirstCategory>                   _keep_item_by_itemFirstCategory;                   // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FString>                         _keep_NPC_Spot_list;                               // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FString>                         _keep_Prop_Spot_list;                              // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FString>                         _keep_item_Spot_list;                              // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FName>                           _keep_quest;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FName>                           _keep_special_buff_list;                           // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	bool                                          _keep_ergo;                                        // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _keep_level_and_stat;                              // 0x0091(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _keep_P_Ogan_Quartz;                               // 0x0092(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _keep_P_Ogan_OpenLevel;                            // 0x0093(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _keep_appearance;                                  // 0x0094(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _keep_tutorial_record;                             // 0x0095(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_96[0x2];                                       // 0x0096(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _NewGame_Exec_Common_code_name;                    // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNGPKeepConfigInfo) == 0x000008, "Wrong alignment on FNGPKeepConfigInfo");
static_assert(sizeof(FNGPKeepConfigInfo) == 0x0000A0, "Wrong size on FNGPKeepConfigInfo");
static_assert(offsetof(FNGPKeepConfigInfo, _code_name) == 0x000028, "Member 'FNGPKeepConfigInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FNGPKeepConfigInfo, _keep_item_by_itemFirstCategory) == 0x000030, "Member 'FNGPKeepConfigInfo::_keep_item_by_itemFirstCategory' has a wrong offset!");
static_assert(offsetof(FNGPKeepConfigInfo, _keep_NPC_Spot_list) == 0x000040, "Member 'FNGPKeepConfigInfo::_keep_NPC_Spot_list' has a wrong offset!");
static_assert(offsetof(FNGPKeepConfigInfo, _keep_Prop_Spot_list) == 0x000050, "Member 'FNGPKeepConfigInfo::_keep_Prop_Spot_list' has a wrong offset!");
static_assert(offsetof(FNGPKeepConfigInfo, _keep_item_Spot_list) == 0x000060, "Member 'FNGPKeepConfigInfo::_keep_item_Spot_list' has a wrong offset!");
static_assert(offsetof(FNGPKeepConfigInfo, _keep_quest) == 0x000070, "Member 'FNGPKeepConfigInfo::_keep_quest' has a wrong offset!");
static_assert(offsetof(FNGPKeepConfigInfo, _keep_special_buff_list) == 0x000080, "Member 'FNGPKeepConfigInfo::_keep_special_buff_list' has a wrong offset!");
static_assert(offsetof(FNGPKeepConfigInfo, _keep_ergo) == 0x000090, "Member 'FNGPKeepConfigInfo::_keep_ergo' has a wrong offset!");
static_assert(offsetof(FNGPKeepConfigInfo, _keep_level_and_stat) == 0x000091, "Member 'FNGPKeepConfigInfo::_keep_level_and_stat' has a wrong offset!");
static_assert(offsetof(FNGPKeepConfigInfo, _keep_P_Ogan_Quartz) == 0x000092, "Member 'FNGPKeepConfigInfo::_keep_P_Ogan_Quartz' has a wrong offset!");
static_assert(offsetof(FNGPKeepConfigInfo, _keep_P_Ogan_OpenLevel) == 0x000093, "Member 'FNGPKeepConfigInfo::_keep_P_Ogan_OpenLevel' has a wrong offset!");
static_assert(offsetof(FNGPKeepConfigInfo, _keep_appearance) == 0x000094, "Member 'FNGPKeepConfigInfo::_keep_appearance' has a wrong offset!");
static_assert(offsetof(FNGPKeepConfigInfo, _keep_tutorial_record) == 0x000095, "Member 'FNGPKeepConfigInfo::_keep_tutorial_record' has a wrong offset!");
static_assert(offsetof(FNGPKeepConfigInfo, _NewGame_Exec_Common_code_name) == 0x000098, "Member 'FNGPKeepConfigInfo::_NewGame_Exec_Common_code_name' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.NGPContentChangeInfo
// 0x00C0 (0x00E8 - 0x0028)
struct FNGPContentChangeInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _NGP_round;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _NGP_Detail_index;                                 // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _exp_Mul;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _health_power_Mul;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_power_Mul;                               // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _fire_attack_Mul;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _electric_attack_Mul;                              // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _acid_attack_Mul;                                  // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _fire_debuff_resist_Mul;                           // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _electric_debuff_resist_Mul;                       // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _acid_debuff_resist_Mul;                           // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _curse_debuff_resist_Mul;                          // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _contamination_debuff_resist_Mul;                  // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _impact_debuff_resist_Mul;                         // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _break_debuff_resist_Mul;                          // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _abnormal_state_build_up_attack_Mul;               // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _abnormalState_penalty_base_Mul;                   // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _build_up_recover_inc_base_Mul;                    // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _tough_Mul;                                        // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _tough_restore_base_Mul;                           // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _groggy_point_Mul;                                 // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _groggy_point_restore_base_Mul;                    // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _groggy_maintain_time_min_Mul;                     // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _groggy_maintain_time_max_Mul;                     // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _groggy_enable_time_Mul;                           // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _groggy_enable_reset_restore_Mul;                  // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _destruction_power_Mul;                            // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _regainhp_gain_ratio_Mul;                          // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _regainhp_heal_ratio_Mul;                          // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _regainhp_max_exist_Mul;                           // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_sharpness_attack_Mul;                       // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _durability_Mul;                                   // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_stamina_damage_Mul;                         // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _max_stamina_Mul;                                  // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _restore_stamina_per_sec_Mul;                      // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _fire_rate_dot_reduce_Mul;                         // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _electric_rate_dot_reduce_Mul;                     // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _acid_rate_dot_reduce_Mul;                         // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _etc_rate_dot_reduce_Mul;                          // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_slash_reduce_Mul;                        // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_strike_reduce_Mul;                       // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_pierce_reduce_Mul;                       // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _fire_reduce_Mul;                                  // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _electric_reduce_Mul;                              // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _acid_reduce_Mul;                                  // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _check_skill_use_count_Add;                        // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNGPContentChangeInfo) == 0x000008, "Wrong alignment on FNGPContentChangeInfo");
static_assert(sizeof(FNGPContentChangeInfo) == 0x0000E8, "Wrong size on FNGPContentChangeInfo");
static_assert(offsetof(FNGPContentChangeInfo, _code_name) == 0x000028, "Member 'FNGPContentChangeInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _NGP_round) == 0x000030, "Member 'FNGPContentChangeInfo::_NGP_round' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _NGP_Detail_index) == 0x000034, "Member 'FNGPContentChangeInfo::_NGP_Detail_index' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _exp_Mul) == 0x000038, "Member 'FNGPContentChangeInfo::_exp_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _health_power_Mul) == 0x00003C, "Member 'FNGPContentChangeInfo::_health_power_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _physical_power_Mul) == 0x000040, "Member 'FNGPContentChangeInfo::_physical_power_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _fire_attack_Mul) == 0x000044, "Member 'FNGPContentChangeInfo::_fire_attack_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _electric_attack_Mul) == 0x000048, "Member 'FNGPContentChangeInfo::_electric_attack_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _acid_attack_Mul) == 0x00004C, "Member 'FNGPContentChangeInfo::_acid_attack_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _fire_debuff_resist_Mul) == 0x000050, "Member 'FNGPContentChangeInfo::_fire_debuff_resist_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _electric_debuff_resist_Mul) == 0x000054, "Member 'FNGPContentChangeInfo::_electric_debuff_resist_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _acid_debuff_resist_Mul) == 0x000058, "Member 'FNGPContentChangeInfo::_acid_debuff_resist_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _curse_debuff_resist_Mul) == 0x00005C, "Member 'FNGPContentChangeInfo::_curse_debuff_resist_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _contamination_debuff_resist_Mul) == 0x000060, "Member 'FNGPContentChangeInfo::_contamination_debuff_resist_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _impact_debuff_resist_Mul) == 0x000064, "Member 'FNGPContentChangeInfo::_impact_debuff_resist_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _break_debuff_resist_Mul) == 0x000068, "Member 'FNGPContentChangeInfo::_break_debuff_resist_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _abnormal_state_build_up_attack_Mul) == 0x00006C, "Member 'FNGPContentChangeInfo::_abnormal_state_build_up_attack_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _abnormalState_penalty_base_Mul) == 0x000070, "Member 'FNGPContentChangeInfo::_abnormalState_penalty_base_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _build_up_recover_inc_base_Mul) == 0x000074, "Member 'FNGPContentChangeInfo::_build_up_recover_inc_base_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _tough_Mul) == 0x000078, "Member 'FNGPContentChangeInfo::_tough_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _tough_restore_base_Mul) == 0x00007C, "Member 'FNGPContentChangeInfo::_tough_restore_base_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _groggy_point_Mul) == 0x000080, "Member 'FNGPContentChangeInfo::_groggy_point_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _groggy_point_restore_base_Mul) == 0x000084, "Member 'FNGPContentChangeInfo::_groggy_point_restore_base_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _groggy_maintain_time_min_Mul) == 0x000088, "Member 'FNGPContentChangeInfo::_groggy_maintain_time_min_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _groggy_maintain_time_max_Mul) == 0x00008C, "Member 'FNGPContentChangeInfo::_groggy_maintain_time_max_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _groggy_enable_time_Mul) == 0x000090, "Member 'FNGPContentChangeInfo::_groggy_enable_time_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _groggy_enable_reset_restore_Mul) == 0x000094, "Member 'FNGPContentChangeInfo::_groggy_enable_reset_restore_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _destruction_power_Mul) == 0x000098, "Member 'FNGPContentChangeInfo::_destruction_power_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _regainhp_gain_ratio_Mul) == 0x00009C, "Member 'FNGPContentChangeInfo::_regainhp_gain_ratio_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _regainhp_heal_ratio_Mul) == 0x0000A0, "Member 'FNGPContentChangeInfo::_regainhp_heal_ratio_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _regainhp_max_exist_Mul) == 0x0000A4, "Member 'FNGPContentChangeInfo::_regainhp_max_exist_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _guard_sharpness_attack_Mul) == 0x0000A8, "Member 'FNGPContentChangeInfo::_guard_sharpness_attack_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _durability_Mul) == 0x0000AC, "Member 'FNGPContentChangeInfo::_durability_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _guard_stamina_damage_Mul) == 0x0000B0, "Member 'FNGPContentChangeInfo::_guard_stamina_damage_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _max_stamina_Mul) == 0x0000B4, "Member 'FNGPContentChangeInfo::_max_stamina_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _restore_stamina_per_sec_Mul) == 0x0000B8, "Member 'FNGPContentChangeInfo::_restore_stamina_per_sec_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _fire_rate_dot_reduce_Mul) == 0x0000BC, "Member 'FNGPContentChangeInfo::_fire_rate_dot_reduce_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _electric_rate_dot_reduce_Mul) == 0x0000C0, "Member 'FNGPContentChangeInfo::_electric_rate_dot_reduce_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _acid_rate_dot_reduce_Mul) == 0x0000C4, "Member 'FNGPContentChangeInfo::_acid_rate_dot_reduce_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _etc_rate_dot_reduce_Mul) == 0x0000C8, "Member 'FNGPContentChangeInfo::_etc_rate_dot_reduce_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _physical_slash_reduce_Mul) == 0x0000CC, "Member 'FNGPContentChangeInfo::_physical_slash_reduce_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _physical_strike_reduce_Mul) == 0x0000D0, "Member 'FNGPContentChangeInfo::_physical_strike_reduce_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _physical_pierce_reduce_Mul) == 0x0000D4, "Member 'FNGPContentChangeInfo::_physical_pierce_reduce_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _fire_reduce_Mul) == 0x0000D8, "Member 'FNGPContentChangeInfo::_fire_reduce_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _electric_reduce_Mul) == 0x0000DC, "Member 'FNGPContentChangeInfo::_electric_reduce_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _acid_reduce_Mul) == 0x0000E0, "Member 'FNGPContentChangeInfo::_acid_reduce_Mul' has a wrong offset!");
static_assert(offsetof(FNGPContentChangeInfo, _check_skill_use_count_Add) == 0x0000E4, "Member 'FNGPContentChangeInfo::_check_skill_use_count_Add' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.NewGamePlusInfoDB
// 0x0088 (0x00B0 - 0x0028)
struct FNewGamePlusInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNGPKeepConfigInfo>             _NGPKeepConfig_array;                              // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FNGPContentChangeInfo>          _NGPContentChange_array;                           // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNewGamePlusInfoDB) == 0x000008, "Wrong alignment on FNewGamePlusInfoDB");
static_assert(sizeof(FNewGamePlusInfoDB) == 0x0000B0, "Wrong size on FNewGamePlusInfoDB");
static_assert(offsetof(FNewGamePlusInfoDB, _NGPKeepConfig_array) == 0x000078, "Member 'FNewGamePlusInfoDB::_NGPKeepConfig_array' has a wrong offset!");
static_assert(offsetof(FNewGamePlusInfoDB, _NGPContentChange_array) == 0x000088, "Member 'FNewGamePlusInfoDB::_NGPContentChange_array' has a wrong offset!");
static_assert(offsetof(FNewGamePlusInfoDB, _version) == 0x000098, "Member 'FNewGamePlusInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FNewGamePlusInfoDB, _comment) == 0x0000A0, "Member 'FNewGamePlusInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.NGPKeepConfigInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FNGPKeepConfigInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNGPKeepConfigInfoPtr) == 0x000008, "Wrong alignment on FNGPKeepConfigInfoPtr");
static_assert(sizeof(FNGPKeepConfigInfoPtr) == 0x000008, "Wrong size on FNGPKeepConfigInfoPtr");

// ScriptStruct ProjectPContentInfo.NPCSpotDieInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FNPCSpotDieInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNPCSpotDieInfoPtr) == 0x000008, "Wrong alignment on FNPCSpotDieInfoPtr");
static_assert(sizeof(FNPCSpotDieInfoPtr) == 0x000008, "Wrong size on FNPCSpotDieInfoPtr");

// ScriptStruct ProjectPContentInfo.NPCPartsInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FNPCPartsInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNPCPartsInfoPtr) == 0x000008, "Wrong alignment on FNPCPartsInfoPtr");
static_assert(sizeof(FNPCPartsInfoPtr) == 0x000008, "Wrong size on FNPCPartsInfoPtr");

// ScriptStruct ProjectPContentInfo.NpcGaugeGrowthInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FNpcGaugeGrowthInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNpcGaugeGrowthInfoPtr) == 0x000008, "Wrong alignment on FNpcGaugeGrowthInfoPtr");
static_assert(sizeof(FNpcGaugeGrowthInfoPtr) == 0x000008, "Wrong size on FNpcGaugeGrowthInfoPtr");

// ScriptStruct ProjectPContentInfo.NPCSkillLinkInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FNPCSkillLinkInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNPCSkillLinkInfoPtr) == 0x000008, "Wrong alignment on FNPCSkillLinkInfoPtr");
static_assert(sizeof(FNPCSkillLinkInfoPtr) == 0x000008, "Wrong size on FNPCSkillLinkInfoPtr");

// ScriptStruct ProjectPContentInfo.NPCInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FNPCInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNPCInfoPtr) == 0x000008, "Wrong alignment on FNPCInfoPtr");
static_assert(sizeof(FNPCInfoPtr) == 0x000008, "Wrong size on FNPCInfoPtr");

// ScriptStruct ProjectPContentInfo.NPCDieInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FNPCDieInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNPCDieInfoPtr) == 0x000008, "Wrong alignment on FNPCDieInfoPtr");
static_assert(sizeof(FNPCDieInfoPtr) == 0x000008, "Wrong size on FNPCDieInfoPtr");

// ScriptStruct ProjectPContentInfo.NPCDieInfo
// 0x0008 (0x0030 - 0x0028)
struct FNPCDieInfo final : public FContentInfoBase
{
public:
	int32                                         _die_ani_duration;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNPCDieInfo) == 0x000008, "Wrong alignment on FNPCDieInfo");
static_assert(sizeof(FNPCDieInfo) == 0x000030, "Wrong size on FNPCDieInfo");
static_assert(offsetof(FNPCDieInfo, _die_ani_duration) == 0x000028, "Member 'FNPCDieInfo::_die_ani_duration' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.SpawnControllerInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSpawnControllerInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpawnControllerInfoPtr) == 0x000008, "Wrong alignment on FSpawnControllerInfoPtr");
static_assert(sizeof(FSpawnControllerInfoPtr) == 0x000008, "Wrong size on FSpawnControllerInfoPtr");

// ScriptStruct ProjectPContentInfo.PatchWeaponPackagePtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FPatchWeaponPackagePtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPatchWeaponPackagePtr) == 0x000008, "Wrong alignment on FPatchWeaponPackagePtr");
static_assert(sizeof(FPatchWeaponPackagePtr) == 0x000008, "Wrong size on FPatchWeaponPackagePtr");

// ScriptStruct ProjectPContentInfo.PatchItemPackagePtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FPatchItemPackagePtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPatchItemPackagePtr) == 0x000008, "Wrong alignment on FPatchItemPackagePtr");
static_assert(sizeof(FPatchItemPackagePtr) == 0x000008, "Wrong size on FPatchItemPackagePtr");

// ScriptStruct ProjectPContentInfo.PathWayInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FPathWayInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FPathWayInfo>                   _PathWay_array;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPathWayInfoDB) == 0x000008, "Wrong alignment on FPathWayInfoDB");
static_assert(sizeof(FPathWayInfoDB) == 0x000050, "Wrong size on FPathWayInfoDB");
static_assert(offsetof(FPathWayInfoDB, _PathWay_array) == 0x000028, "Member 'FPathWayInfoDB::_PathWay_array' has a wrong offset!");
static_assert(offsetof(FPathWayInfoDB, _version) == 0x000038, "Member 'FPathWayInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FPathWayInfoDB, _comment) == 0x000040, "Member 'FPathWayInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PathWayInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FPathWayInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPathWayInfoPtr) == 0x000008, "Wrong alignment on FPathWayInfoPtr");
static_assert(sizeof(FPathWayInfoPtr) == 0x000008, "Wrong size on FPathWayInfoPtr");

// ScriptStruct ProjectPContentInfo.LevelHumanityInfo
// 0x0028 (0x0050 - 0x0028)
struct FLevelHumanityInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _humanity_level;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _next_level_humanity;                              // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _sound_notify_track;                               // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _acquisition_text_code_name;                       // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _show_text;                                        // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELHumanityNoseStaffFormType                   _nosestaff_form;                                   // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLevelHumanityInfo) == 0x000008, "Wrong alignment on FLevelHumanityInfo");
static_assert(sizeof(FLevelHumanityInfo) == 0x000050, "Wrong size on FLevelHumanityInfo");
static_assert(offsetof(FLevelHumanityInfo, _code_name) == 0x000028, "Member 'FLevelHumanityInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FLevelHumanityInfo, _humanity_level) == 0x000030, "Member 'FLevelHumanityInfo::_humanity_level' has a wrong offset!");
static_assert(offsetof(FLevelHumanityInfo, _next_level_humanity) == 0x000034, "Member 'FLevelHumanityInfo::_next_level_humanity' has a wrong offset!");
static_assert(offsetof(FLevelHumanityInfo, _sound_notify_track) == 0x000038, "Member 'FLevelHumanityInfo::_sound_notify_track' has a wrong offset!");
static_assert(offsetof(FLevelHumanityInfo, _acquisition_text_code_name) == 0x000040, "Member 'FLevelHumanityInfo::_acquisition_text_code_name' has a wrong offset!");
static_assert(offsetof(FLevelHumanityInfo, _show_text) == 0x000048, "Member 'FLevelHumanityInfo::_show_text' has a wrong offset!");
static_assert(offsetof(FLevelHumanityInfo, _nosestaff_form) == 0x000049, "Member 'FLevelHumanityInfo::_nosestaff_form' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.DefaultStatInfo
// 0x0170 (0x0198 - 0x0028)
struct FDefaultStatInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _level;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _vitality;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _vigor;                                            // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _tenacity;                                         // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _capacity;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _motivity;                                         // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _technique;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _advance;                                          // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _health_point;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stamina_point;                                    // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _slave_magazine_point;                             // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_attack;                                  // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _fire_attack;                                      // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _electric_attack;                                  // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _acid_attack;                                      // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_defence;                                 // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_slash_defence;                           // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_strike_defence;                          // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_pierce_defence;                          // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _fire_defence;                                     // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _electric_defence;                                 // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _acid_defence;                                     // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _weight_limit;                                     // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _tough_point;                                      // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_reduce;                                  // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_slash_reduce;                            // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_strike_reduce;                           // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_pierce_reduce;                           // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _fire_reduce;                                      // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _electric_reduce;                                  // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _acid_reduce;                                      // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_physicaldamage_reduction_ratio;             // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_firedamage_reduction_ratio;                 // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_electricdamage_reduction_ratio;             // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_aciddamage_reduction_ratio;                 // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _dash_stamina_reduction_ratio;                     // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_stamina_reduction_ratio;                    // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stamina_restore_per_second;                       // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stamina_exhaust_time;                             // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _tough_restore_per_second;                         // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sprint_consume_stamina_per_second;                // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _fire_debuff_resist;                               // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _electric_debuff_resist;                           // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _acid_debuff_resist;                               // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _curse_debuff_resist;                              // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _contamination_debuff_resist;                      // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _impact_debuff_resist;                             // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _break_debuff_resist;                              // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sharpness_bonus;                                  // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _attack_stamina_reduction_ratio;                   // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _destruction_power;                                // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _fatal_physical_attackpower;                       // 0x00FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _attackratio_slavearm;                             // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _walk_run_speed_ratio;                             // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sprint_speed_ratio;                               // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _attack_speed_ratio;                               // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _rigidity;                                         // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _modification_drop_Ergo_Remain_decrease;           // 0x0114(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _paralyzation_add_damage_ratio;                    // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_parry_cooltime;                             // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _dash_parry_cooltime;                              // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _motion_speed_ratio;                               // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _down_getup_speed_ratio;                           // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _tough_recovery_delay_time;                        // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _tough_recovery_delay_reduction;                   // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _drop_ergo_regain_monkill_ratio;                   // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_regain_point_max;                           // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_regain_recovery_ratio;                      // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_regain_recovery_reduce_ratio;               // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_regain_attack_heal_increase_ratio;          // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _max_frenzy_gauge_per_unit;                        // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _frenzy_unit_count;                                // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _critical_damage_ratio;                            // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_regain_perfect_guard_heal_ratio;            // 0x0154(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _attack_gain_frenzy_point_increase_ratio;          // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _slash_attack_ratio;                               // 0x015C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _pierce_attack_ratio;                              // 0x0160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _strike_attack_ratio;                              // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _perfectguard_groggyenable_addtime_ratio;          // 0x0168(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _fatal_damage_ratio;                               // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _buildup_fire_reduction;                           // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _buildup_electric_reduction;                       // 0x0174(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _buildup_acid_reduction;                           // 0x0178(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _buildup_curse_reduction;                          // 0x017C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _buildup_contamination_reduction;                  // 0x0180(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _buildup_impact_reduction;                         // 0x0184(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _buildup_break_reduction;                          // 0x0188(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _abnormalState_penalty_base;                       // 0x018C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _build_up_recover_inc_base;                        // 0x0190(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _SlaveAttack_Gain_Frenzy_Point_Ratio;              // 0x0194(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDefaultStatInfo) == 0x000008, "Wrong alignment on FDefaultStatInfo");
static_assert(sizeof(FDefaultStatInfo) == 0x000198, "Wrong size on FDefaultStatInfo");
static_assert(offsetof(FDefaultStatInfo, _code_name) == 0x000028, "Member 'FDefaultStatInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _level) == 0x000030, "Member 'FDefaultStatInfo::_level' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _vitality) == 0x000034, "Member 'FDefaultStatInfo::_vitality' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _vigor) == 0x000038, "Member 'FDefaultStatInfo::_vigor' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _tenacity) == 0x00003C, "Member 'FDefaultStatInfo::_tenacity' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _capacity) == 0x000040, "Member 'FDefaultStatInfo::_capacity' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _motivity) == 0x000044, "Member 'FDefaultStatInfo::_motivity' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _technique) == 0x000048, "Member 'FDefaultStatInfo::_technique' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _advance) == 0x00004C, "Member 'FDefaultStatInfo::_advance' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _health_point) == 0x000050, "Member 'FDefaultStatInfo::_health_point' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _stamina_point) == 0x000054, "Member 'FDefaultStatInfo::_stamina_point' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _slave_magazine_point) == 0x000058, "Member 'FDefaultStatInfo::_slave_magazine_point' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _physical_attack) == 0x00005C, "Member 'FDefaultStatInfo::_physical_attack' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _fire_attack) == 0x000060, "Member 'FDefaultStatInfo::_fire_attack' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _electric_attack) == 0x000064, "Member 'FDefaultStatInfo::_electric_attack' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _acid_attack) == 0x000068, "Member 'FDefaultStatInfo::_acid_attack' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _physical_defence) == 0x00006C, "Member 'FDefaultStatInfo::_physical_defence' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _physical_slash_defence) == 0x000070, "Member 'FDefaultStatInfo::_physical_slash_defence' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _physical_strike_defence) == 0x000074, "Member 'FDefaultStatInfo::_physical_strike_defence' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _physical_pierce_defence) == 0x000078, "Member 'FDefaultStatInfo::_physical_pierce_defence' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _fire_defence) == 0x00007C, "Member 'FDefaultStatInfo::_fire_defence' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _electric_defence) == 0x000080, "Member 'FDefaultStatInfo::_electric_defence' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _acid_defence) == 0x000084, "Member 'FDefaultStatInfo::_acid_defence' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _weight_limit) == 0x000088, "Member 'FDefaultStatInfo::_weight_limit' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _tough_point) == 0x00008C, "Member 'FDefaultStatInfo::_tough_point' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _physical_reduce) == 0x000090, "Member 'FDefaultStatInfo::_physical_reduce' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _physical_slash_reduce) == 0x000094, "Member 'FDefaultStatInfo::_physical_slash_reduce' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _physical_strike_reduce) == 0x000098, "Member 'FDefaultStatInfo::_physical_strike_reduce' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _physical_pierce_reduce) == 0x00009C, "Member 'FDefaultStatInfo::_physical_pierce_reduce' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _fire_reduce) == 0x0000A0, "Member 'FDefaultStatInfo::_fire_reduce' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _electric_reduce) == 0x0000A4, "Member 'FDefaultStatInfo::_electric_reduce' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _acid_reduce) == 0x0000A8, "Member 'FDefaultStatInfo::_acid_reduce' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _guard_physicaldamage_reduction_ratio) == 0x0000AC, "Member 'FDefaultStatInfo::_guard_physicaldamage_reduction_ratio' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _guard_firedamage_reduction_ratio) == 0x0000B0, "Member 'FDefaultStatInfo::_guard_firedamage_reduction_ratio' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _guard_electricdamage_reduction_ratio) == 0x0000B4, "Member 'FDefaultStatInfo::_guard_electricdamage_reduction_ratio' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _guard_aciddamage_reduction_ratio) == 0x0000B8, "Member 'FDefaultStatInfo::_guard_aciddamage_reduction_ratio' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _dash_stamina_reduction_ratio) == 0x0000BC, "Member 'FDefaultStatInfo::_dash_stamina_reduction_ratio' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _guard_stamina_reduction_ratio) == 0x0000C0, "Member 'FDefaultStatInfo::_guard_stamina_reduction_ratio' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _stamina_restore_per_second) == 0x0000C4, "Member 'FDefaultStatInfo::_stamina_restore_per_second' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _stamina_exhaust_time) == 0x0000C8, "Member 'FDefaultStatInfo::_stamina_exhaust_time' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _tough_restore_per_second) == 0x0000CC, "Member 'FDefaultStatInfo::_tough_restore_per_second' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _sprint_consume_stamina_per_second) == 0x0000D0, "Member 'FDefaultStatInfo::_sprint_consume_stamina_per_second' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _fire_debuff_resist) == 0x0000D4, "Member 'FDefaultStatInfo::_fire_debuff_resist' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _electric_debuff_resist) == 0x0000D8, "Member 'FDefaultStatInfo::_electric_debuff_resist' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _acid_debuff_resist) == 0x0000DC, "Member 'FDefaultStatInfo::_acid_debuff_resist' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _curse_debuff_resist) == 0x0000E0, "Member 'FDefaultStatInfo::_curse_debuff_resist' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _contamination_debuff_resist) == 0x0000E4, "Member 'FDefaultStatInfo::_contamination_debuff_resist' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _impact_debuff_resist) == 0x0000E8, "Member 'FDefaultStatInfo::_impact_debuff_resist' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _break_debuff_resist) == 0x0000EC, "Member 'FDefaultStatInfo::_break_debuff_resist' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _sharpness_bonus) == 0x0000F0, "Member 'FDefaultStatInfo::_sharpness_bonus' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _attack_stamina_reduction_ratio) == 0x0000F4, "Member 'FDefaultStatInfo::_attack_stamina_reduction_ratio' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _destruction_power) == 0x0000F8, "Member 'FDefaultStatInfo::_destruction_power' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _fatal_physical_attackpower) == 0x0000FC, "Member 'FDefaultStatInfo::_fatal_physical_attackpower' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _attackratio_slavearm) == 0x000100, "Member 'FDefaultStatInfo::_attackratio_slavearm' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _walk_run_speed_ratio) == 0x000104, "Member 'FDefaultStatInfo::_walk_run_speed_ratio' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _sprint_speed_ratio) == 0x000108, "Member 'FDefaultStatInfo::_sprint_speed_ratio' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _attack_speed_ratio) == 0x00010C, "Member 'FDefaultStatInfo::_attack_speed_ratio' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _rigidity) == 0x000110, "Member 'FDefaultStatInfo::_rigidity' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _modification_drop_Ergo_Remain_decrease) == 0x000114, "Member 'FDefaultStatInfo::_modification_drop_Ergo_Remain_decrease' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _paralyzation_add_damage_ratio) == 0x000118, "Member 'FDefaultStatInfo::_paralyzation_add_damage_ratio' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _guard_parry_cooltime) == 0x00011C, "Member 'FDefaultStatInfo::_guard_parry_cooltime' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _dash_parry_cooltime) == 0x000120, "Member 'FDefaultStatInfo::_dash_parry_cooltime' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _motion_speed_ratio) == 0x000124, "Member 'FDefaultStatInfo::_motion_speed_ratio' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _down_getup_speed_ratio) == 0x000128, "Member 'FDefaultStatInfo::_down_getup_speed_ratio' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _tough_recovery_delay_time) == 0x00012C, "Member 'FDefaultStatInfo::_tough_recovery_delay_time' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _tough_recovery_delay_reduction) == 0x000130, "Member 'FDefaultStatInfo::_tough_recovery_delay_reduction' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _drop_ergo_regain_monkill_ratio) == 0x000134, "Member 'FDefaultStatInfo::_drop_ergo_regain_monkill_ratio' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _guard_regain_point_max) == 0x000138, "Member 'FDefaultStatInfo::_guard_regain_point_max' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _guard_regain_recovery_ratio) == 0x00013C, "Member 'FDefaultStatInfo::_guard_regain_recovery_ratio' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _guard_regain_recovery_reduce_ratio) == 0x000140, "Member 'FDefaultStatInfo::_guard_regain_recovery_reduce_ratio' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _guard_regain_attack_heal_increase_ratio) == 0x000144, "Member 'FDefaultStatInfo::_guard_regain_attack_heal_increase_ratio' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _max_frenzy_gauge_per_unit) == 0x000148, "Member 'FDefaultStatInfo::_max_frenzy_gauge_per_unit' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _frenzy_unit_count) == 0x00014C, "Member 'FDefaultStatInfo::_frenzy_unit_count' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _critical_damage_ratio) == 0x000150, "Member 'FDefaultStatInfo::_critical_damage_ratio' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _guard_regain_perfect_guard_heal_ratio) == 0x000154, "Member 'FDefaultStatInfo::_guard_regain_perfect_guard_heal_ratio' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _attack_gain_frenzy_point_increase_ratio) == 0x000158, "Member 'FDefaultStatInfo::_attack_gain_frenzy_point_increase_ratio' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _slash_attack_ratio) == 0x00015C, "Member 'FDefaultStatInfo::_slash_attack_ratio' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _pierce_attack_ratio) == 0x000160, "Member 'FDefaultStatInfo::_pierce_attack_ratio' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _strike_attack_ratio) == 0x000164, "Member 'FDefaultStatInfo::_strike_attack_ratio' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _perfectguard_groggyenable_addtime_ratio) == 0x000168, "Member 'FDefaultStatInfo::_perfectguard_groggyenable_addtime_ratio' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _fatal_damage_ratio) == 0x00016C, "Member 'FDefaultStatInfo::_fatal_damage_ratio' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _buildup_fire_reduction) == 0x000170, "Member 'FDefaultStatInfo::_buildup_fire_reduction' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _buildup_electric_reduction) == 0x000174, "Member 'FDefaultStatInfo::_buildup_electric_reduction' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _buildup_acid_reduction) == 0x000178, "Member 'FDefaultStatInfo::_buildup_acid_reduction' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _buildup_curse_reduction) == 0x00017C, "Member 'FDefaultStatInfo::_buildup_curse_reduction' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _buildup_contamination_reduction) == 0x000180, "Member 'FDefaultStatInfo::_buildup_contamination_reduction' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _buildup_impact_reduction) == 0x000184, "Member 'FDefaultStatInfo::_buildup_impact_reduction' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _buildup_break_reduction) == 0x000188, "Member 'FDefaultStatInfo::_buildup_break_reduction' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _abnormalState_penalty_base) == 0x00018C, "Member 'FDefaultStatInfo::_abnormalState_penalty_base' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _build_up_recover_inc_base) == 0x000190, "Member 'FDefaultStatInfo::_build_up_recover_inc_base' has a wrong offset!");
static_assert(offsetof(FDefaultStatInfo, _SlaveAttack_Gain_Frenzy_Point_Ratio) == 0x000194, "Member 'FDefaultStatInfo::_SlaveAttack_Gain_Frenzy_Point_Ratio' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PCInfoDB
// 0x0148 (0x0170 - 0x0028)
struct FPCInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLevelExpInfo>                  _LevelExp_array;                                   // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x50];                                      // 0x0088(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLevelHumanityInfo>             _LevelHumanity_array;                              // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FFirstStatToSecondStatInfo>     _FirstStatTOSecondStat_array;                      // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x50];                                      // 0x00F8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDefaultStatInfo>               _DefaultStat_array;                                // 0x0148(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0160(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPCInfoDB) == 0x000008, "Wrong alignment on FPCInfoDB");
static_assert(sizeof(FPCInfoDB) == 0x000170, "Wrong size on FPCInfoDB");
static_assert(offsetof(FPCInfoDB, _LevelExp_array) == 0x000078, "Member 'FPCInfoDB::_LevelExp_array' has a wrong offset!");
static_assert(offsetof(FPCInfoDB, _LevelHumanity_array) == 0x0000D8, "Member 'FPCInfoDB::_LevelHumanity_array' has a wrong offset!");
static_assert(offsetof(FPCInfoDB, _FirstStatTOSecondStat_array) == 0x0000E8, "Member 'FPCInfoDB::_FirstStatTOSecondStat_array' has a wrong offset!");
static_assert(offsetof(FPCInfoDB, _DefaultStat_array) == 0x000148, "Member 'FPCInfoDB::_DefaultStat_array' has a wrong offset!");
static_assert(offsetof(FPCInfoDB, _version) == 0x000158, "Member 'FPCInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FPCInfoDB, _comment) == 0x000160, "Member 'FPCInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.LevelHumanityInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FLevelHumanityInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLevelHumanityInfoPtr) == 0x000008, "Wrong alignment on FLevelHumanityInfoPtr");
static_assert(sizeof(FLevelHumanityInfoPtr) == 0x000008, "Wrong size on FLevelHumanityInfoPtr");

// ScriptStruct ProjectPContentInfo.LevelExpInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FLevelExpInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLevelExpInfoPtr) == 0x000008, "Wrong alignment on FLevelExpInfoPtr");
static_assert(sizeof(FLevelExpInfoPtr) == 0x000008, "Wrong size on FLevelExpInfoPtr");

// ScriptStruct ProjectPContentInfo.FirstStatToSecondStatInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FFirstStatToSecondStatInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFirstStatToSecondStatInfoPtr) == 0x000008, "Wrong alignment on FFirstStatToSecondStatInfoPtr");
static_assert(sizeof(FFirstStatToSecondStatInfoPtr) == 0x000008, "Wrong size on FFirstStatToSecondStatInfoPtr");

// ScriptStruct ProjectPContentInfo.ProjectileInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FProjectileInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FProjectileInfo>                _ProjectileInfo_array;                             // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProjectileInfoDB) == 0x000008, "Wrong alignment on FProjectileInfoDB");
static_assert(sizeof(FProjectileInfoDB) == 0x0000A0, "Wrong size on FProjectileInfoDB");
static_assert(offsetof(FProjectileInfoDB, _ProjectileInfo_array) == 0x000078, "Member 'FProjectileInfoDB::_ProjectileInfo_array' has a wrong offset!");
static_assert(offsetof(FProjectileInfoDB, _version) == 0x000088, "Member 'FProjectileInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FProjectileInfoDB, _comment) == 0x000090, "Member 'FProjectileInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ProjectileInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FProjectileInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProjectileInfoPtr) == 0x000008, "Wrong alignment on FProjectileInfoPtr");
static_assert(sizeof(FProjectileInfoPtr) == 0x000008, "Wrong size on FProjectileInfoPtr");

// ScriptStruct ProjectPContentInfo.PropDoorInfo
// 0x01D0 (0x01F8 - 0x0028)
struct FPropDoorInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _state;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 _model_resource;                                   // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _loop_motion_resource;                             // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPropInteractType                            _interact_type;                                    // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _interaction_radius;                               // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _interaction_confront_angle;                       // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _interaction_confront_angle_prop;                  // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _interaction_approach_message_code_name;           // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _interaction_success_massage;                      // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELMessageAlertType                            _succes_message_type;                              // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _interaction_message_time;                         // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _wrong_approach_message_code_name;                 // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _wrong_approach_next_message_code_name;            // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _interaction_condition;                            // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _interaction_condition_item;                       // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _del_condition_item;                               // 0x00D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _interaction_condition_human_point;                // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _interaction_condition_fail_approach_message;      // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _interaction_condition_fail_message;               // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELMessageAlertType                            _fail_message_type;                                // 0x00E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 _interaction_prop_motion_resource;                 // 0x00F0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _interaction_user_motion_resource;                 // 0x0118(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _interaction_condition_fail_prop_motion_resource;  // 0x0140(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _interaction_condition_fail_user_motion_resource;  // 0x0168(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _wrong_approach_prop_motion_resource;              // 0x0190(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _wrong_approach_user_motion_resource;              // 0x01B8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _contentCommand_codename;                          // 0x01E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _linked_prop_state_change;                         // 0x01E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELLinkedPropExecute                           _linked_prop_execute;                              // 0x01E9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _FixCamera_onInterAction;                          // 0x01EA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB[0x1];                                      // 0x01EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _use_level_sequence;                               // 0x01EC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPropDoorInfo) == 0x000008, "Wrong alignment on FPropDoorInfo");
static_assert(sizeof(FPropDoorInfo) == 0x0001F8, "Wrong size on FPropDoorInfo");
static_assert(offsetof(FPropDoorInfo, _code_name) == 0x000028, "Member 'FPropDoorInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _state) == 0x000030, "Member 'FPropDoorInfo::_state' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _model_resource) == 0x000038, "Member 'FPropDoorInfo::_model_resource' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _loop_motion_resource) == 0x000060, "Member 'FPropDoorInfo::_loop_motion_resource' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _interact_type) == 0x000088, "Member 'FPropDoorInfo::_interact_type' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _interaction_radius) == 0x00008C, "Member 'FPropDoorInfo::_interaction_radius' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _interaction_confront_angle) == 0x000090, "Member 'FPropDoorInfo::_interaction_confront_angle' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _interaction_confront_angle_prop) == 0x000094, "Member 'FPropDoorInfo::_interaction_confront_angle_prop' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _interaction_approach_message_code_name) == 0x000098, "Member 'FPropDoorInfo::_interaction_approach_message_code_name' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _interaction_success_massage) == 0x0000A0, "Member 'FPropDoorInfo::_interaction_success_massage' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _succes_message_type) == 0x0000A8, "Member 'FPropDoorInfo::_succes_message_type' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _interaction_message_time) == 0x0000AC, "Member 'FPropDoorInfo::_interaction_message_time' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _wrong_approach_message_code_name) == 0x0000B0, "Member 'FPropDoorInfo::_wrong_approach_message_code_name' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _wrong_approach_next_message_code_name) == 0x0000B8, "Member 'FPropDoorInfo::_wrong_approach_next_message_code_name' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _interaction_condition) == 0x0000C0, "Member 'FPropDoorInfo::_interaction_condition' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _interaction_condition_item) == 0x0000C8, "Member 'FPropDoorInfo::_interaction_condition_item' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _del_condition_item) == 0x0000D0, "Member 'FPropDoorInfo::_del_condition_item' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _interaction_condition_human_point) == 0x0000D4, "Member 'FPropDoorInfo::_interaction_condition_human_point' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _interaction_condition_fail_approach_message) == 0x0000D8, "Member 'FPropDoorInfo::_interaction_condition_fail_approach_message' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _interaction_condition_fail_message) == 0x0000E0, "Member 'FPropDoorInfo::_interaction_condition_fail_message' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _fail_message_type) == 0x0000E8, "Member 'FPropDoorInfo::_fail_message_type' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _interaction_prop_motion_resource) == 0x0000F0, "Member 'FPropDoorInfo::_interaction_prop_motion_resource' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _interaction_user_motion_resource) == 0x000118, "Member 'FPropDoorInfo::_interaction_user_motion_resource' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _interaction_condition_fail_prop_motion_resource) == 0x000140, "Member 'FPropDoorInfo::_interaction_condition_fail_prop_motion_resource' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _interaction_condition_fail_user_motion_resource) == 0x000168, "Member 'FPropDoorInfo::_interaction_condition_fail_user_motion_resource' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _wrong_approach_prop_motion_resource) == 0x000190, "Member 'FPropDoorInfo::_wrong_approach_prop_motion_resource' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _wrong_approach_user_motion_resource) == 0x0001B8, "Member 'FPropDoorInfo::_wrong_approach_user_motion_resource' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _contentCommand_codename) == 0x0001E0, "Member 'FPropDoorInfo::_contentCommand_codename' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _linked_prop_state_change) == 0x0001E8, "Member 'FPropDoorInfo::_linked_prop_state_change' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _linked_prop_execute) == 0x0001E9, "Member 'FPropDoorInfo::_linked_prop_execute' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _FixCamera_onInterAction) == 0x0001EA, "Member 'FPropDoorInfo::_FixCamera_onInterAction' has a wrong offset!");
static_assert(offsetof(FPropDoorInfo, _use_level_sequence) == 0x0001EC, "Member 'FPropDoorInfo::_use_level_sequence' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PropDoorInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FPropDoorInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FPropDoorInfo>                  _PropDoor_array;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPropDoorInfoDB) == 0x000008, "Wrong alignment on FPropDoorInfoDB");
static_assert(sizeof(FPropDoorInfoDB) == 0x000050, "Wrong size on FPropDoorInfoDB");
static_assert(offsetof(FPropDoorInfoDB, _PropDoor_array) == 0x000028, "Member 'FPropDoorInfoDB::_PropDoor_array' has a wrong offset!");
static_assert(offsetof(FPropDoorInfoDB, _version) == 0x000038, "Member 'FPropDoorInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FPropDoorInfoDB, _comment) == 0x000040, "Member 'FPropDoorInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PropDoorInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FPropDoorInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPropDoorInfoPtr) == 0x000008, "Wrong alignment on FPropDoorInfoPtr");
static_assert(sizeof(FPropDoorInfoPtr) == 0x000008, "Wrong size on FPropDoorInfoPtr");

// ScriptStruct ProjectPContentInfo.PropInfo
// 0x0188 (0x01B0 - 0x0028)
struct FPropInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _state;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _state_Freezing;                                   // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _FixCamera_onInterAction;                          // 0x0035(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   _prop_class;                                       // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _model_resource;                                   // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _motion_resource;                                  // 0x0088(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _interaction_radius;                               // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _interaction_offset_x;                             // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _interaction_offset_y;                             // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _interaction_offset_z;                             // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _interaction_confront_angle;                       // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _interaction_confront_angle_prop;                  // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _interaction_approach_message_code_name;           // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _interaction_prop_motion_resource;                 // 0x00D0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _interaction_user_motion_resource;                 // 0x00F8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_possible_blocking;                             // 0x0120(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_possible_physical_reaction;                    // 0x0121(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122[0x2];                                      // 0x0122(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _mass;                                             // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_possible_attack_reaction;                      // 0x0128(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_possible_attack_resistance;                    // 0x0129(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFxBranchType                                 _material;                                         // 0x012A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_possible_death;                                // 0x012B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELDeathByOwnerFaction                         _death_by_owner_faction;                           // 0x012C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _detail_of_death_by_owner_faction;                 // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _hp_discount_method;                               // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _hp;                                               // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _can_play_death_motion;                            // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _can_change_destruction_mode;                      // 0x014C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14D[0x3];                                      // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 _destruction_sound;                                // 0x0150(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_possible_blocking_remains;                     // 0x0178(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_possible_physical_reaction_remains;            // 0x0179(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A[0x2];                                      // 0x017A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _maintain_time_after_death;                        // 0x017C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _respawn_enable;                                   // 0x0180(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 _sound_resource;                                   // 0x0188(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPropInfo) == 0x000008, "Wrong alignment on FPropInfo");
static_assert(sizeof(FPropInfo) == 0x0001B0, "Wrong size on FPropInfo");
static_assert(offsetof(FPropInfo, _code_name) == 0x000028, "Member 'FPropInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FPropInfo, _state) == 0x000030, "Member 'FPropInfo::_state' has a wrong offset!");
static_assert(offsetof(FPropInfo, _state_Freezing) == 0x000034, "Member 'FPropInfo::_state_Freezing' has a wrong offset!");
static_assert(offsetof(FPropInfo, _FixCamera_onInterAction) == 0x000035, "Member 'FPropInfo::_FixCamera_onInterAction' has a wrong offset!");
static_assert(offsetof(FPropInfo, _prop_class) == 0x000038, "Member 'FPropInfo::_prop_class' has a wrong offset!");
static_assert(offsetof(FPropInfo, _model_resource) == 0x000060, "Member 'FPropInfo::_model_resource' has a wrong offset!");
static_assert(offsetof(FPropInfo, _motion_resource) == 0x000088, "Member 'FPropInfo::_motion_resource' has a wrong offset!");
static_assert(offsetof(FPropInfo, _interaction_radius) == 0x0000B0, "Member 'FPropInfo::_interaction_radius' has a wrong offset!");
static_assert(offsetof(FPropInfo, _interaction_offset_x) == 0x0000B4, "Member 'FPropInfo::_interaction_offset_x' has a wrong offset!");
static_assert(offsetof(FPropInfo, _interaction_offset_y) == 0x0000B8, "Member 'FPropInfo::_interaction_offset_y' has a wrong offset!");
static_assert(offsetof(FPropInfo, _interaction_offset_z) == 0x0000BC, "Member 'FPropInfo::_interaction_offset_z' has a wrong offset!");
static_assert(offsetof(FPropInfo, _interaction_confront_angle) == 0x0000C0, "Member 'FPropInfo::_interaction_confront_angle' has a wrong offset!");
static_assert(offsetof(FPropInfo, _interaction_confront_angle_prop) == 0x0000C4, "Member 'FPropInfo::_interaction_confront_angle_prop' has a wrong offset!");
static_assert(offsetof(FPropInfo, _interaction_approach_message_code_name) == 0x0000C8, "Member 'FPropInfo::_interaction_approach_message_code_name' has a wrong offset!");
static_assert(offsetof(FPropInfo, _interaction_prop_motion_resource) == 0x0000D0, "Member 'FPropInfo::_interaction_prop_motion_resource' has a wrong offset!");
static_assert(offsetof(FPropInfo, _interaction_user_motion_resource) == 0x0000F8, "Member 'FPropInfo::_interaction_user_motion_resource' has a wrong offset!");
static_assert(offsetof(FPropInfo, _is_possible_blocking) == 0x000120, "Member 'FPropInfo::_is_possible_blocking' has a wrong offset!");
static_assert(offsetof(FPropInfo, _is_possible_physical_reaction) == 0x000121, "Member 'FPropInfo::_is_possible_physical_reaction' has a wrong offset!");
static_assert(offsetof(FPropInfo, _mass) == 0x000124, "Member 'FPropInfo::_mass' has a wrong offset!");
static_assert(offsetof(FPropInfo, _is_possible_attack_reaction) == 0x000128, "Member 'FPropInfo::_is_possible_attack_reaction' has a wrong offset!");
static_assert(offsetof(FPropInfo, _is_possible_attack_resistance) == 0x000129, "Member 'FPropInfo::_is_possible_attack_resistance' has a wrong offset!");
static_assert(offsetof(FPropInfo, _material) == 0x00012A, "Member 'FPropInfo::_material' has a wrong offset!");
static_assert(offsetof(FPropInfo, _is_possible_death) == 0x00012B, "Member 'FPropInfo::_is_possible_death' has a wrong offset!");
static_assert(offsetof(FPropInfo, _death_by_owner_faction) == 0x00012C, "Member 'FPropInfo::_death_by_owner_faction' has a wrong offset!");
static_assert(offsetof(FPropInfo, _detail_of_death_by_owner_faction) == 0x000130, "Member 'FPropInfo::_detail_of_death_by_owner_faction' has a wrong offset!");
static_assert(offsetof(FPropInfo, _hp_discount_method) == 0x000140, "Member 'FPropInfo::_hp_discount_method' has a wrong offset!");
static_assert(offsetof(FPropInfo, _hp) == 0x000144, "Member 'FPropInfo::_hp' has a wrong offset!");
static_assert(offsetof(FPropInfo, _can_play_death_motion) == 0x000148, "Member 'FPropInfo::_can_play_death_motion' has a wrong offset!");
static_assert(offsetof(FPropInfo, _can_change_destruction_mode) == 0x00014C, "Member 'FPropInfo::_can_change_destruction_mode' has a wrong offset!");
static_assert(offsetof(FPropInfo, _destruction_sound) == 0x000150, "Member 'FPropInfo::_destruction_sound' has a wrong offset!");
static_assert(offsetof(FPropInfo, _is_possible_blocking_remains) == 0x000178, "Member 'FPropInfo::_is_possible_blocking_remains' has a wrong offset!");
static_assert(offsetof(FPropInfo, _is_possible_physical_reaction_remains) == 0x000179, "Member 'FPropInfo::_is_possible_physical_reaction_remains' has a wrong offset!");
static_assert(offsetof(FPropInfo, _maintain_time_after_death) == 0x00017C, "Member 'FPropInfo::_maintain_time_after_death' has a wrong offset!");
static_assert(offsetof(FPropInfo, _respawn_enable) == 0x000180, "Member 'FPropInfo::_respawn_enable' has a wrong offset!");
static_assert(offsetof(FPropInfo, _sound_resource) == 0x000188, "Member 'FPropInfo::_sound_resource' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PropInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FPropInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FPropInfo>                      _Prop_array;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPropInfoDB) == 0x000008, "Wrong alignment on FPropInfoDB");
static_assert(sizeof(FPropInfoDB) == 0x000050, "Wrong size on FPropInfoDB");
static_assert(offsetof(FPropInfoDB, _Prop_array) == 0x000028, "Member 'FPropInfoDB::_Prop_array' has a wrong offset!");
static_assert(offsetof(FPropInfoDB, _version) == 0x000038, "Member 'FPropInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FPropInfoDB, _comment) == 0x000040, "Member 'FPropInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PropLadderInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FPropLadderInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FPropLadderInfo>                _PropLadder_array;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPropLadderInfoDB) == 0x000008, "Wrong alignment on FPropLadderInfoDB");
static_assert(sizeof(FPropLadderInfoDB) == 0x000050, "Wrong size on FPropLadderInfoDB");
static_assert(offsetof(FPropLadderInfoDB, _PropLadder_array) == 0x000028, "Member 'FPropLadderInfoDB::_PropLadder_array' has a wrong offset!");
static_assert(offsetof(FPropLadderInfoDB, _version) == 0x000038, "Member 'FPropLadderInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FPropLadderInfoDB, _comment) == 0x000040, "Member 'FPropLadderInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PropLadderInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FPropLadderInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPropLadderInfoPtr) == 0x000008, "Wrong alignment on FPropLadderInfoPtr");
static_assert(sizeof(FPropLadderInfoPtr) == 0x000008, "Wrong size on FPropLadderInfoPtr");

// ScriptStruct ProjectPContentInfo.PropSetProjectileInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FPropSetProjectileInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FPropSetProjectileInfo>         _PropSetProjectile_array;                          // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPropSetProjectileInfoDB) == 0x000008, "Wrong alignment on FPropSetProjectileInfoDB");
static_assert(sizeof(FPropSetProjectileInfoDB) == 0x000050, "Wrong size on FPropSetProjectileInfoDB");
static_assert(offsetof(FPropSetProjectileInfoDB, _PropSetProjectile_array) == 0x000028, "Member 'FPropSetProjectileInfoDB::_PropSetProjectile_array' has a wrong offset!");
static_assert(offsetof(FPropSetProjectileInfoDB, _version) == 0x000038, "Member 'FPropSetProjectileInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FPropSetProjectileInfoDB, _comment) == 0x000040, "Member 'FPropSetProjectileInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PropSetProjectileInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FPropSetProjectileInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPropSetProjectileInfoPtr) == 0x000008, "Wrong alignment on FPropSetProjectileInfoPtr");
static_assert(sizeof(FPropSetProjectileInfoPtr) == 0x000008, "Wrong size on FPropSetProjectileInfoPtr");

// ScriptStruct ProjectPContentInfo.PropShapeObjectInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FPropShapeObjectInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPropShapeObjectInfoPtr) == 0x000008, "Wrong alignment on FPropShapeObjectInfoPtr");
static_assert(sizeof(FPropShapeObjectInfoPtr) == 0x000008, "Wrong size on FPropShapeObjectInfoPtr");

// ScriptStruct ProjectPContentInfo.PropVolumeInfo
// 0x0078 (0x00A0 - 0x0028)
struct FPropVolumeInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _state;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELInteractionEvokeType                        _interaction_evoke_type;                           // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 _loop_visual_asset_resource;                       // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAbnomalStateApplyType                       _abnomalState_apply_type;                          // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _abnomalState_codename;                            // 0x0064(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _abnomalState_buildup_damage;                      // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EFactionType>                          _abnomalState_target_filter;                       // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _abnomalState_buildup_damage_tick_time;            // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _abnomalState_duration_timepass_delay_ratio_add;   // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _LocationName_Display;                             // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _abnormalState_penalty_base;                       // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _build_up_recover_inc_base;                        // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _NGP_Detail_index;                                 // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPropVolumeInfo) == 0x000008, "Wrong alignment on FPropVolumeInfo");
static_assert(sizeof(FPropVolumeInfo) == 0x0000A0, "Wrong size on FPropVolumeInfo");
static_assert(offsetof(FPropVolumeInfo, _code_name) == 0x000028, "Member 'FPropVolumeInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FPropVolumeInfo, _state) == 0x000030, "Member 'FPropVolumeInfo::_state' has a wrong offset!");
static_assert(offsetof(FPropVolumeInfo, _interaction_evoke_type) == 0x000034, "Member 'FPropVolumeInfo::_interaction_evoke_type' has a wrong offset!");
static_assert(offsetof(FPropVolumeInfo, _loop_visual_asset_resource) == 0x000038, "Member 'FPropVolumeInfo::_loop_visual_asset_resource' has a wrong offset!");
static_assert(offsetof(FPropVolumeInfo, _abnomalState_apply_type) == 0x000060, "Member 'FPropVolumeInfo::_abnomalState_apply_type' has a wrong offset!");
static_assert(offsetof(FPropVolumeInfo, _abnomalState_codename) == 0x000064, "Member 'FPropVolumeInfo::_abnomalState_codename' has a wrong offset!");
static_assert(offsetof(FPropVolumeInfo, _abnomalState_buildup_damage) == 0x00006C, "Member 'FPropVolumeInfo::_abnomalState_buildup_damage' has a wrong offset!");
static_assert(offsetof(FPropVolumeInfo, _abnomalState_target_filter) == 0x000070, "Member 'FPropVolumeInfo::_abnomalState_target_filter' has a wrong offset!");
static_assert(offsetof(FPropVolumeInfo, _abnomalState_buildup_damage_tick_time) == 0x000080, "Member 'FPropVolumeInfo::_abnomalState_buildup_damage_tick_time' has a wrong offset!");
static_assert(offsetof(FPropVolumeInfo, _abnomalState_duration_timepass_delay_ratio_add) == 0x000084, "Member 'FPropVolumeInfo::_abnomalState_duration_timepass_delay_ratio_add' has a wrong offset!");
static_assert(offsetof(FPropVolumeInfo, _LocationName_Display) == 0x000088, "Member 'FPropVolumeInfo::_LocationName_Display' has a wrong offset!");
static_assert(offsetof(FPropVolumeInfo, _abnormalState_penalty_base) == 0x000090, "Member 'FPropVolumeInfo::_abnormalState_penalty_base' has a wrong offset!");
static_assert(offsetof(FPropVolumeInfo, _build_up_recover_inc_base) == 0x000094, "Member 'FPropVolumeInfo::_build_up_recover_inc_base' has a wrong offset!");
static_assert(offsetof(FPropVolumeInfo, _NGP_Detail_index) == 0x000098, "Member 'FPropVolumeInfo::_NGP_Detail_index' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PropVolumeInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FPropVolumeInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FPropVolumeInfo>                _PropVolume_array;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPropVolumeInfoDB) == 0x000008, "Wrong alignment on FPropVolumeInfoDB");
static_assert(sizeof(FPropVolumeInfoDB) == 0x000050, "Wrong size on FPropVolumeInfoDB");
static_assert(offsetof(FPropVolumeInfoDB, _PropVolume_array) == 0x000028, "Member 'FPropVolumeInfoDB::_PropVolume_array' has a wrong offset!");
static_assert(offsetof(FPropVolumeInfoDB, _version) == 0x000038, "Member 'FPropVolumeInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FPropVolumeInfoDB, _comment) == 0x000040, "Member 'FPropVolumeInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.PropVolumeInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FPropVolumeInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPropVolumeInfoPtr) == 0x000008, "Wrong alignment on FPropVolumeInfoPtr");
static_assert(sizeof(FPropVolumeInfoPtr) == 0x000008, "Wrong size on FPropVolumeInfoPtr");

// ScriptStruct ProjectPContentInfo.QuartzEffectInfo
// 0x0020 (0x0048 - 0x0028)
struct FQuartzEffectInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _core_level;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELQuartzEffectType                            _effect_type;                                      // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _effect_index;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _special_buff_code_name;                           // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _number_overlapping_effect;                        // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuartzEffectInfo) == 0x000008, "Wrong alignment on FQuartzEffectInfo");
static_assert(sizeof(FQuartzEffectInfo) == 0x000048, "Wrong size on FQuartzEffectInfo");
static_assert(offsetof(FQuartzEffectInfo, _code_name) == 0x000028, "Member 'FQuartzEffectInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FQuartzEffectInfo, _core_level) == 0x000030, "Member 'FQuartzEffectInfo::_core_level' has a wrong offset!");
static_assert(offsetof(FQuartzEffectInfo, _effect_type) == 0x000034, "Member 'FQuartzEffectInfo::_effect_type' has a wrong offset!");
static_assert(offsetof(FQuartzEffectInfo, _effect_index) == 0x000038, "Member 'FQuartzEffectInfo::_effect_index' has a wrong offset!");
static_assert(offsetof(FQuartzEffectInfo, _special_buff_code_name) == 0x00003C, "Member 'FQuartzEffectInfo::_special_buff_code_name' has a wrong offset!");
static_assert(offsetof(FQuartzEffectInfo, _number_overlapping_effect) == 0x000044, "Member 'FQuartzEffectInfo::_number_overlapping_effect' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.QuartzEffectInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FQuartzEffectInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQuartzEffectInfo>              _QuartzEffectInfo_array;                           // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuartzEffectInfoDB) == 0x000008, "Wrong alignment on FQuartzEffectInfoDB");
static_assert(sizeof(FQuartzEffectInfoDB) == 0x0000A0, "Wrong size on FQuartzEffectInfoDB");
static_assert(offsetof(FQuartzEffectInfoDB, _QuartzEffectInfo_array) == 0x000078, "Member 'FQuartzEffectInfoDB::_QuartzEffectInfo_array' has a wrong offset!");
static_assert(offsetof(FQuartzEffectInfoDB, _version) == 0x000088, "Member 'FQuartzEffectInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FQuartzEffectInfoDB, _comment) == 0x000090, "Member 'FQuartzEffectInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.QuartzPocketInfo
// 0x0058 (0x0080 - 0x0028)
struct FQuartzPocketInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _pocket_index;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _description;                                      // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _level;                                            // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _slot_count;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _synergy_special_buff_code_name;                   // 0x0044(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _synergy_activate_slot_count;                      // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _number_overlapping_synergy;                       // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 _image;                                            // 0x0058(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuartzPocketInfo) == 0x000008, "Wrong alignment on FQuartzPocketInfo");
static_assert(sizeof(FQuartzPocketInfo) == 0x000080, "Wrong size on FQuartzPocketInfo");
static_assert(offsetof(FQuartzPocketInfo, _code_name) == 0x000028, "Member 'FQuartzPocketInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FQuartzPocketInfo, _pocket_index) == 0x000030, "Member 'FQuartzPocketInfo::_pocket_index' has a wrong offset!");
static_assert(offsetof(FQuartzPocketInfo, _description) == 0x000034, "Member 'FQuartzPocketInfo::_description' has a wrong offset!");
static_assert(offsetof(FQuartzPocketInfo, _level) == 0x00003C, "Member 'FQuartzPocketInfo::_level' has a wrong offset!");
static_assert(offsetof(FQuartzPocketInfo, _slot_count) == 0x000040, "Member 'FQuartzPocketInfo::_slot_count' has a wrong offset!");
static_assert(offsetof(FQuartzPocketInfo, _synergy_special_buff_code_name) == 0x000044, "Member 'FQuartzPocketInfo::_synergy_special_buff_code_name' has a wrong offset!");
static_assert(offsetof(FQuartzPocketInfo, _synergy_activate_slot_count) == 0x00004C, "Member 'FQuartzPocketInfo::_synergy_activate_slot_count' has a wrong offset!");
static_assert(offsetof(FQuartzPocketInfo, _number_overlapping_synergy) == 0x000050, "Member 'FQuartzPocketInfo::_number_overlapping_synergy' has a wrong offset!");
static_assert(offsetof(FQuartzPocketInfo, _image) == 0x000058, "Member 'FQuartzPocketInfo::_image' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.QuartzPocketInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FQuartzPocketInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQuartzPocketInfo>              _QuartzPocketInfo_array;                           // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuartzPocketInfoDB) == 0x000008, "Wrong alignment on FQuartzPocketInfoDB");
static_assert(sizeof(FQuartzPocketInfoDB) == 0x0000A0, "Wrong size on FQuartzPocketInfoDB");
static_assert(offsetof(FQuartzPocketInfoDB, _QuartzPocketInfo_array) == 0x000078, "Member 'FQuartzPocketInfoDB::_QuartzPocketInfo_array' has a wrong offset!");
static_assert(offsetof(FQuartzPocketInfoDB, _version) == 0x000088, "Member 'FQuartzPocketInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FQuartzPocketInfoDB, _comment) == 0x000090, "Member 'FQuartzPocketInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.QuartzPocketInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FQuartzPocketInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuartzPocketInfoPtr) == 0x000008, "Wrong alignment on FQuartzPocketInfoPtr");
static_assert(sizeof(FQuartzPocketInfoPtr) == 0x000008, "Wrong size on FQuartzPocketInfoPtr");

// ScriptStruct ProjectPContentInfo.QuestDescInfo
// 0x0048 (0x0070 - 0x0028)
struct FQuestDescInfo final : public FContentInfoBase
{
public:
	TArray<struct FGeneralCallBackEventInfo>      _add_quest_type_list_array;                        // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FGeneralConditionInfo>          _add_quest_condition_array;                        // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FName                                   _code_name;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _add_quest_condition_or;                           // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           _talker;                                           // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _quest_variable;                                   // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _dialog_select_num;                                // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestDescInfo) == 0x000008, "Wrong alignment on FQuestDescInfo");
static_assert(sizeof(FQuestDescInfo) == 0x000070, "Wrong size on FQuestDescInfo");
static_assert(offsetof(FQuestDescInfo, _add_quest_type_list_array) == 0x000028, "Member 'FQuestDescInfo::_add_quest_type_list_array' has a wrong offset!");
static_assert(offsetof(FQuestDescInfo, _add_quest_condition_array) == 0x000038, "Member 'FQuestDescInfo::_add_quest_condition_array' has a wrong offset!");
static_assert(offsetof(FQuestDescInfo, _code_name) == 0x000048, "Member 'FQuestDescInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FQuestDescInfo, _add_quest_condition_or) == 0x000050, "Member 'FQuestDescInfo::_add_quest_condition_or' has a wrong offset!");
static_assert(offsetof(FQuestDescInfo, _talker) == 0x000058, "Member 'FQuestDescInfo::_talker' has a wrong offset!");
static_assert(offsetof(FQuestDescInfo, _quest_variable) == 0x000068, "Member 'FQuestDescInfo::_quest_variable' has a wrong offset!");
static_assert(offsetof(FQuestDescInfo, _dialog_select_num) == 0x00006C, "Member 'FQuestDescInfo::_dialog_select_num' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.QuestInfoDB
// 0x0088 (0x00B0 - 0x0028)
struct FQuestInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQuestDescInfo>                 _QuestDesc_array;                                  // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FQuestStepInfo>                 _QuestStep_array;                                  // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestInfoDB) == 0x000008, "Wrong alignment on FQuestInfoDB");
static_assert(sizeof(FQuestInfoDB) == 0x0000B0, "Wrong size on FQuestInfoDB");
static_assert(offsetof(FQuestInfoDB, _QuestDesc_array) == 0x000078, "Member 'FQuestInfoDB::_QuestDesc_array' has a wrong offset!");
static_assert(offsetof(FQuestInfoDB, _QuestStep_array) == 0x000088, "Member 'FQuestInfoDB::_QuestStep_array' has a wrong offset!");
static_assert(offsetof(FQuestInfoDB, _version) == 0x000098, "Member 'FQuestInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FQuestInfoDB, _comment) == 0x0000A0, "Member 'FQuestInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.QuestRewardItemInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FQuestRewardItemInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestRewardItemInfoPtr) == 0x000008, "Wrong alignment on FQuestRewardItemInfoPtr");
static_assert(sizeof(FQuestRewardItemInfoPtr) == 0x000008, "Wrong size on FQuestRewardItemInfoPtr");

// ScriptStruct ProjectPContentInfo.ResetSystemSettingInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FResetSystemSettingInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FResetSystemSettingInfo>        _ResetSystemSetting_array;                         // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResetSystemSettingInfoDB) == 0x000008, "Wrong alignment on FResetSystemSettingInfoDB");
static_assert(sizeof(FResetSystemSettingInfoDB) == 0x0000A0, "Wrong size on FResetSystemSettingInfoDB");
static_assert(offsetof(FResetSystemSettingInfoDB, _ResetSystemSetting_array) == 0x000078, "Member 'FResetSystemSettingInfoDB::_ResetSystemSetting_array' has a wrong offset!");
static_assert(offsetof(FResetSystemSettingInfoDB, _version) == 0x000088, "Member 'FResetSystemSettingInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FResetSystemSettingInfoDB, _comment) == 0x000090, "Member 'FResetSystemSettingInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ShopInfo
// 0x0038 (0x0060 - 0x0028)
struct FShopInfo final : public FContentInfoBase
{
public:
	class FName                                   _goods_code_name;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _shop_code_name;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sort;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _item_code_name;                                   // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _item_code_name2;                                  // 0x0044(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stock_limit;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _selling_price;                                    // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _condition;                                        // 0x0054(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _buy_num_max;                                      // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShopInfo) == 0x000008, "Wrong alignment on FShopInfo");
static_assert(sizeof(FShopInfo) == 0x000060, "Wrong size on FShopInfo");
static_assert(offsetof(FShopInfo, _goods_code_name) == 0x000028, "Member 'FShopInfo::_goods_code_name' has a wrong offset!");
static_assert(offsetof(FShopInfo, _shop_code_name) == 0x000030, "Member 'FShopInfo::_shop_code_name' has a wrong offset!");
static_assert(offsetof(FShopInfo, _sort) == 0x000038, "Member 'FShopInfo::_sort' has a wrong offset!");
static_assert(offsetof(FShopInfo, _item_code_name) == 0x00003C, "Member 'FShopInfo::_item_code_name' has a wrong offset!");
static_assert(offsetof(FShopInfo, _item_code_name2) == 0x000044, "Member 'FShopInfo::_item_code_name2' has a wrong offset!");
static_assert(offsetof(FShopInfo, _stock_limit) == 0x00004C, "Member 'FShopInfo::_stock_limit' has a wrong offset!");
static_assert(offsetof(FShopInfo, _selling_price) == 0x000050, "Member 'FShopInfo::_selling_price' has a wrong offset!");
static_assert(offsetof(FShopInfo, _condition) == 0x000054, "Member 'FShopInfo::_condition' has a wrong offset!");
static_assert(offsetof(FShopInfo, _buy_num_max) == 0x00005C, "Member 'FShopInfo::_buy_num_max' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ShopInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FShopInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FShopInfo>                      _Shop_array;                                       // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShopInfoDB) == 0x000008, "Wrong alignment on FShopInfoDB");
static_assert(sizeof(FShopInfoDB) == 0x0000A0, "Wrong size on FShopInfoDB");
static_assert(offsetof(FShopInfoDB, _Shop_array) == 0x000078, "Member 'FShopInfoDB::_Shop_array' has a wrong offset!");
static_assert(offsetof(FShopInfoDB, _version) == 0x000088, "Member 'FShopInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FShopInfoDB, _comment) == 0x000090, "Member 'FShopInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ShopInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FShopInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShopInfoPtr) == 0x000008, "Wrong alignment on FShopInfoPtr");
static_assert(sizeof(FShopInfoPtr) == 0x000008, "Wrong size on FShopInfoPtr");

// ScriptStruct ProjectPContentInfo.ShopSpecialInfo
// 0x0068 (0x0090 - 0x0028)
struct FShopSpecialInfo final : public FContentInfoBase
{
public:
	class FName                                   _goods_code_name;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _shop_code_name;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sort;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _item_code_name;                                   // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _item_code_name2;                                  // 0x0044(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stock_limit;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _need_item1;                                       // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _need_item_num1;                                   // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _need_item2;                                       // 0x005C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _need_item_num2;                                   // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _need_item3;                                       // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _need_item_num3;                                   // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _need_item4;                                       // 0x0074(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _need_item_num4;                                   // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _need_ergo;                                        // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _condition;                                        // 0x0084(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _buy_num_max;                                      // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShopSpecialInfo) == 0x000008, "Wrong alignment on FShopSpecialInfo");
static_assert(sizeof(FShopSpecialInfo) == 0x000090, "Wrong size on FShopSpecialInfo");
static_assert(offsetof(FShopSpecialInfo, _goods_code_name) == 0x000028, "Member 'FShopSpecialInfo::_goods_code_name' has a wrong offset!");
static_assert(offsetof(FShopSpecialInfo, _shop_code_name) == 0x000030, "Member 'FShopSpecialInfo::_shop_code_name' has a wrong offset!");
static_assert(offsetof(FShopSpecialInfo, _sort) == 0x000038, "Member 'FShopSpecialInfo::_sort' has a wrong offset!");
static_assert(offsetof(FShopSpecialInfo, _item_code_name) == 0x00003C, "Member 'FShopSpecialInfo::_item_code_name' has a wrong offset!");
static_assert(offsetof(FShopSpecialInfo, _item_code_name2) == 0x000044, "Member 'FShopSpecialInfo::_item_code_name2' has a wrong offset!");
static_assert(offsetof(FShopSpecialInfo, _stock_limit) == 0x00004C, "Member 'FShopSpecialInfo::_stock_limit' has a wrong offset!");
static_assert(offsetof(FShopSpecialInfo, _need_item1) == 0x000050, "Member 'FShopSpecialInfo::_need_item1' has a wrong offset!");
static_assert(offsetof(FShopSpecialInfo, _need_item_num1) == 0x000058, "Member 'FShopSpecialInfo::_need_item_num1' has a wrong offset!");
static_assert(offsetof(FShopSpecialInfo, _need_item2) == 0x00005C, "Member 'FShopSpecialInfo::_need_item2' has a wrong offset!");
static_assert(offsetof(FShopSpecialInfo, _need_item_num2) == 0x000064, "Member 'FShopSpecialInfo::_need_item_num2' has a wrong offset!");
static_assert(offsetof(FShopSpecialInfo, _need_item3) == 0x000068, "Member 'FShopSpecialInfo::_need_item3' has a wrong offset!");
static_assert(offsetof(FShopSpecialInfo, _need_item_num3) == 0x000070, "Member 'FShopSpecialInfo::_need_item_num3' has a wrong offset!");
static_assert(offsetof(FShopSpecialInfo, _need_item4) == 0x000074, "Member 'FShopSpecialInfo::_need_item4' has a wrong offset!");
static_assert(offsetof(FShopSpecialInfo, _need_item_num4) == 0x00007C, "Member 'FShopSpecialInfo::_need_item_num4' has a wrong offset!");
static_assert(offsetof(FShopSpecialInfo, _need_ergo) == 0x000080, "Member 'FShopSpecialInfo::_need_ergo' has a wrong offset!");
static_assert(offsetof(FShopSpecialInfo, _condition) == 0x000084, "Member 'FShopSpecialInfo::_condition' has a wrong offset!");
static_assert(offsetof(FShopSpecialInfo, _buy_num_max) == 0x00008C, "Member 'FShopSpecialInfo::_buy_num_max' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.ShopSpecialInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FShopSpecialInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FShopSpecialInfo>               _ShopSpecial_array;                                // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShopSpecialInfoDB) == 0x000008, "Wrong alignment on FShopSpecialInfoDB");
static_assert(sizeof(FShopSpecialInfoDB) == 0x0000A0, "Wrong size on FShopSpecialInfoDB");
static_assert(offsetof(FShopSpecialInfoDB, _ShopSpecial_array) == 0x000078, "Member 'FShopSpecialInfoDB::_ShopSpecial_array' has a wrong offset!");
static_assert(offsetof(FShopSpecialInfoDB, _version) == 0x000088, "Member 'FShopSpecialInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FShopSpecialInfoDB, _comment) == 0x000090, "Member 'FShopSpecialInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.SkillHitInfo
// 0x0170 (0x0198 - 0x0028)
struct FSkillHitInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSkillHitType                                _skill_hit_type;                                   // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPhysicalDamageType                          _physical_damage_type;                             // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELElementDamageType                           _element_damage_type;                              // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _impulse_value;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _consume_stamina_point;                            // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _consume_stamina_ratio;                            // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _consume_slave_magazine;                           // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _physical_damage_ratio;                            // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _element_damage_ratio;                             // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _tough_damage_ratio;                               // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _intensity_ratio;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _groggy_damage_ratio;                              // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _groggy_time_ratio;                                // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _guard_break_attack;                               // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _guard_penetration_ratio;                          // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_stamina_damage_ratio;                       // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _attack_gain_frenzy_point_ratio;                   // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _abnormalstate_moment_condition_group;             // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _abnormal_state_code_name;                         // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _abnormal_state_build_up_attack_ratio;             // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _pulse_recharge_ratio;                             // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELHostileType                                 _hostile_type;                                     // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ignore_pc;                                        // 0x0081(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ignore_npc;                                       // 0x0082(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ignore_dead;                                      // 0x0083(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ignore_invincible;                                // 0x0084(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ignore_dodge;                                     // 0x0085(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ignore_super_armor;                               // 0x0086(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ignore_guard;                                     // 0x0087(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ignore_perfect_guard;                             // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ignore_parry;                                     // 0x0089(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ignore_grabbed;                                   // 0x008A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _use_smash;                                        // 0x008B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _use_counter;                                      // 0x008C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _counter_change_skill_hit_code_name;               // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _use_hit_intencity;                                // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _hit_intencity_down_skill_hit;                     // 0x009C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPhysicalSurfaceType                         _hit_material;                                     // 0x00A4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELHitDirectionType                            _hit_direction_type;                               // 0x00A5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A6[0x2];                                       // 0x00A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _hit_fx_angle;                                     // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _groggy_change_skill_hit_code_name;                // 0x00AC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELHitMotionType                               _hit_motion_type;                                  // 0x00B4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _hit_anim_duration;                                // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELKnockBackDirectionType                      _knockback_direction;                              // 0x00BC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _knockback_duration;                               // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _knockback_scale;                                  // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _knockback_distance;                               // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _bound_height;                                     // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _bound_duration;                                   // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELGuardAttackType                             _guard_attack_type;                                // 0x00D4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _guard_knockback_distance;                         // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_knockback_duration;                         // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stiffen_duration_attacker;                        // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _stiffen_playrate_attacker;                        // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _stiffen_duration_defender;                        // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _stiffen_playrate_defender;                        // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _trace_attack;                                     // 0x00F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _spark_start_socket;                               // 0x00F4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _spark_end_socket;                                 // 0x00FC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _spark_col_radius;                                 // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ignore_repulse_guard;                             // 0x0108(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ignore_repulse_env;                               // 0x0109(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ignore_repulse_hit;                               // 0x010A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELRepulseDirectionType                        _repulse_direction;                                // 0x010B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _repulse_duration;                                 // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _repulse_start_socket;                             // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _repulse_end_socket;                               // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _repulse_col_radius;                               // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSkillMotionType                             _motion_type;                                      // 0x0124(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _decrease_enemy_weapon_durability;                 // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _groggy_enable_hit_front;                          // 0x012C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _groggy_enable_hit_side;                           // 0x012D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _groggy_enable_hit_back;                           // 0x012E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _groggy_immediately_hit_front;                     // 0x012F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _groggy_immediately_hit_side;                      // 0x0130(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _groggy_immediately_hit_back;                      // 0x0131(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132[0x2];                                      // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _regainhp_make_ratio;                              // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _regainhp_damage_ratio;                            // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _fury_attack;                                      // 0x013C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D[0x3];                                      // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _sharpness_reduce_value_ratio;                     // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_sharpness_durability_ratio;                 // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_hit_duration;                               // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSwingPowerType                              _hit_fx_level;                                     // 0x014C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _enable_warningevent;                              // 0x014D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _enable_perfect_guard_groggy_damage;               // 0x014E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14F[0x1];                                      // 0x014F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _explosive_kill_prob;                              // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELExplosionDirectionType                      _explosive_kill_direction;                         // 0x0154(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELExplosionPowerType                          _exlplosive_kill_power;                            // 0x0155(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_156[0x2];                                      // 0x0156(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _hit_camera_shake_code_name;                       // 0x0158(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _enable_2d_sfx;                                    // 0x0160(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _rigidity_ratio;                                   // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _hit_generate_prj_code_name;                       // 0x0168(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _tough_recovery_delay_time_ratio;                  // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_regain_increase_ratio;                      // 0x0174(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_regain_attack_heal_ratio;                   // 0x0178(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _guard_regain_damage_ratio;                        // 0x017C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELWeaponAttachPointType                       _weapon_attach_point_type;                         // 0x0180(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPartsAttachPointType                        _body_weapon_attach_point_type;                    // 0x0181(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182[0x2];                                      // 0x0182(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _perfect_guard_decrease_weapon_durability_rate;    // 0x0184(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _take_damage_ignore_warning;                       // 0x0188(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _counter_pre_hit;                                  // 0x018C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _counter_post_hit;                                 // 0x0190(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _allow_360_guard;                                  // 0x0194(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _hit_rotation_reverse;                             // 0x0195(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ignore_guard_fx;                                  // 0x0196(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ignore_guard_sfx;                                 // 0x0197(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillHitInfo) == 0x000008, "Wrong alignment on FSkillHitInfo");
static_assert(sizeof(FSkillHitInfo) == 0x000198, "Wrong size on FSkillHitInfo");
static_assert(offsetof(FSkillHitInfo, _code_name) == 0x000028, "Member 'FSkillHitInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _skill_hit_type) == 0x000030, "Member 'FSkillHitInfo::_skill_hit_type' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _physical_damage_type) == 0x000031, "Member 'FSkillHitInfo::_physical_damage_type' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _element_damage_type) == 0x000032, "Member 'FSkillHitInfo::_element_damage_type' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _impulse_value) == 0x000034, "Member 'FSkillHitInfo::_impulse_value' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _consume_stamina_point) == 0x000038, "Member 'FSkillHitInfo::_consume_stamina_point' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _consume_stamina_ratio) == 0x00003C, "Member 'FSkillHitInfo::_consume_stamina_ratio' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _consume_slave_magazine) == 0x000040, "Member 'FSkillHitInfo::_consume_slave_magazine' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _physical_damage_ratio) == 0x000044, "Member 'FSkillHitInfo::_physical_damage_ratio' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _element_damage_ratio) == 0x000048, "Member 'FSkillHitInfo::_element_damage_ratio' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _tough_damage_ratio) == 0x00004C, "Member 'FSkillHitInfo::_tough_damage_ratio' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _intensity_ratio) == 0x000050, "Member 'FSkillHitInfo::_intensity_ratio' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _groggy_damage_ratio) == 0x000054, "Member 'FSkillHitInfo::_groggy_damage_ratio' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _groggy_time_ratio) == 0x000058, "Member 'FSkillHitInfo::_groggy_time_ratio' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _guard_break_attack) == 0x00005C, "Member 'FSkillHitInfo::_guard_break_attack' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _guard_penetration_ratio) == 0x000060, "Member 'FSkillHitInfo::_guard_penetration_ratio' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _guard_stamina_damage_ratio) == 0x000064, "Member 'FSkillHitInfo::_guard_stamina_damage_ratio' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _attack_gain_frenzy_point_ratio) == 0x000068, "Member 'FSkillHitInfo::_attack_gain_frenzy_point_ratio' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _abnormalstate_moment_condition_group) == 0x00006C, "Member 'FSkillHitInfo::_abnormalstate_moment_condition_group' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _abnormal_state_code_name) == 0x000070, "Member 'FSkillHitInfo::_abnormal_state_code_name' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _abnormal_state_build_up_attack_ratio) == 0x000078, "Member 'FSkillHitInfo::_abnormal_state_build_up_attack_ratio' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _pulse_recharge_ratio) == 0x00007C, "Member 'FSkillHitInfo::_pulse_recharge_ratio' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _hostile_type) == 0x000080, "Member 'FSkillHitInfo::_hostile_type' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _ignore_pc) == 0x000081, "Member 'FSkillHitInfo::_ignore_pc' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _ignore_npc) == 0x000082, "Member 'FSkillHitInfo::_ignore_npc' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _ignore_dead) == 0x000083, "Member 'FSkillHitInfo::_ignore_dead' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _ignore_invincible) == 0x000084, "Member 'FSkillHitInfo::_ignore_invincible' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _ignore_dodge) == 0x000085, "Member 'FSkillHitInfo::_ignore_dodge' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _ignore_super_armor) == 0x000086, "Member 'FSkillHitInfo::_ignore_super_armor' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _ignore_guard) == 0x000087, "Member 'FSkillHitInfo::_ignore_guard' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _ignore_perfect_guard) == 0x000088, "Member 'FSkillHitInfo::_ignore_perfect_guard' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _ignore_parry) == 0x000089, "Member 'FSkillHitInfo::_ignore_parry' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _ignore_grabbed) == 0x00008A, "Member 'FSkillHitInfo::_ignore_grabbed' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _use_smash) == 0x00008B, "Member 'FSkillHitInfo::_use_smash' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _use_counter) == 0x00008C, "Member 'FSkillHitInfo::_use_counter' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _counter_change_skill_hit_code_name) == 0x000090, "Member 'FSkillHitInfo::_counter_change_skill_hit_code_name' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _use_hit_intencity) == 0x000098, "Member 'FSkillHitInfo::_use_hit_intencity' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _hit_intencity_down_skill_hit) == 0x00009C, "Member 'FSkillHitInfo::_hit_intencity_down_skill_hit' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _hit_material) == 0x0000A4, "Member 'FSkillHitInfo::_hit_material' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _hit_direction_type) == 0x0000A5, "Member 'FSkillHitInfo::_hit_direction_type' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _hit_fx_angle) == 0x0000A8, "Member 'FSkillHitInfo::_hit_fx_angle' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _groggy_change_skill_hit_code_name) == 0x0000AC, "Member 'FSkillHitInfo::_groggy_change_skill_hit_code_name' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _hit_motion_type) == 0x0000B4, "Member 'FSkillHitInfo::_hit_motion_type' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _hit_anim_duration) == 0x0000B8, "Member 'FSkillHitInfo::_hit_anim_duration' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _knockback_direction) == 0x0000BC, "Member 'FSkillHitInfo::_knockback_direction' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _knockback_duration) == 0x0000C0, "Member 'FSkillHitInfo::_knockback_duration' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _knockback_scale) == 0x0000C4, "Member 'FSkillHitInfo::_knockback_scale' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _knockback_distance) == 0x0000C8, "Member 'FSkillHitInfo::_knockback_distance' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _bound_height) == 0x0000CC, "Member 'FSkillHitInfo::_bound_height' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _bound_duration) == 0x0000D0, "Member 'FSkillHitInfo::_bound_duration' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _guard_attack_type) == 0x0000D4, "Member 'FSkillHitInfo::_guard_attack_type' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _guard_knockback_distance) == 0x0000D8, "Member 'FSkillHitInfo::_guard_knockback_distance' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _guard_knockback_duration) == 0x0000DC, "Member 'FSkillHitInfo::_guard_knockback_duration' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _stiffen_duration_attacker) == 0x0000E0, "Member 'FSkillHitInfo::_stiffen_duration_attacker' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _stiffen_playrate_attacker) == 0x0000E4, "Member 'FSkillHitInfo::_stiffen_playrate_attacker' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _stiffen_duration_defender) == 0x0000E8, "Member 'FSkillHitInfo::_stiffen_duration_defender' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _stiffen_playrate_defender) == 0x0000EC, "Member 'FSkillHitInfo::_stiffen_playrate_defender' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _trace_attack) == 0x0000F0, "Member 'FSkillHitInfo::_trace_attack' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _spark_start_socket) == 0x0000F4, "Member 'FSkillHitInfo::_spark_start_socket' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _spark_end_socket) == 0x0000FC, "Member 'FSkillHitInfo::_spark_end_socket' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _spark_col_radius) == 0x000104, "Member 'FSkillHitInfo::_spark_col_radius' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _ignore_repulse_guard) == 0x000108, "Member 'FSkillHitInfo::_ignore_repulse_guard' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _ignore_repulse_env) == 0x000109, "Member 'FSkillHitInfo::_ignore_repulse_env' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _ignore_repulse_hit) == 0x00010A, "Member 'FSkillHitInfo::_ignore_repulse_hit' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _repulse_direction) == 0x00010B, "Member 'FSkillHitInfo::_repulse_direction' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _repulse_duration) == 0x00010C, "Member 'FSkillHitInfo::_repulse_duration' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _repulse_start_socket) == 0x000110, "Member 'FSkillHitInfo::_repulse_start_socket' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _repulse_end_socket) == 0x000118, "Member 'FSkillHitInfo::_repulse_end_socket' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _repulse_col_radius) == 0x000120, "Member 'FSkillHitInfo::_repulse_col_radius' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _motion_type) == 0x000124, "Member 'FSkillHitInfo::_motion_type' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _decrease_enemy_weapon_durability) == 0x000128, "Member 'FSkillHitInfo::_decrease_enemy_weapon_durability' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _groggy_enable_hit_front) == 0x00012C, "Member 'FSkillHitInfo::_groggy_enable_hit_front' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _groggy_enable_hit_side) == 0x00012D, "Member 'FSkillHitInfo::_groggy_enable_hit_side' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _groggy_enable_hit_back) == 0x00012E, "Member 'FSkillHitInfo::_groggy_enable_hit_back' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _groggy_immediately_hit_front) == 0x00012F, "Member 'FSkillHitInfo::_groggy_immediately_hit_front' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _groggy_immediately_hit_side) == 0x000130, "Member 'FSkillHitInfo::_groggy_immediately_hit_side' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _groggy_immediately_hit_back) == 0x000131, "Member 'FSkillHitInfo::_groggy_immediately_hit_back' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _regainhp_make_ratio) == 0x000134, "Member 'FSkillHitInfo::_regainhp_make_ratio' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _regainhp_damage_ratio) == 0x000138, "Member 'FSkillHitInfo::_regainhp_damage_ratio' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _fury_attack) == 0x00013C, "Member 'FSkillHitInfo::_fury_attack' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _sharpness_reduce_value_ratio) == 0x000140, "Member 'FSkillHitInfo::_sharpness_reduce_value_ratio' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _guard_sharpness_durability_ratio) == 0x000144, "Member 'FSkillHitInfo::_guard_sharpness_durability_ratio' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _guard_hit_duration) == 0x000148, "Member 'FSkillHitInfo::_guard_hit_duration' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _hit_fx_level) == 0x00014C, "Member 'FSkillHitInfo::_hit_fx_level' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _enable_warningevent) == 0x00014D, "Member 'FSkillHitInfo::_enable_warningevent' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _enable_perfect_guard_groggy_damage) == 0x00014E, "Member 'FSkillHitInfo::_enable_perfect_guard_groggy_damage' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _explosive_kill_prob) == 0x000150, "Member 'FSkillHitInfo::_explosive_kill_prob' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _explosive_kill_direction) == 0x000154, "Member 'FSkillHitInfo::_explosive_kill_direction' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _exlplosive_kill_power) == 0x000155, "Member 'FSkillHitInfo::_exlplosive_kill_power' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _hit_camera_shake_code_name) == 0x000158, "Member 'FSkillHitInfo::_hit_camera_shake_code_name' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _enable_2d_sfx) == 0x000160, "Member 'FSkillHitInfo::_enable_2d_sfx' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _rigidity_ratio) == 0x000164, "Member 'FSkillHitInfo::_rigidity_ratio' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _hit_generate_prj_code_name) == 0x000168, "Member 'FSkillHitInfo::_hit_generate_prj_code_name' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _tough_recovery_delay_time_ratio) == 0x000170, "Member 'FSkillHitInfo::_tough_recovery_delay_time_ratio' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _guard_regain_increase_ratio) == 0x000174, "Member 'FSkillHitInfo::_guard_regain_increase_ratio' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _guard_regain_attack_heal_ratio) == 0x000178, "Member 'FSkillHitInfo::_guard_regain_attack_heal_ratio' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _guard_regain_damage_ratio) == 0x00017C, "Member 'FSkillHitInfo::_guard_regain_damage_ratio' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _weapon_attach_point_type) == 0x000180, "Member 'FSkillHitInfo::_weapon_attach_point_type' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _body_weapon_attach_point_type) == 0x000181, "Member 'FSkillHitInfo::_body_weapon_attach_point_type' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _perfect_guard_decrease_weapon_durability_rate) == 0x000184, "Member 'FSkillHitInfo::_perfect_guard_decrease_weapon_durability_rate' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _take_damage_ignore_warning) == 0x000188, "Member 'FSkillHitInfo::_take_damage_ignore_warning' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _counter_pre_hit) == 0x00018C, "Member 'FSkillHitInfo::_counter_pre_hit' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _counter_post_hit) == 0x000190, "Member 'FSkillHitInfo::_counter_post_hit' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _allow_360_guard) == 0x000194, "Member 'FSkillHitInfo::_allow_360_guard' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _hit_rotation_reverse) == 0x000195, "Member 'FSkillHitInfo::_hit_rotation_reverse' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _ignore_guard_fx) == 0x000196, "Member 'FSkillHitInfo::_ignore_guard_fx' has a wrong offset!");
static_assert(offsetof(FSkillHitInfo, _ignore_guard_sfx) == 0x000197, "Member 'FSkillHitInfo::_ignore_guard_sfx' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.SkillHitInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FSkillHitInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSkillHitInfo>                  _SkillHitInfo_array;                               // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillHitInfoDB) == 0x000008, "Wrong alignment on FSkillHitInfoDB");
static_assert(sizeof(FSkillHitInfoDB) == 0x0000A0, "Wrong size on FSkillHitInfoDB");
static_assert(offsetof(FSkillHitInfoDB, _SkillHitInfo_array) == 0x000078, "Member 'FSkillHitInfoDB::_SkillHitInfo_array' has a wrong offset!");
static_assert(offsetof(FSkillHitInfoDB, _version) == 0x000088, "Member 'FSkillHitInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FSkillHitInfoDB, _comment) == 0x000090, "Member 'FSkillHitInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.SkillHitInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSkillHitInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillHitInfoPtr) == 0x000008, "Wrong alignment on FSkillHitInfoPtr");
static_assert(sizeof(FSkillHitInfoPtr) == 0x000008, "Wrong size on FSkillHitInfoPtr");

// ScriptStruct ProjectPContentInfo.SkillIndicatorInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSkillIndicatorInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillIndicatorInfoPtr) == 0x000008, "Wrong alignment on FSkillIndicatorInfoPtr");
static_assert(sizeof(FSkillIndicatorInfoPtr) == 0x000008, "Wrong size on FSkillIndicatorInfoPtr");

// ScriptStruct ProjectPContentInfo.SkillMoveInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FSkillMoveInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSkillMoveInfo>                 _SkillMoveInfo_array;                              // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillMoveInfoDB) == 0x000008, "Wrong alignment on FSkillMoveInfoDB");
static_assert(sizeof(FSkillMoveInfoDB) == 0x0000A0, "Wrong size on FSkillMoveInfoDB");
static_assert(offsetof(FSkillMoveInfoDB, _SkillMoveInfo_array) == 0x000078, "Member 'FSkillMoveInfoDB::_SkillMoveInfo_array' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfoDB, _version) == 0x000088, "Member 'FSkillMoveInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FSkillMoveInfoDB, _comment) == 0x000090, "Member 'FSkillMoveInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.SkillMoveInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSkillMoveInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillMoveInfoPtr) == 0x000008, "Wrong alignment on FSkillMoveInfoPtr");
static_assert(sizeof(FSkillMoveInfoPtr) == 0x000008, "Wrong size on FSkillMoveInfoPtr");

// ScriptStruct ProjectPContentInfo.SlaveArmPageInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSlaveArmPageInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSlaveArmPageInfoPtr) == 0x000008, "Wrong alignment on FSlaveArmPageInfoPtr");
static_assert(sizeof(FSlaveArmPageInfoPtr) == 0x000008, "Wrong size on FSlaveArmPageInfoPtr");

// ScriptStruct ProjectPContentInfo.SlaveArmReinforcementInfo
// 0x0080 (0x00A8 - 0x0028)
struct FSlaveArmReinforcementInfo final : public FContentInfoBase
{
public:
	class FName                                   _reinforcement_name;                               // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _special_buff_section;                             // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _special_buff_code_name;                           // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _change_skill_code_name;                           // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _change_play_rate_section;                         // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _play_rate;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _section_to_change;                                // 0x0054(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _change_section;                                   // 0x005C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _hit_index_to_change;                              // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _change_hit_index;                                 // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _projectile_to_change;                             // 0x006C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _change_projectile;                                // 0x0074(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _variable_to_change;                               // 0x007C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _variable_value;                                   // 0x0084(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _slavearm_physical_attack_mod;                     // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _slavearm_acid_attack_mod;                         // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _slavearm_electric_attack_mod;                     // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _slavearm_fire_attack_mod;                         // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _consume_slave_magazine_mod;                       // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _additional_ammo_max;                              // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSlaveArmReinforcementInfo) == 0x000008, "Wrong alignment on FSlaveArmReinforcementInfo");
static_assert(sizeof(FSlaveArmReinforcementInfo) == 0x0000A8, "Wrong size on FSlaveArmReinforcementInfo");
static_assert(offsetof(FSlaveArmReinforcementInfo, _reinforcement_name) == 0x000028, "Member 'FSlaveArmReinforcementInfo::_reinforcement_name' has a wrong offset!");
static_assert(offsetof(FSlaveArmReinforcementInfo, _special_buff_section) == 0x000030, "Member 'FSlaveArmReinforcementInfo::_special_buff_section' has a wrong offset!");
static_assert(offsetof(FSlaveArmReinforcementInfo, _special_buff_code_name) == 0x000038, "Member 'FSlaveArmReinforcementInfo::_special_buff_code_name' has a wrong offset!");
static_assert(offsetof(FSlaveArmReinforcementInfo, _change_skill_code_name) == 0x000040, "Member 'FSlaveArmReinforcementInfo::_change_skill_code_name' has a wrong offset!");
static_assert(offsetof(FSlaveArmReinforcementInfo, _change_play_rate_section) == 0x000048, "Member 'FSlaveArmReinforcementInfo::_change_play_rate_section' has a wrong offset!");
static_assert(offsetof(FSlaveArmReinforcementInfo, _play_rate) == 0x000050, "Member 'FSlaveArmReinforcementInfo::_play_rate' has a wrong offset!");
static_assert(offsetof(FSlaveArmReinforcementInfo, _section_to_change) == 0x000054, "Member 'FSlaveArmReinforcementInfo::_section_to_change' has a wrong offset!");
static_assert(offsetof(FSlaveArmReinforcementInfo, _change_section) == 0x00005C, "Member 'FSlaveArmReinforcementInfo::_change_section' has a wrong offset!");
static_assert(offsetof(FSlaveArmReinforcementInfo, _hit_index_to_change) == 0x000064, "Member 'FSlaveArmReinforcementInfo::_hit_index_to_change' has a wrong offset!");
static_assert(offsetof(FSlaveArmReinforcementInfo, _change_hit_index) == 0x000068, "Member 'FSlaveArmReinforcementInfo::_change_hit_index' has a wrong offset!");
static_assert(offsetof(FSlaveArmReinforcementInfo, _projectile_to_change) == 0x00006C, "Member 'FSlaveArmReinforcementInfo::_projectile_to_change' has a wrong offset!");
static_assert(offsetof(FSlaveArmReinforcementInfo, _change_projectile) == 0x000074, "Member 'FSlaveArmReinforcementInfo::_change_projectile' has a wrong offset!");
static_assert(offsetof(FSlaveArmReinforcementInfo, _variable_to_change) == 0x00007C, "Member 'FSlaveArmReinforcementInfo::_variable_to_change' has a wrong offset!");
static_assert(offsetof(FSlaveArmReinforcementInfo, _variable_value) == 0x000084, "Member 'FSlaveArmReinforcementInfo::_variable_value' has a wrong offset!");
static_assert(offsetof(FSlaveArmReinforcementInfo, _slavearm_physical_attack_mod) == 0x00008C, "Member 'FSlaveArmReinforcementInfo::_slavearm_physical_attack_mod' has a wrong offset!");
static_assert(offsetof(FSlaveArmReinforcementInfo, _slavearm_acid_attack_mod) == 0x000090, "Member 'FSlaveArmReinforcementInfo::_slavearm_acid_attack_mod' has a wrong offset!");
static_assert(offsetof(FSlaveArmReinforcementInfo, _slavearm_electric_attack_mod) == 0x000094, "Member 'FSlaveArmReinforcementInfo::_slavearm_electric_attack_mod' has a wrong offset!");
static_assert(offsetof(FSlaveArmReinforcementInfo, _slavearm_fire_attack_mod) == 0x000098, "Member 'FSlaveArmReinforcementInfo::_slavearm_fire_attack_mod' has a wrong offset!");
static_assert(offsetof(FSlaveArmReinforcementInfo, _consume_slave_magazine_mod) == 0x00009C, "Member 'FSlaveArmReinforcementInfo::_consume_slave_magazine_mod' has a wrong offset!");
static_assert(offsetof(FSlaveArmReinforcementInfo, _additional_ammo_max) == 0x0000A0, "Member 'FSlaveArmReinforcementInfo::_additional_ammo_max' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.SlaveArmReinforcementInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FSlaveArmReinforcementInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FSlaveArmReinforcementInfo>     _SlaveArmReinforcementInfo_array;                  // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSlaveArmReinforcementInfoDB) == 0x000008, "Wrong alignment on FSlaveArmReinforcementInfoDB");
static_assert(sizeof(FSlaveArmReinforcementInfoDB) == 0x000050, "Wrong size on FSlaveArmReinforcementInfoDB");
static_assert(offsetof(FSlaveArmReinforcementInfoDB, _SlaveArmReinforcementInfo_array) == 0x000028, "Member 'FSlaveArmReinforcementInfoDB::_SlaveArmReinforcementInfo_array' has a wrong offset!");
static_assert(offsetof(FSlaveArmReinforcementInfoDB, _version) == 0x000038, "Member 'FSlaveArmReinforcementInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FSlaveArmReinforcementInfoDB, _comment) == 0x000040, "Member 'FSlaveArmReinforcementInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.SlaveArmReinforcementInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSlaveArmReinforcementInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSlaveArmReinforcementInfoPtr) == 0x000008, "Wrong alignment on FSlaveArmReinforcementInfoPtr");
static_assert(sizeof(FSlaveArmReinforcementInfoPtr) == 0x000008, "Wrong size on FSlaveArmReinforcementInfoPtr");

// ScriptStruct ProjectPContentInfo.SlaveArmTreeInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FSlaveArmTreeInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSlaveArmTreeInfo>              _SlaveArmTreeInfo_array;                           // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSlaveArmTreeInfoDB) == 0x000008, "Wrong alignment on FSlaveArmTreeInfoDB");
static_assert(sizeof(FSlaveArmTreeInfoDB) == 0x0000A0, "Wrong size on FSlaveArmTreeInfoDB");
static_assert(offsetof(FSlaveArmTreeInfoDB, _SlaveArmTreeInfo_array) == 0x000078, "Member 'FSlaveArmTreeInfoDB::_SlaveArmTreeInfo_array' has a wrong offset!");
static_assert(offsetof(FSlaveArmTreeInfoDB, _version) == 0x000088, "Member 'FSlaveArmTreeInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FSlaveArmTreeInfoDB, _comment) == 0x000090, "Member 'FSlaveArmTreeInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.SlaveArmTreeInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSlaveArmTreeInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSlaveArmTreeInfoPtr) == 0x000008, "Wrong alignment on FSlaveArmTreeInfoPtr");
static_assert(sizeof(FSlaveArmTreeInfoPtr) == 0x000008, "Wrong size on FSlaveArmTreeInfoPtr");

// ScriptStruct ProjectPContentInfo.SpecialBuffInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSpecialBuffInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpecialBuffInfoPtr) == 0x000008, "Wrong alignment on FSpecialBuffInfoPtr");
static_assert(sizeof(FSpecialBuffInfoPtr) == 0x000008, "Wrong size on FSpecialBuffInfoPtr");

// ScriptStruct ProjectPContentInfo.SubLevelOnOffInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FSubLevelOnOffInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FSubLevelOnOffInfo>             _SubLevelOnOffInfo_array;                          // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubLevelOnOffInfoDB) == 0x000008, "Wrong alignment on FSubLevelOnOffInfoDB");
static_assert(sizeof(FSubLevelOnOffInfoDB) == 0x000050, "Wrong size on FSubLevelOnOffInfoDB");
static_assert(offsetof(FSubLevelOnOffInfoDB, _SubLevelOnOffInfo_array) == 0x000028, "Member 'FSubLevelOnOffInfoDB::_SubLevelOnOffInfo_array' has a wrong offset!");
static_assert(offsetof(FSubLevelOnOffInfoDB, _version) == 0x000038, "Member 'FSubLevelOnOffInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FSubLevelOnOffInfoDB, _comment) == 0x000040, "Member 'FSubLevelOnOffInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.SubtitleInfo
// 0x0018 (0x0040 - 0x0028)
struct FSubtitleInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _text_code_name;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _start_time;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _duration;                                         // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubtitleInfo) == 0x000008, "Wrong alignment on FSubtitleInfo");
static_assert(sizeof(FSubtitleInfo) == 0x000040, "Wrong size on FSubtitleInfo");
static_assert(offsetof(FSubtitleInfo, _code_name) == 0x000028, "Member 'FSubtitleInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FSubtitleInfo, _text_code_name) == 0x000030, "Member 'FSubtitleInfo::_text_code_name' has a wrong offset!");
static_assert(offsetof(FSubtitleInfo, _start_time) == 0x000038, "Member 'FSubtitleInfo::_start_time' has a wrong offset!");
static_assert(offsetof(FSubtitleInfo, _duration) == 0x00003C, "Member 'FSubtitleInfo::_duration' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.SubtitleInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FSubtitleInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FSubtitleInfo>                  _Subtitle_array;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubtitleInfoDB) == 0x000008, "Wrong alignment on FSubtitleInfoDB");
static_assert(sizeof(FSubtitleInfoDB) == 0x000050, "Wrong size on FSubtitleInfoDB");
static_assert(offsetof(FSubtitleInfoDB, _Subtitle_array) == 0x000028, "Member 'FSubtitleInfoDB::_Subtitle_array' has a wrong offset!");
static_assert(offsetof(FSubtitleInfoDB, _version) == 0x000038, "Member 'FSubtitleInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FSubtitleInfoDB, _comment) == 0x000040, "Member 'FSubtitleInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.TeleportObjectInfo
// 0x00E8 (0x0110 - 0x0028)
struct FTeleportObjectInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_name;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_name_cn;                               // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTeleportType                                _teleport_type;                                    // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELStargazerType                               _stargazer_type;                                   // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _Prob;                                             // 0x004C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _location_code_name;                               // 0x0054(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _location_hidden_condition;                        // 0x005C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _talker_code_name;                                 // 0x0064(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 _loading_image;                                    // 0x0070(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _torsioncoil_activate;                             // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _torsioncoil_set;                                  // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _torsioncoil_category;                             // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _potral_condition;                                 // 0x00A4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _condition_fail_msg;                               // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _condition_fail_msg_cn;                            // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _exit_portal;                                      // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _portal_sequence_departure;                        // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _command_departure;                                // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _portal_sequence_arrival;                          // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _command_arrival;                                  // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _loading_charpter;                                 // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _portal_location_visible;                          // 0x0100(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _condition_location_visible;                       // 0x0104(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTeleportObjectInfo) == 0x000008, "Wrong alignment on FTeleportObjectInfo");
static_assert(sizeof(FTeleportObjectInfo) == 0x000110, "Wrong size on FTeleportObjectInfo");
static_assert(offsetof(FTeleportObjectInfo, _code_name) == 0x000028, "Member 'FTeleportObjectInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FTeleportObjectInfo, _local_text_name) == 0x000030, "Member 'FTeleportObjectInfo::_local_text_name' has a wrong offset!");
static_assert(offsetof(FTeleportObjectInfo, _local_text_name_cn) == 0x000040, "Member 'FTeleportObjectInfo::_local_text_name_cn' has a wrong offset!");
static_assert(offsetof(FTeleportObjectInfo, _teleport_type) == 0x000048, "Member 'FTeleportObjectInfo::_teleport_type' has a wrong offset!");
static_assert(offsetof(FTeleportObjectInfo, _stargazer_type) == 0x000049, "Member 'FTeleportObjectInfo::_stargazer_type' has a wrong offset!");
static_assert(offsetof(FTeleportObjectInfo, _Prob) == 0x00004C, "Member 'FTeleportObjectInfo::_Prob' has a wrong offset!");
static_assert(offsetof(FTeleportObjectInfo, _location_code_name) == 0x000054, "Member 'FTeleportObjectInfo::_location_code_name' has a wrong offset!");
static_assert(offsetof(FTeleportObjectInfo, _location_hidden_condition) == 0x00005C, "Member 'FTeleportObjectInfo::_location_hidden_condition' has a wrong offset!");
static_assert(offsetof(FTeleportObjectInfo, _talker_code_name) == 0x000064, "Member 'FTeleportObjectInfo::_talker_code_name' has a wrong offset!");
static_assert(offsetof(FTeleportObjectInfo, _loading_image) == 0x000070, "Member 'FTeleportObjectInfo::_loading_image' has a wrong offset!");
static_assert(offsetof(FTeleportObjectInfo, _torsioncoil_activate) == 0x000098, "Member 'FTeleportObjectInfo::_torsioncoil_activate' has a wrong offset!");
static_assert(offsetof(FTeleportObjectInfo, _torsioncoil_set) == 0x00009C, "Member 'FTeleportObjectInfo::_torsioncoil_set' has a wrong offset!");
static_assert(offsetof(FTeleportObjectInfo, _torsioncoil_category) == 0x0000A0, "Member 'FTeleportObjectInfo::_torsioncoil_category' has a wrong offset!");
static_assert(offsetof(FTeleportObjectInfo, _potral_condition) == 0x0000A4, "Member 'FTeleportObjectInfo::_potral_condition' has a wrong offset!");
static_assert(offsetof(FTeleportObjectInfo, _condition_fail_msg) == 0x0000B0, "Member 'FTeleportObjectInfo::_condition_fail_msg' has a wrong offset!");
static_assert(offsetof(FTeleportObjectInfo, _condition_fail_msg_cn) == 0x0000C0, "Member 'FTeleportObjectInfo::_condition_fail_msg_cn' has a wrong offset!");
static_assert(offsetof(FTeleportObjectInfo, _exit_portal) == 0x0000C8, "Member 'FTeleportObjectInfo::_exit_portal' has a wrong offset!");
static_assert(offsetof(FTeleportObjectInfo, _portal_sequence_departure) == 0x0000D0, "Member 'FTeleportObjectInfo::_portal_sequence_departure' has a wrong offset!");
static_assert(offsetof(FTeleportObjectInfo, _command_departure) == 0x0000D8, "Member 'FTeleportObjectInfo::_command_departure' has a wrong offset!");
static_assert(offsetof(FTeleportObjectInfo, _portal_sequence_arrival) == 0x0000E0, "Member 'FTeleportObjectInfo::_portal_sequence_arrival' has a wrong offset!");
static_assert(offsetof(FTeleportObjectInfo, _command_arrival) == 0x0000E8, "Member 'FTeleportObjectInfo::_command_arrival' has a wrong offset!");
static_assert(offsetof(FTeleportObjectInfo, _loading_charpter) == 0x0000F0, "Member 'FTeleportObjectInfo::_loading_charpter' has a wrong offset!");
static_assert(offsetof(FTeleportObjectInfo, _portal_location_visible) == 0x000100, "Member 'FTeleportObjectInfo::_portal_location_visible' has a wrong offset!");
static_assert(offsetof(FTeleportObjectInfo, _condition_location_visible) == 0x000104, "Member 'FTeleportObjectInfo::_condition_location_visible' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.TeleportObjectInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FTeleportObjectInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTeleportObjectInfo>            _TeleportObject_array;                             // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeleportObjectInfoDB) == 0x000008, "Wrong alignment on FTeleportObjectInfoDB");
static_assert(sizeof(FTeleportObjectInfoDB) == 0x0000A0, "Wrong size on FTeleportObjectInfoDB");
static_assert(offsetof(FTeleportObjectInfoDB, _TeleportObject_array) == 0x000078, "Member 'FTeleportObjectInfoDB::_TeleportObject_array' has a wrong offset!");
static_assert(offsetof(FTeleportObjectInfoDB, _version) == 0x000088, "Member 'FTeleportObjectInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FTeleportObjectInfoDB, _comment) == 0x000090, "Member 'FTeleportObjectInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.TeleportObjectInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FTeleportObjectInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTeleportObjectInfoPtr) == 0x000008, "Wrong alignment on FTeleportObjectInfoPtr");
static_assert(sizeof(FTeleportObjectInfoPtr) == 0x000008, "Wrong size on FTeleportObjectInfoPtr");

// ScriptStruct ProjectPContentInfo.TutorialInfo
// 0x0100 (0x0128 - 0x0028)
struct FTutorialInfo final : public FContentInfoBase
{
public:
	TArray<struct FGeneralCallBackEventInfo>      _start_trigger_array;                              // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FGeneralConditionInfo>          _start_condition_array;                            // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FGeneralConditionInfo>          _start_condition_or_array;                         // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FGeneralCallBackEventInfo>      _end_trigger_array;                                // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FGeneralCallBackEventInfo>      _play_count_assign_trigger_array;                  // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FName                                   _code_name;                                        // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _step;                                             // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _start_delay_time;                                 // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTutorialWidgetType                          _widget_type;                                      // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _widget_time;                                      // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _open_ui;                                          // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _game_pause;                                       // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _default_cooltime_applied;                         // 0x0099(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _precedent_tutorial;                               // 0x009C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _priority;                                         // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _priority_pending;                                 // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _play_count;                                       // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _play_count_cooltime;                              // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _cooltime_group;                                   // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTutorialPlayCountAssignType                 _play_count_assign;                                // 0x00B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _list_on;                                          // 0x00B9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x2];                                       // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _list_index;                                       // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTutorialListOnConditionType                 _list_on_condition;                                // 0x00C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _battle_pending;                                   // 0x00C1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _local_text_title;                                 // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_title_cn;                              // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _image;                                            // 0x00E0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _local_text_description;                           // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _local_text_description_cn;                        // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _after_command_exec;                               // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTutorialInfo) == 0x000008, "Wrong alignment on FTutorialInfo");
static_assert(sizeof(FTutorialInfo) == 0x000128, "Wrong size on FTutorialInfo");
static_assert(offsetof(FTutorialInfo, _start_trigger_array) == 0x000028, "Member 'FTutorialInfo::_start_trigger_array' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _start_condition_array) == 0x000038, "Member 'FTutorialInfo::_start_condition_array' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _start_condition_or_array) == 0x000048, "Member 'FTutorialInfo::_start_condition_or_array' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _end_trigger_array) == 0x000058, "Member 'FTutorialInfo::_end_trigger_array' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _play_count_assign_trigger_array) == 0x000068, "Member 'FTutorialInfo::_play_count_assign_trigger_array' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _code_name) == 0x000078, "Member 'FTutorialInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _step) == 0x000080, "Member 'FTutorialInfo::_step' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _start_delay_time) == 0x000084, "Member 'FTutorialInfo::_start_delay_time' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _widget_type) == 0x000088, "Member 'FTutorialInfo::_widget_type' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _widget_time) == 0x00008C, "Member 'FTutorialInfo::_widget_time' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _open_ui) == 0x000090, "Member 'FTutorialInfo::_open_ui' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _game_pause) == 0x000098, "Member 'FTutorialInfo::_game_pause' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _default_cooltime_applied) == 0x000099, "Member 'FTutorialInfo::_default_cooltime_applied' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _precedent_tutorial) == 0x00009C, "Member 'FTutorialInfo::_precedent_tutorial' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _priority) == 0x0000A4, "Member 'FTutorialInfo::_priority' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _priority_pending) == 0x0000A8, "Member 'FTutorialInfo::_priority_pending' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _play_count) == 0x0000AC, "Member 'FTutorialInfo::_play_count' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _play_count_cooltime) == 0x0000B0, "Member 'FTutorialInfo::_play_count_cooltime' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _cooltime_group) == 0x0000B4, "Member 'FTutorialInfo::_cooltime_group' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _play_count_assign) == 0x0000B8, "Member 'FTutorialInfo::_play_count_assign' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _list_on) == 0x0000B9, "Member 'FTutorialInfo::_list_on' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _list_index) == 0x0000BC, "Member 'FTutorialInfo::_list_index' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _list_on_condition) == 0x0000C0, "Member 'FTutorialInfo::_list_on_condition' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _battle_pending) == 0x0000C1, "Member 'FTutorialInfo::_battle_pending' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _local_text_title) == 0x0000C8, "Member 'FTutorialInfo::_local_text_title' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _local_text_title_cn) == 0x0000D8, "Member 'FTutorialInfo::_local_text_title_cn' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _image) == 0x0000E0, "Member 'FTutorialInfo::_image' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _local_text_description) == 0x000108, "Member 'FTutorialInfo::_local_text_description' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _local_text_description_cn) == 0x000118, "Member 'FTutorialInfo::_local_text_description_cn' has a wrong offset!");
static_assert(offsetof(FTutorialInfo, _after_command_exec) == 0x000120, "Member 'FTutorialInfo::_after_command_exec' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.TutorialInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FTutorialInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FTutorialInfo>                  _Tutorial_array;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTutorialInfoDB) == 0x000008, "Wrong alignment on FTutorialInfoDB");
static_assert(sizeof(FTutorialInfoDB) == 0x000050, "Wrong size on FTutorialInfoDB");
static_assert(offsetof(FTutorialInfoDB, _Tutorial_array) == 0x000028, "Member 'FTutorialInfoDB::_Tutorial_array' has a wrong offset!");
static_assert(offsetof(FTutorialInfoDB, _version) == 0x000038, "Member 'FTutorialInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FTutorialInfoDB, _comment) == 0x000040, "Member 'FTutorialInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.WeaponAnimStateInfo
// 0x0008 (0x0030 - 0x0028)
struct FWeaponAnimStateInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponAnimStateInfo) == 0x000008, "Wrong alignment on FWeaponAnimStateInfo");
static_assert(sizeof(FWeaponAnimStateInfo) == 0x000030, "Wrong size on FWeaponAnimStateInfo");
static_assert(offsetof(FWeaponAnimStateInfo, _code_name) == 0x000028, "Member 'FWeaponAnimStateInfo::_code_name' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.WeaponInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FWeaponInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWeaponAnimStateInfo>           _WeaponAnimStateInfo_array;                        // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponInfoDB) == 0x000008, "Wrong alignment on FWeaponInfoDB");
static_assert(sizeof(FWeaponInfoDB) == 0x0000A0, "Wrong size on FWeaponInfoDB");
static_assert(offsetof(FWeaponInfoDB, _WeaponAnimStateInfo_array) == 0x000078, "Member 'FWeaponInfoDB::_WeaponAnimStateInfo_array' has a wrong offset!");
static_assert(offsetof(FWeaponInfoDB, _version) == 0x000088, "Member 'FWeaponInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FWeaponInfoDB, _comment) == 0x000090, "Member 'FWeaponInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.WeaponAnimStateInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FWeaponAnimStateInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponAnimStateInfoPtr) == 0x000008, "Wrong alignment on FWeaponAnimStateInfoPtr");
static_assert(sizeof(FWeaponAnimStateInfoPtr) == 0x000008, "Wrong size on FWeaponAnimStateInfoPtr");

// ScriptStruct ProjectPContentInfo.WeatherChangeEventInfo
// 0x0028 (0x0050 - 0x0028)
struct FWeatherChangeEventInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _prev_weather;                                     // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _next_weather;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _move_persistent_level;                            // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _change_condition;                                 // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeatherChangeEventInfo) == 0x000008, "Wrong alignment on FWeatherChangeEventInfo");
static_assert(sizeof(FWeatherChangeEventInfo) == 0x000050, "Wrong size on FWeatherChangeEventInfo");
static_assert(offsetof(FWeatherChangeEventInfo, _code_name) == 0x000028, "Member 'FWeatherChangeEventInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FWeatherChangeEventInfo, _prev_weather) == 0x000030, "Member 'FWeatherChangeEventInfo::_prev_weather' has a wrong offset!");
static_assert(offsetof(FWeatherChangeEventInfo, _next_weather) == 0x000038, "Member 'FWeatherChangeEventInfo::_next_weather' has a wrong offset!");
static_assert(offsetof(FWeatherChangeEventInfo, _move_persistent_level) == 0x000040, "Member 'FWeatherChangeEventInfo::_move_persistent_level' has a wrong offset!");
static_assert(offsetof(FWeatherChangeEventInfo, _change_condition) == 0x000048, "Member 'FWeatherChangeEventInfo::_change_condition' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.WeatherInfoDB
// 0x00D8 (0x0100 - 0x0028)
struct FWeatherInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWeatherInfo>                   _Weather_array;                                    // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x50];                                      // 0x0088(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWeatherChangeEventInfo>        _WeatherChangeEvent_array;                         // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeatherInfoDB) == 0x000008, "Wrong alignment on FWeatherInfoDB");
static_assert(sizeof(FWeatherInfoDB) == 0x000100, "Wrong size on FWeatherInfoDB");
static_assert(offsetof(FWeatherInfoDB, _Weather_array) == 0x000078, "Member 'FWeatherInfoDB::_Weather_array' has a wrong offset!");
static_assert(offsetof(FWeatherInfoDB, _WeatherChangeEvent_array) == 0x0000D8, "Member 'FWeatherInfoDB::_WeatherChangeEvent_array' has a wrong offset!");
static_assert(offsetof(FWeatherInfoDB, _version) == 0x0000E8, "Member 'FWeatherInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FWeatherInfoDB, _comment) == 0x0000F0, "Member 'FWeatherInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.WeatherChangeEventInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FWeatherChangeEventInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeatherChangeEventInfoPtr) == 0x000008, "Wrong alignment on FWeatherChangeEventInfoPtr");
static_assert(sizeof(FWeatherChangeEventInfoPtr) == 0x000008, "Wrong size on FWeatherChangeEventInfoPtr");

// ScriptStruct ProjectPContentInfo.WeightPenaltyInfo
// 0x0048 (0x0070 - 0x0028)
struct FWeightPenaltyInfo final : public FContentInfoBase
{
public:
	class FName                                   _index;                                            // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _group_code_name;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _weight_rate_upper;                                // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _panalty_abnormalstate;                            // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _advantage_abnormalstate;                          // 0x0044(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _walk_speed_front;                                 // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _walk_speed_side;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _walk_speed_back;                                  // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _run_speed_front;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _run_speed_side;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _run_speed_back;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _sprint_speed;                                     // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _waring_msg;                                       // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeightPenaltyInfo) == 0x000008, "Wrong alignment on FWeightPenaltyInfo");
static_assert(sizeof(FWeightPenaltyInfo) == 0x000070, "Wrong size on FWeightPenaltyInfo");
static_assert(offsetof(FWeightPenaltyInfo, _index) == 0x000028, "Member 'FWeightPenaltyInfo::_index' has a wrong offset!");
static_assert(offsetof(FWeightPenaltyInfo, _group_code_name) == 0x000030, "Member 'FWeightPenaltyInfo::_group_code_name' has a wrong offset!");
static_assert(offsetof(FWeightPenaltyInfo, _weight_rate_upper) == 0x000038, "Member 'FWeightPenaltyInfo::_weight_rate_upper' has a wrong offset!");
static_assert(offsetof(FWeightPenaltyInfo, _panalty_abnormalstate) == 0x00003C, "Member 'FWeightPenaltyInfo::_panalty_abnormalstate' has a wrong offset!");
static_assert(offsetof(FWeightPenaltyInfo, _advantage_abnormalstate) == 0x000044, "Member 'FWeightPenaltyInfo::_advantage_abnormalstate' has a wrong offset!");
static_assert(offsetof(FWeightPenaltyInfo, _walk_speed_front) == 0x00004C, "Member 'FWeightPenaltyInfo::_walk_speed_front' has a wrong offset!");
static_assert(offsetof(FWeightPenaltyInfo, _walk_speed_side) == 0x000050, "Member 'FWeightPenaltyInfo::_walk_speed_side' has a wrong offset!");
static_assert(offsetof(FWeightPenaltyInfo, _walk_speed_back) == 0x000054, "Member 'FWeightPenaltyInfo::_walk_speed_back' has a wrong offset!");
static_assert(offsetof(FWeightPenaltyInfo, _run_speed_front) == 0x000058, "Member 'FWeightPenaltyInfo::_run_speed_front' has a wrong offset!");
static_assert(offsetof(FWeightPenaltyInfo, _run_speed_side) == 0x00005C, "Member 'FWeightPenaltyInfo::_run_speed_side' has a wrong offset!");
static_assert(offsetof(FWeightPenaltyInfo, _run_speed_back) == 0x000060, "Member 'FWeightPenaltyInfo::_run_speed_back' has a wrong offset!");
static_assert(offsetof(FWeightPenaltyInfo, _sprint_speed) == 0x000064, "Member 'FWeightPenaltyInfo::_sprint_speed' has a wrong offset!");
static_assert(offsetof(FWeightPenaltyInfo, _waring_msg) == 0x000068, "Member 'FWeightPenaltyInfo::_waring_msg' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.WeightPenaltyInfoDB
// 0x0028 (0x0050 - 0x0028)
struct FWeightPenaltyInfoDB final : public FContentInfoBase
{
public:
	TArray<struct FWeightPenaltyInfo>             _WeightPenaltyInfo_array;                          // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeightPenaltyInfoDB) == 0x000008, "Wrong alignment on FWeightPenaltyInfoDB");
static_assert(sizeof(FWeightPenaltyInfoDB) == 0x000050, "Wrong size on FWeightPenaltyInfoDB");
static_assert(offsetof(FWeightPenaltyInfoDB, _WeightPenaltyInfo_array) == 0x000028, "Member 'FWeightPenaltyInfoDB::_WeightPenaltyInfo_array' has a wrong offset!");
static_assert(offsetof(FWeightPenaltyInfoDB, _version) == 0x000038, "Member 'FWeightPenaltyInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FWeightPenaltyInfoDB, _comment) == 0x000040, "Member 'FWeightPenaltyInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.WeightPenaltyInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FWeightPenaltyInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeightPenaltyInfoPtr) == 0x000008, "Wrong alignment on FWeightPenaltyInfoPtr");
static_assert(sizeof(FWeightPenaltyInfoPtr) == 0x000008, "Wrong size on FWeightPenaltyInfoPtr");

// ScriptStruct ProjectPContentInfo.DefaultPCWorldEventListInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FDefaultPCWorldEventListInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDefaultPCWorldEventListInfoPtr) == 0x000008, "Wrong alignment on FDefaultPCWorldEventListInfoPtr");
static_assert(sizeof(FDefaultPCWorldEventListInfoPtr) == 0x000008, "Wrong size on FDefaultPCWorldEventListInfoPtr");

// ScriptStruct ProjectPContentInfo.WorldRuleInfo
// 0x0010 (0x0038 - 0x0028)
struct FWorldRuleInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _tough_constant;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _tough_restore_stop_time;                          // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldRuleInfo) == 0x000008, "Wrong alignment on FWorldRuleInfo");
static_assert(sizeof(FWorldRuleInfo) == 0x000038, "Wrong size on FWorldRuleInfo");
static_assert(offsetof(FWorldRuleInfo, _code_name) == 0x000028, "Member 'FWorldRuleInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FWorldRuleInfo, _tough_constant) == 0x000030, "Member 'FWorldRuleInfo::_tough_constant' has a wrong offset!");
static_assert(offsetof(FWorldRuleInfo, _tough_restore_stop_time) == 0x000034, "Member 'FWorldRuleInfo::_tough_restore_stop_time' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.WorldRuleInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FWorldRuleInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWorldRuleInfo>                 _WorldRuleInfo_array;                              // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldRuleInfoDB) == 0x000008, "Wrong alignment on FWorldRuleInfoDB");
static_assert(sizeof(FWorldRuleInfoDB) == 0x0000A0, "Wrong size on FWorldRuleInfoDB");
static_assert(offsetof(FWorldRuleInfoDB, _WorldRuleInfo_array) == 0x000078, "Member 'FWorldRuleInfoDB::_WorldRuleInfo_array' has a wrong offset!");
static_assert(offsetof(FWorldRuleInfoDB, _version) == 0x000088, "Member 'FWorldRuleInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FWorldRuleInfoDB, _comment) == 0x000090, "Member 'FWorldRuleInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.WorldZoneInfo
// 0x0018 (0x0040 - 0x0028)
struct FWorldZoneInfo final : public FContentInfoBase
{
public:
	class FName                                   _code_name;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _light_scenario_am;                                // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _light_scenario_pm;                                // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldZoneInfo) == 0x000008, "Wrong alignment on FWorldZoneInfo");
static_assert(sizeof(FWorldZoneInfo) == 0x000040, "Wrong size on FWorldZoneInfo");
static_assert(offsetof(FWorldZoneInfo, _code_name) == 0x000028, "Member 'FWorldZoneInfo::_code_name' has a wrong offset!");
static_assert(offsetof(FWorldZoneInfo, _light_scenario_am) == 0x000030, "Member 'FWorldZoneInfo::_light_scenario_am' has a wrong offset!");
static_assert(offsetof(FWorldZoneInfo, _light_scenario_pm) == 0x000038, "Member 'FWorldZoneInfo::_light_scenario_pm' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.WorldZoneInfoDB
// 0x0078 (0x00A0 - 0x0028)
struct FWorldZoneInfoDB final : public FContentInfoBase
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWorldZoneInfo>                 _WorldZone_array;                                  // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         _version;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _comment;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldZoneInfoDB) == 0x000008, "Wrong alignment on FWorldZoneInfoDB");
static_assert(sizeof(FWorldZoneInfoDB) == 0x0000A0, "Wrong size on FWorldZoneInfoDB");
static_assert(offsetof(FWorldZoneInfoDB, _WorldZone_array) == 0x000078, "Member 'FWorldZoneInfoDB::_WorldZone_array' has a wrong offset!");
static_assert(offsetof(FWorldZoneInfoDB, _version) == 0x000088, "Member 'FWorldZoneInfoDB::_version' has a wrong offset!");
static_assert(offsetof(FWorldZoneInfoDB, _comment) == 0x000090, "Member 'FWorldZoneInfoDB::_comment' has a wrong offset!");

// ScriptStruct ProjectPContentInfo.WorldZoneInfoPtr
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FWorldZoneInfoPtr final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWorldZoneInfoPtr) == 0x000008, "Wrong alignment on FWorldZoneInfoPtr");
static_assert(sizeof(FWorldZoneInfoPtr) == 0x000008, "Wrong size on FWorldZoneInfoPtr");

}

