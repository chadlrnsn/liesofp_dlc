#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTask_Int_Set

#include "Basic.hpp"

#include "EN_INT_OperatorSet_structs.hpp"
#include "ProjectP_classes.hpp"
#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTask_Int_Set.BTask_Int_Set_C
// 0x0038 (0x00E8 - 0x00B0)
class UBTask_Int_Set_C final : public ULBTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 BKey;                                              // 0x00B8(0x0028)(Edit, BlueprintVisible)
	EN_INT_OperatorSet                            Operator;                                          // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTask_Int_Set(int32 EntryPoint);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTask_Int_Set_C">();
	}
	static class UBTask_Int_Set_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTask_Int_Set_C>();
	}
};
static_assert(alignof(UBTask_Int_Set_C) == 0x000008, "Wrong alignment on UBTask_Int_Set_C");
static_assert(sizeof(UBTask_Int_Set_C) == 0x0000E8, "Wrong size on UBTask_Int_Set_C");
static_assert(offsetof(UBTask_Int_Set_C, UberGraphFrame) == 0x0000B0, "Member 'UBTask_Int_Set_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTask_Int_Set_C, BKey) == 0x0000B8, "Member 'UBTask_Int_Set_C::BKey' has a wrong offset!");
static_assert(offsetof(UBTask_Int_Set_C, Operator) == 0x0000E0, "Member 'UBTask_Int_Set_C::Operator' has a wrong offset!");
static_assert(offsetof(UBTask_Int_Set_C, Value) == 0x0000E4, "Member 'UBTask_Int_Set_C::Value' has a wrong offset!");

}

