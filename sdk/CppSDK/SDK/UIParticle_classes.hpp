#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UIParticle

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "UIParticle_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class UIParticle.UIParticle
// 0x0030 (0x0140 - 0x0110)
class UUIParticle final : public UWidget
{
public:
	class UUIParticleAsset*                       Asset;                                             // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             EventOnEnd;                                        // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         bPlayParticle : 1;                                 // 0x0128(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          IsPlaying;                                         // 0x0129(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A[0x16];                                     // 0x012A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Play();
	void SetPlayParticle(bool InPlayParticle);
	void Stop();
	void StopEmit();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIParticle">();
	}
	static class UUIParticle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIParticle>();
	}
};
static_assert(alignof(UUIParticle) == 0x000008, "Wrong alignment on UUIParticle");
static_assert(sizeof(UUIParticle) == 0x000140, "Wrong size on UUIParticle");
static_assert(offsetof(UUIParticle, Asset) == 0x000110, "Member 'UUIParticle::Asset' has a wrong offset!");
static_assert(offsetof(UUIParticle, EventOnEnd) == 0x000118, "Member 'UUIParticle::EventOnEnd' has a wrong offset!");
static_assert(offsetof(UUIParticle, IsPlaying) == 0x000129, "Member 'UUIParticle::IsPlaying' has a wrong offset!");

// Class UIParticle.UIParticleAsset
// 0x0018 (0x0040 - 0x0028)
class UUIParticleAsset final : public UObject
{
public:
	bool                                          AutoPlay;                                          // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FUIParticleEmitterInfo>         Emitters;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIParticleAsset">();
	}
	static class UUIParticleAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIParticleAsset>();
	}
};
static_assert(alignof(UUIParticleAsset) == 0x000008, "Wrong alignment on UUIParticleAsset");
static_assert(sizeof(UUIParticleAsset) == 0x000040, "Wrong size on UUIParticleAsset");
static_assert(offsetof(UUIParticleAsset, AutoPlay) == 0x000028, "Member 'UUIParticleAsset::AutoPlay' has a wrong offset!");
static_assert(offsetof(UUIParticleAsset, Emitters) == 0x000030, "Member 'UUIParticleAsset::Emitters' has a wrong offset!");

// Class UIParticle.UIParticleEmitter
// 0x0030 (0x0140 - 0x0110)
class UUIParticleEmitter final : public UWidget
{
public:
	class UUIParticleEmitterAsset*                Asset;                                             // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             EventOnEnd;                                        // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         bPlayParticle : 1;                                 // 0x0128(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          IsPlaying;                                         // 0x0129(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A[0x16];                                     // 0x012A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Play();
	void SetPlayParticle(bool InPlayParticle);
	void Stop();
	void StopEmit();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIParticleEmitter">();
	}
	static class UUIParticleEmitter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIParticleEmitter>();
	}
};
static_assert(alignof(UUIParticleEmitter) == 0x000008, "Wrong alignment on UUIParticleEmitter");
static_assert(sizeof(UUIParticleEmitter) == 0x000140, "Wrong size on UUIParticleEmitter");
static_assert(offsetof(UUIParticleEmitter, Asset) == 0x000110, "Member 'UUIParticleEmitter::Asset' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitter, EventOnEnd) == 0x000118, "Member 'UUIParticleEmitter::EventOnEnd' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitter, IsPlaying) == 0x000129, "Member 'UUIParticleEmitter::IsPlaying' has a wrong offset!");

// Class UIParticle.UIParticleEmitterAsset
// 0xD618 (0xD640 - 0x0028)
class UUIParticleEmitterAsset final : public UObject
{
public:
	bool                                          AutoPlay;                                          // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTimeOffset;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SamplingTimes;                                     // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEmitterType                                  EmitterType;                                       // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EmitSeconds;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIParticleProperty                    MaxParticleCount;                                  // 0x0040(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    SpawnParticlePerSecond;                            // 0x0828(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    ParticleEmitAngle;                                 // 0x1010(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FRange_Vector2D                        EmitPosRange;                                      // 0x17F8(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_180C[0x4];                                     // 0x180C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPosotion_Vector2DCurve                EmitPosition;                                      // 0x1810(0x0FD0)(Edit, NativeAccessSpecifierPublic)
	bool                                          AutoEmitPosRange;                                  // 0x27E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoScale;                                         // 0x27E1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ScaleByX;                                          // 0x27E2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27E3[0x1];                                     // 0x27E3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              DesignSize;                                        // 0x27E4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EmitAngleByWidgetAngle;                            // 0x27EC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPositionType                                 PositionType;                                      // 0x27ED(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27EE[0x2];                                     // 0x27EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIParticleProperty                    LifeSpan;                                          // 0x27F0(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    Size;                                              // 0x2FD8(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    Pivot;                                             // 0x37C0(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    RotationStart;                                     // 0x3FA8(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    RotationSpeed;                                     // 0x4790(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    Color;                                             // 0x4F78(0x07E8)(Edit, NativeAccessSpecifierPublic)
	class UObject*                                ResourceObject;                                    // 0x5760(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RotationFollowSpeed;                               // 0x5768(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSeparateSize;                                   // 0x5769(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_576A[0x6];                                     // 0x576A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIParticleProperty                    Gravity;                                           // 0x5770(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    StartSpeed;                                        // 0x5F58(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    AirResistance;                                     // 0x6740(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    RadialAcceleration;                                // 0x6F28(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    TangentialAcceleration;                            // 0x7710(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    Radius;                                            // 0x7EF8(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    DegreePerSecond;                                   // 0x86E0(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    PositionX;                                         // 0x8EC8(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    PositionY;                                         // 0x96B0(0x07E8)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FChildEmitter>                  ChildrenEmitters;                                  // 0x9E98(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FScalarParamCurve>              ScalarParams;                                      // 0x9EA8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FScalarParamCurve>              ScalarParamsWhenStart;                             // 0x9EB8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EParticleDrawEffect                           DrawEffect;                                        // 0x9EC8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseScaleFollowSpeedDirection;                      // 0x9EC9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9ECA[0x6];                                     // 0x9ECA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIParticleProperty                    ScaleFollowSpeedDirection;                         // 0x9ED0(0x07E8)(Edit, NativeAccessSpecifierPublic)
	bool                                          UseScaleFollowSpeedVertical;                       // 0xA6B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A6B9[0x7];                                     // 0xA6B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIParticleProperty                    ScaleFollowSpeedVertical;                          // 0xA6C0(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    DirectionScale;                                    // 0xAEA8(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    VerticalDirectionScale;                            // 0xB690(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    SineDirectionStart;                                // 0xBE78(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    SineDirectionSpeed;                                // 0xC660(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    SineDirectionRange;                                // 0xCE48(0x07E8)(Edit, NativeAccessSpecifierPublic)
	TArray<class UUIParticleEmitterAsset*>        LevelOfDetail;                                     // 0xD630(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIParticleEmitterAsset">();
	}
	static class UUIParticleEmitterAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIParticleEmitterAsset>();
	}
};
static_assert(alignof(UUIParticleEmitterAsset) == 0x000008, "Wrong alignment on UUIParticleEmitterAsset");
static_assert(sizeof(UUIParticleEmitterAsset) == 0x00D640, "Wrong size on UUIParticleEmitterAsset");
static_assert(offsetof(UUIParticleEmitterAsset, AutoPlay) == 0x000028, "Member 'UUIParticleEmitterAsset::AutoPlay' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, StartTimeOffset) == 0x00002C, "Member 'UUIParticleEmitterAsset::StartTimeOffset' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, SamplingTimes) == 0x000030, "Member 'UUIParticleEmitterAsset::SamplingTimes' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, EmitterType) == 0x000034, "Member 'UUIParticleEmitterAsset::EmitterType' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, EmitSeconds) == 0x000038, "Member 'UUIParticleEmitterAsset::EmitSeconds' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, MaxParticleCount) == 0x000040, "Member 'UUIParticleEmitterAsset::MaxParticleCount' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, SpawnParticlePerSecond) == 0x000828, "Member 'UUIParticleEmitterAsset::SpawnParticlePerSecond' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, ParticleEmitAngle) == 0x001010, "Member 'UUIParticleEmitterAsset::ParticleEmitAngle' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, EmitPosRange) == 0x0017F8, "Member 'UUIParticleEmitterAsset::EmitPosRange' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, EmitPosition) == 0x001810, "Member 'UUIParticleEmitterAsset::EmitPosition' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, AutoEmitPosRange) == 0x0027E0, "Member 'UUIParticleEmitterAsset::AutoEmitPosRange' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, AutoScale) == 0x0027E1, "Member 'UUIParticleEmitterAsset::AutoScale' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, ScaleByX) == 0x0027E2, "Member 'UUIParticleEmitterAsset::ScaleByX' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, DesignSize) == 0x0027E4, "Member 'UUIParticleEmitterAsset::DesignSize' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, EmitAngleByWidgetAngle) == 0x0027EC, "Member 'UUIParticleEmitterAsset::EmitAngleByWidgetAngle' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, PositionType) == 0x0027ED, "Member 'UUIParticleEmitterAsset::PositionType' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, LifeSpan) == 0x0027F0, "Member 'UUIParticleEmitterAsset::LifeSpan' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, Size) == 0x002FD8, "Member 'UUIParticleEmitterAsset::Size' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, Pivot) == 0x0037C0, "Member 'UUIParticleEmitterAsset::Pivot' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, RotationStart) == 0x003FA8, "Member 'UUIParticleEmitterAsset::RotationStart' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, RotationSpeed) == 0x004790, "Member 'UUIParticleEmitterAsset::RotationSpeed' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, Color) == 0x004F78, "Member 'UUIParticleEmitterAsset::Color' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, ResourceObject) == 0x005760, "Member 'UUIParticleEmitterAsset::ResourceObject' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, RotationFollowSpeed) == 0x005768, "Member 'UUIParticleEmitterAsset::RotationFollowSpeed' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, UseSeparateSize) == 0x005769, "Member 'UUIParticleEmitterAsset::UseSeparateSize' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, Gravity) == 0x005770, "Member 'UUIParticleEmitterAsset::Gravity' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, StartSpeed) == 0x005F58, "Member 'UUIParticleEmitterAsset::StartSpeed' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, AirResistance) == 0x006740, "Member 'UUIParticleEmitterAsset::AirResistance' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, RadialAcceleration) == 0x006F28, "Member 'UUIParticleEmitterAsset::RadialAcceleration' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, TangentialAcceleration) == 0x007710, "Member 'UUIParticleEmitterAsset::TangentialAcceleration' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, Radius) == 0x007EF8, "Member 'UUIParticleEmitterAsset::Radius' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, DegreePerSecond) == 0x0086E0, "Member 'UUIParticleEmitterAsset::DegreePerSecond' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, PositionX) == 0x008EC8, "Member 'UUIParticleEmitterAsset::PositionX' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, PositionY) == 0x0096B0, "Member 'UUIParticleEmitterAsset::PositionY' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, ChildrenEmitters) == 0x009E98, "Member 'UUIParticleEmitterAsset::ChildrenEmitters' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, ScalarParams) == 0x009EA8, "Member 'UUIParticleEmitterAsset::ScalarParams' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, ScalarParamsWhenStart) == 0x009EB8, "Member 'UUIParticleEmitterAsset::ScalarParamsWhenStart' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, DrawEffect) == 0x009EC8, "Member 'UUIParticleEmitterAsset::DrawEffect' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, UseScaleFollowSpeedDirection) == 0x009EC9, "Member 'UUIParticleEmitterAsset::UseScaleFollowSpeedDirection' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, ScaleFollowSpeedDirection) == 0x009ED0, "Member 'UUIParticleEmitterAsset::ScaleFollowSpeedDirection' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, UseScaleFollowSpeedVertical) == 0x00A6B8, "Member 'UUIParticleEmitterAsset::UseScaleFollowSpeedVertical' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, ScaleFollowSpeedVertical) == 0x00A6C0, "Member 'UUIParticleEmitterAsset::ScaleFollowSpeedVertical' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, DirectionScale) == 0x00AEA8, "Member 'UUIParticleEmitterAsset::DirectionScale' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, VerticalDirectionScale) == 0x00B690, "Member 'UUIParticleEmitterAsset::VerticalDirectionScale' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, SineDirectionStart) == 0x00BE78, "Member 'UUIParticleEmitterAsset::SineDirectionStart' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, SineDirectionSpeed) == 0x00C660, "Member 'UUIParticleEmitterAsset::SineDirectionSpeed' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, SineDirectionRange) == 0x00CE48, "Member 'UUIParticleEmitterAsset::SineDirectionRange' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, LevelOfDetail) == 0x00D630, "Member 'UUIParticleEmitterAsset::LevelOfDetail' has a wrong offset!");

// Class UIParticle.UIParticleUtility
// 0x0000 (0x0028 - 0x0028)
class UUIParticleUtility final : public UObject
{
public:
	static int32 GetLOD();
	static bool GetMultiThread();
	static void SetLOD(int32 Newlod);
	static void SetMultiThread(bool Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIParticleUtility">();
	}
	static class UUIParticleUtility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIParticleUtility>();
	}
};
static_assert(alignof(UUIParticleUtility) == 0x000008, "Wrong alignment on UUIParticleUtility");
static_assert(sizeof(UUIParticleUtility) == 0x000028, "Wrong size on UUIParticleUtility");

}

