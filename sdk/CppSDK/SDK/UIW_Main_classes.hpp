#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UIW_Main

#include "Basic.hpp"

#include "ProjectP_structs.hpp"
#include "ProjectP_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UIST_FloatArray_structs.hpp"
#include "ProjectPContentInfo_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UIW_Main.UIW_Main_C
// 0x0280 (0x0528 - 0x02A8)
class UUIW_Main_C final : public ULWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Ani_FadeIn;                                        // 0x02B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UButton*                                Btn_Cha_Close;                                     // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                Btn_QA;                                            // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Container_High;                                    // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Container_Low;                                     // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Container_Medium;                                  // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Debug_0;                                           // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Debug_1;                                           // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUniformGridPanel*                      DebugPanel;                                        // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               FocusEffect;                                       // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Group_QA;                                          // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Group_QAList;                                      // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           MainCanvas;                                        // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWrapBox*                               QA_List;                                           // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USlider*                                Slider_QA;                                         // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_QA;                                           // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_QA_Time;                                      // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_Tooltip;                                      // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Tooltip;                                           // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUIW_Indicator_C*                       UIW_Indicator;                                     // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget*                                TestWindow;                                        // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              TestWindowPosition;                                // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UUserWidget*>                    AddWidgetList;                                     // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         OpenPopupNum;                                      // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnVisibleWindow;                                   // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnVisibleMenu;                                     // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsOpenedWindow;                                    // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsOpenedMenu;                                      // 0x0399(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsOpenedEvent;                                     // 0x039A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39B[0x1];                                      // 0x039B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              PrevFocusPosition;                                 // 0x039C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnabledUIInput;                                  // 0x03A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A5[0x3];                                      // 0x03A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ALPCCharacter*                          LPCCharacter;                                      // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULStatComponent*                        StatComponent;                                     // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          QAMode;                                            // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ELSecondStat>                          QAList;                                            // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           QATimer;                                           // 0x03D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           FocusEffectTimer;                                  // 0x03D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                FocusEffectTarget;                                 // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FocusEffectProgress;                               // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              FocusEffectLocalOffset;                            // 0x03EC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFocusEffectOn;                                   // 0x03F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F5[0x3];                                      // 0x03F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                TopWindowAtStartFocusEffect;                       // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                TopWindow;                                         // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                ParentScrollBox;                                   // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UObject*>                        PreLoadAssets;                                     // 0x0410(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         PreLoadFolders;                                    // 0x0420(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FSoftObjectPath>                SoftObjectPath;                                    // 0x0430(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             GoldenTreeDispatcher;                              // 0x0440(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         RecordSoundMixCount;                               // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PrevMousePositionX;                                // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PrevMousePositionY;                                // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45C[0x4];                                      // 0x045C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnPreConfirmToTeleport;                            // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsPreConfirmToTeleport;                            // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_471[0x7];                                      // 0x0471(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             RecordDispatcher;                                  // 0x0478(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTimerHandle                           NPCDialogEnabledTimerSysMsg;                       // 0x0488(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           NPCDialogEnabledTimerWidget;                       // 0x0490(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          NPCDialogEnabled;                                  // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_499[0x3];                                      // 0x0499(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InitializeEffectTime;                              // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   NextOpenWidgetName;                                // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   NextExecType;                                      // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   NextExecParam;                                     // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InitializeSuccess;                                 // 0x04B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B9[0x7];                                      // 0x04B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             PreviewHideDispatcher;                             // 0x04C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsShowingPromoteDLCPreview;                        // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D1[0x7];                                      // 0x04D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FUIST_FloatArray>    SubtitleSizeMap;                                   // 0x04D8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void OnVisibleWindow__DelegateSignature(bool IsOpened);
	void OnVisibleMenu__DelegateSignature(bool IsOpened, bool NeedCenterMouse);
	void GoldenTreeDispatcher__DelegateSignature();
	void OnPreConfirmToTeleport__DelegateSignature();
	void RecordDispatcher__DelegateSignature(bool IsPlay);
	void PreviewHideDispatcher__DelegateSignature(class FName CollectionCodeName);
	void ExecuteUbergraph_UIW_Main(int32 EntryPoint);
	void PreLoadingAssets();
	void BndEvt__UIW_Main_Btn_QA_1_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__UIW_Main_Slider_QA_K2Node_ComponentBoundEvent_1_OnFloatValueChangedEvent__DelegateSignature(float Value);
	void BndEvt__UIW_Main_Btn_QA_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
	void Destruct();
	void Construct();
	void OnLoaded_B02654034FFA4E6352D787860EA3CFF1(class UObject* Loaded);
	void OnLoaded_5660C9E5492071D2DD6456BECA8DED90(class UObject* Loaded);
	void OnLoaded_19CE33E441B1CF0573562AAA59BAE02E(class UObject* Loaded);
	bool OnDrop(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void AddWidget(class FName RowName, class UUserWidget** Widget);
	void RemoveWidget(class FName WidgetName);
	void AddPopupWidget(class FName PopupRowName, class UUIW_Popup_C** Widget);
	void RemovePopupWidget(class FName PopupRowName);
	void SetMouseCursor(bool NeedCenterMouse);
	void SetWindowEvent();
	void SetFocused_Enabled();
	void IsOpenedWidget(TSoftClassPtr<class UClass> WidgetClass, bool* IsOpened, class UUserWidget** UserWidget, int32* WidgetArrayIndex);
	void IsOpenedPopupWidget(class FName PopupRowName, bool* IsOpened, class UUIW_Popup_C** PopupWidget, int32* PopupArrayIndex);
	void InitMain(class FName MainStateName);
	void Move_Focus_Effect(const struct FVector2D& LocalOffset, class UWidget* Target, class UWidget* Parent);
	void MoveFocusOnScrolled(class UScrollBox* ScrollBox, class UWidget* Target, const struct FVector2D& TargetOffset, bool VerticalOrNot);
	void MoveFocusOnList(class UListViewBase* ListView, const struct FVector2D& LocalOffset, class UWidget* Parent, class UWidget** SelectedWidget);
	void HideFocusEffect(bool NoTween);
	void Focus_Tween_Complete(class FName CategoryName);
	void RemoveAllWindowWidget();
	void ExecuteCommand(const class FString& CommandName, bool CommandCondition);
	void ToggleUI(bool Visible);
	void ShowLoadIndicator(bool SyncStart);
	void ShowSaveIndicator(bool SyncStart);
	void UIInputBlock(bool IsValid);
	void RequestOpenWindow(class FName WidgetTableName);
	void RequestOpenPopup(class FName WidgetTableName);
	void ToggleCommandBook();
	void ShowTooltip(const struct FGeometry& Geometry, const class FText& Text);
	void HideTooltip();
	void OnChangeInput(bool bGamePad);
	void VisibleMenu(bool IsOpened, bool IsOpenFromHUD);
	void CheckPlatformAcceptKey();
	void RefreshQAData();
	void FocusEffectUpdate();
	void UIW_Main_AutoGenFunc(class ULDialogDebugInfo* Info);
	void UIW_Main_AutoGenFunc1(class ULQuestDebugInfo* Info);
	void GetTopWindow(class UUIW_Window_C** Window);
	void RecordSoundMixControl(bool IsPush);
	void GetWindow(class FName WidgetRowName, class UUIW_Window_C** Window);
	void CallPreConfirmToTeleport();
	void Set_NPCDialog_Enabled_Timer(bool Enabled, float Time, class FName NextOpenWidgetName_0, class FName NextExecType_0, class FName NextExecParam_0);
	void SetNPCDialogEnabledRealSysMsg();
	void SetNPCDialogEnabledRealWidget();
	void AdjustTooltip();
	void SetSubtitleSize(class FName Name_0, class UScaleBox* ScaleBox);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UIW_Main_C">();
	}
	static class UUIW_Main_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIW_Main_C>();
	}
};
static_assert(alignof(UUIW_Main_C) == 0x000008, "Wrong alignment on UUIW_Main_C");
static_assert(sizeof(UUIW_Main_C) == 0x000528, "Wrong size on UUIW_Main_C");
static_assert(offsetof(UUIW_Main_C, UberGraphFrame) == 0x0002A8, "Member 'UUIW_Main_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, Ani_FadeIn) == 0x0002B0, "Member 'UUIW_Main_C::Ani_FadeIn' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, Btn_Cha_Close) == 0x0002B8, "Member 'UUIW_Main_C::Btn_Cha_Close' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, Btn_QA) == 0x0002C0, "Member 'UUIW_Main_C::Btn_QA' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, Container_High) == 0x0002C8, "Member 'UUIW_Main_C::Container_High' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, Container_Low) == 0x0002D0, "Member 'UUIW_Main_C::Container_Low' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, Container_Medium) == 0x0002D8, "Member 'UUIW_Main_C::Container_Medium' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, Debug_0) == 0x0002E0, "Member 'UUIW_Main_C::Debug_0' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, Debug_1) == 0x0002E8, "Member 'UUIW_Main_C::Debug_1' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, DebugPanel) == 0x0002F0, "Member 'UUIW_Main_C::DebugPanel' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, FocusEffect) == 0x0002F8, "Member 'UUIW_Main_C::FocusEffect' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, Group_QA) == 0x000300, "Member 'UUIW_Main_C::Group_QA' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, Group_QAList) == 0x000308, "Member 'UUIW_Main_C::Group_QAList' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, MainCanvas) == 0x000310, "Member 'UUIW_Main_C::MainCanvas' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, QA_List) == 0x000318, "Member 'UUIW_Main_C::QA_List' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, Slider_QA) == 0x000320, "Member 'UUIW_Main_C::Slider_QA' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, Text_QA) == 0x000328, "Member 'UUIW_Main_C::Text_QA' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, Text_QA_Time) == 0x000330, "Member 'UUIW_Main_C::Text_QA_Time' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, Text_Tooltip) == 0x000338, "Member 'UUIW_Main_C::Text_Tooltip' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, Tooltip) == 0x000340, "Member 'UUIW_Main_C::Tooltip' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, UIW_Indicator) == 0x000348, "Member 'UUIW_Main_C::UIW_Indicator' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, TestWindow) == 0x000350, "Member 'UUIW_Main_C::TestWindow' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, TestWindowPosition) == 0x000358, "Member 'UUIW_Main_C::TestWindowPosition' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, AddWidgetList) == 0x000360, "Member 'UUIW_Main_C::AddWidgetList' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, OpenPopupNum) == 0x000370, "Member 'UUIW_Main_C::OpenPopupNum' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, OnVisibleWindow) == 0x000378, "Member 'UUIW_Main_C::OnVisibleWindow' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, OnVisibleMenu) == 0x000388, "Member 'UUIW_Main_C::OnVisibleMenu' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, IsOpenedWindow) == 0x000398, "Member 'UUIW_Main_C::IsOpenedWindow' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, IsOpenedMenu) == 0x000399, "Member 'UUIW_Main_C::IsOpenedMenu' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, IsOpenedEvent) == 0x00039A, "Member 'UUIW_Main_C::IsOpenedEvent' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, PrevFocusPosition) == 0x00039C, "Member 'UUIW_Main_C::PrevFocusPosition' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, IsEnabledUIInput) == 0x0003A4, "Member 'UUIW_Main_C::IsEnabledUIInput' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, LPCCharacter) == 0x0003A8, "Member 'UUIW_Main_C::LPCCharacter' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, StatComponent) == 0x0003B0, "Member 'UUIW_Main_C::StatComponent' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, QAMode) == 0x0003B8, "Member 'UUIW_Main_C::QAMode' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, QAList) == 0x0003C0, "Member 'UUIW_Main_C::QAList' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, QATimer) == 0x0003D0, "Member 'UUIW_Main_C::QATimer' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, FocusEffectTimer) == 0x0003D8, "Member 'UUIW_Main_C::FocusEffectTimer' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, FocusEffectTarget) == 0x0003E0, "Member 'UUIW_Main_C::FocusEffectTarget' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, FocusEffectProgress) == 0x0003E8, "Member 'UUIW_Main_C::FocusEffectProgress' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, FocusEffectLocalOffset) == 0x0003EC, "Member 'UUIW_Main_C::FocusEffectLocalOffset' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, IsFocusEffectOn) == 0x0003F4, "Member 'UUIW_Main_C::IsFocusEffectOn' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, TopWindowAtStartFocusEffect) == 0x0003F8, "Member 'UUIW_Main_C::TopWindowAtStartFocusEffect' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, TopWindow) == 0x000400, "Member 'UUIW_Main_C::TopWindow' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, ParentScrollBox) == 0x000408, "Member 'UUIW_Main_C::ParentScrollBox' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, PreLoadAssets) == 0x000410, "Member 'UUIW_Main_C::PreLoadAssets' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, PreLoadFolders) == 0x000420, "Member 'UUIW_Main_C::PreLoadFolders' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, SoftObjectPath) == 0x000430, "Member 'UUIW_Main_C::SoftObjectPath' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, GoldenTreeDispatcher) == 0x000440, "Member 'UUIW_Main_C::GoldenTreeDispatcher' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, RecordSoundMixCount) == 0x000450, "Member 'UUIW_Main_C::RecordSoundMixCount' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, PrevMousePositionX) == 0x000454, "Member 'UUIW_Main_C::PrevMousePositionX' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, PrevMousePositionY) == 0x000458, "Member 'UUIW_Main_C::PrevMousePositionY' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, OnPreConfirmToTeleport) == 0x000460, "Member 'UUIW_Main_C::OnPreConfirmToTeleport' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, IsPreConfirmToTeleport) == 0x000470, "Member 'UUIW_Main_C::IsPreConfirmToTeleport' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, RecordDispatcher) == 0x000478, "Member 'UUIW_Main_C::RecordDispatcher' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, NPCDialogEnabledTimerSysMsg) == 0x000488, "Member 'UUIW_Main_C::NPCDialogEnabledTimerSysMsg' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, NPCDialogEnabledTimerWidget) == 0x000490, "Member 'UUIW_Main_C::NPCDialogEnabledTimerWidget' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, NPCDialogEnabled) == 0x000498, "Member 'UUIW_Main_C::NPCDialogEnabled' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, InitializeEffectTime) == 0x00049C, "Member 'UUIW_Main_C::InitializeEffectTime' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, NextOpenWidgetName) == 0x0004A0, "Member 'UUIW_Main_C::NextOpenWidgetName' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, NextExecType) == 0x0004A8, "Member 'UUIW_Main_C::NextExecType' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, NextExecParam) == 0x0004B0, "Member 'UUIW_Main_C::NextExecParam' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, InitializeSuccess) == 0x0004B8, "Member 'UUIW_Main_C::InitializeSuccess' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, PreviewHideDispatcher) == 0x0004C0, "Member 'UUIW_Main_C::PreviewHideDispatcher' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, IsShowingPromoteDLCPreview) == 0x0004D0, "Member 'UUIW_Main_C::IsShowingPromoteDLCPreview' has a wrong offset!");
static_assert(offsetof(UUIW_Main_C, SubtitleSizeMap) == 0x0004D8, "Member 'UUIW_Main_C::SubtitleSizeMap' has a wrong offset!");

}

