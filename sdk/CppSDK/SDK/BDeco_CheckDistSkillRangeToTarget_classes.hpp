#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BDeco_CheckDistSkillRangeToTarget

#include "Basic.hpp"

#include "ProjectP_structs.hpp"
#include "ProjectP_classes.hpp"
#include "ProjectPContentInfo_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BDeco_CheckDistSkillRangeToTarget.BDeco_CheckDistSkillRangeToTarget_C
// 0x0008 (0x00B0 - 0x00A8)
class UBDeco_CheckDistSkillRangeToTarget_C final : public ULBDecorator_BlueprintBase
{
public:
	ELAIRangeMinMaxType                           MinMaxType;                                        // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Check_Distance;                                    // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Check_Angle;                                       // 0x00AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Check_Height;                                      // 0x00AB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ELAIRangeCheckType                            Override_Range_Check_Type;                         // 0x00AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool PerformConditionCheckAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BDeco_CheckDistSkillRangeToTarget_C">();
	}
	static class UBDeco_CheckDistSkillRangeToTarget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBDeco_CheckDistSkillRangeToTarget_C>();
	}
};
static_assert(alignof(UBDeco_CheckDistSkillRangeToTarget_C) == 0x000008, "Wrong alignment on UBDeco_CheckDistSkillRangeToTarget_C");
static_assert(sizeof(UBDeco_CheckDistSkillRangeToTarget_C) == 0x0000B0, "Wrong size on UBDeco_CheckDistSkillRangeToTarget_C");
static_assert(offsetof(UBDeco_CheckDistSkillRangeToTarget_C, MinMaxType) == 0x0000A8, "Member 'UBDeco_CheckDistSkillRangeToTarget_C::MinMaxType' has a wrong offset!");
static_assert(offsetof(UBDeco_CheckDistSkillRangeToTarget_C, Check_Distance) == 0x0000A9, "Member 'UBDeco_CheckDistSkillRangeToTarget_C::Check_Distance' has a wrong offset!");
static_assert(offsetof(UBDeco_CheckDistSkillRangeToTarget_C, Check_Angle) == 0x0000AA, "Member 'UBDeco_CheckDistSkillRangeToTarget_C::Check_Angle' has a wrong offset!");
static_assert(offsetof(UBDeco_CheckDistSkillRangeToTarget_C, Check_Height) == 0x0000AB, "Member 'UBDeco_CheckDistSkillRangeToTarget_C::Check_Height' has a wrong offset!");
static_assert(offsetof(UBDeco_CheckDistSkillRangeToTarget_C, Override_Range_Check_Type) == 0x0000AC, "Member 'UBDeco_CheckDistSkillRangeToTarget_C::Override_Range_Check_Type' has a wrong offset!");

}

