#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UIW_HeadTag

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "ProjectP_classes.hpp"
#include "Engine_structs.hpp"
#include "UIST_AbnormalVisible_structs.hpp"
#include "ProjectPContentInfo_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UIW_HeadTag.UIW_HeadTag_C
// 0x0140 (0x03F8 - 0x02B8)
class UUIW_HeadTag_C final : public ULHeadTagWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCanvasPanel*                           DelegateVisible;                                   // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUIW_HUD_Gauge_C*                       Gauge;                                             // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox;                                           // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_Damage;                                       // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          IsLockOn;                                          // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsParalyzeEnable;                                  // 0x02E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E2[0x2];                                      // 0x02E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrevHP;                                            // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PrevRegainHP;                                      // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DamageVisibleTimer;                                // 0x02F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HeadTagVisibleTimer;                               // 0x02F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HpRefreshTimer;                                    // 0x0300(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CheckHUDTimer;                                     // 0x0308(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ALNPCCharacter*                         OwnerNPC;                                          // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBinding;                                         // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_319[0x3];                                      // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DamageShowTime;                                    // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PrevDamage;                                        // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIW_HUD_C*                             HUDRef;                                            // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCombatState;                                     // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_331[0x7];                                      // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            DamageColor_Default;                               // 0x0338(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            DamageColor_Fire;                                  // 0x0360(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            DamageColor_Electric;                              // 0x0388(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            DamageColor_Acid;                                  // 0x03B0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FUIST_AbnormalVisible>          AbnormalArr;                                       // 0x03D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UImage*>                         AbnormalIconArr;                                   // 0x03E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void ExecuteUbergraph_UIW_HeadTag(int32 EntryPoint);
	void RefreshHeadTagVisibleTimer(bool InVisible);
	void OnInitialized();
	void OnDetachFromActor();
	void OnAttachToActor();
	void PreConstruct(bool IsDesignTime);
	void Destruct();
	void Construct();
	void SetOwnerNpc(class ALNPCCharacter* InNpc);
	void CompleteTween(class FName CategoryName);
	void InitHeadTag();
	void OwnerNpcDelegate(bool Add);
	void StartLockOn();
	void FinishLockOn();
	void RefreshHP();
	void SetHP(float HPPrecent);
	void ShowAll();
	void HideAll();
	void ShowDamage(int32 Value, ELElementDamageType ElementDamageType);
	void HideDamage();
	void SetLockOn(bool IsLockOn_0);
	void OnParalyzeEnable(bool IsAbleParalyze);
	void OnGroggy(bool IsStarted);
	void CheckNpcDelegate();
	void DisplayInfo(const class FString& InputString);
	void CheckHUD();
	void OnChangeCombatState(bool IsInCombatState);
	void SetVisible(bool bVisible);
	void On_Abnormal_State(class FName AbnormalName, int64 AbnormalUniqueId, bool Visible);
	void AddAbnormal(class FName Name_0, int64 ID, bool Visible, ELAbnormalAbstateClass State);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UIW_HeadTag_C">();
	}
	static class UUIW_HeadTag_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIW_HeadTag_C>();
	}
};
static_assert(alignof(UUIW_HeadTag_C) == 0x000008, "Wrong alignment on UUIW_HeadTag_C");
static_assert(sizeof(UUIW_HeadTag_C) == 0x0003F8, "Wrong size on UUIW_HeadTag_C");
static_assert(offsetof(UUIW_HeadTag_C, UberGraphFrame) == 0x0002B8, "Member 'UUIW_HeadTag_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUIW_HeadTag_C, DelegateVisible) == 0x0002C0, "Member 'UUIW_HeadTag_C::DelegateVisible' has a wrong offset!");
static_assert(offsetof(UUIW_HeadTag_C, Gauge) == 0x0002C8, "Member 'UUIW_HeadTag_C::Gauge' has a wrong offset!");
static_assert(offsetof(UUIW_HeadTag_C, SizeBox) == 0x0002D0, "Member 'UUIW_HeadTag_C::SizeBox' has a wrong offset!");
static_assert(offsetof(UUIW_HeadTag_C, Text_Damage) == 0x0002D8, "Member 'UUIW_HeadTag_C::Text_Damage' has a wrong offset!");
static_assert(offsetof(UUIW_HeadTag_C, IsLockOn) == 0x0002E0, "Member 'UUIW_HeadTag_C::IsLockOn' has a wrong offset!");
static_assert(offsetof(UUIW_HeadTag_C, IsParalyzeEnable) == 0x0002E1, "Member 'UUIW_HeadTag_C::IsParalyzeEnable' has a wrong offset!");
static_assert(offsetof(UUIW_HeadTag_C, PrevHP) == 0x0002E4, "Member 'UUIW_HeadTag_C::PrevHP' has a wrong offset!");
static_assert(offsetof(UUIW_HeadTag_C, PrevRegainHP) == 0x0002E8, "Member 'UUIW_HeadTag_C::PrevRegainHP' has a wrong offset!");
static_assert(offsetof(UUIW_HeadTag_C, DamageVisibleTimer) == 0x0002F0, "Member 'UUIW_HeadTag_C::DamageVisibleTimer' has a wrong offset!");
static_assert(offsetof(UUIW_HeadTag_C, HeadTagVisibleTimer) == 0x0002F8, "Member 'UUIW_HeadTag_C::HeadTagVisibleTimer' has a wrong offset!");
static_assert(offsetof(UUIW_HeadTag_C, HpRefreshTimer) == 0x000300, "Member 'UUIW_HeadTag_C::HpRefreshTimer' has a wrong offset!");
static_assert(offsetof(UUIW_HeadTag_C, CheckHUDTimer) == 0x000308, "Member 'UUIW_HeadTag_C::CheckHUDTimer' has a wrong offset!");
static_assert(offsetof(UUIW_HeadTag_C, OwnerNPC) == 0x000310, "Member 'UUIW_HeadTag_C::OwnerNPC' has a wrong offset!");
static_assert(offsetof(UUIW_HeadTag_C, IsBinding) == 0x000318, "Member 'UUIW_HeadTag_C::IsBinding' has a wrong offset!");
static_assert(offsetof(UUIW_HeadTag_C, DamageShowTime) == 0x00031C, "Member 'UUIW_HeadTag_C::DamageShowTime' has a wrong offset!");
static_assert(offsetof(UUIW_HeadTag_C, PrevDamage) == 0x000320, "Member 'UUIW_HeadTag_C::PrevDamage' has a wrong offset!");
static_assert(offsetof(UUIW_HeadTag_C, HUDRef) == 0x000328, "Member 'UUIW_HeadTag_C::HUDRef' has a wrong offset!");
static_assert(offsetof(UUIW_HeadTag_C, IsCombatState) == 0x000330, "Member 'UUIW_HeadTag_C::IsCombatState' has a wrong offset!");
static_assert(offsetof(UUIW_HeadTag_C, DamageColor_Default) == 0x000338, "Member 'UUIW_HeadTag_C::DamageColor_Default' has a wrong offset!");
static_assert(offsetof(UUIW_HeadTag_C, DamageColor_Fire) == 0x000360, "Member 'UUIW_HeadTag_C::DamageColor_Fire' has a wrong offset!");
static_assert(offsetof(UUIW_HeadTag_C, DamageColor_Electric) == 0x000388, "Member 'UUIW_HeadTag_C::DamageColor_Electric' has a wrong offset!");
static_assert(offsetof(UUIW_HeadTag_C, DamageColor_Acid) == 0x0003B0, "Member 'UUIW_HeadTag_C::DamageColor_Acid' has a wrong offset!");
static_assert(offsetof(UUIW_HeadTag_C, AbnormalArr) == 0x0003D8, "Member 'UUIW_HeadTag_C::AbnormalArr' has a wrong offset!");
static_assert(offsetof(UUIW_HeadTag_C, AbnormalIconArr) == 0x0003E8, "Member 'UUIW_HeadTag_C::AbnormalIconArr' has a wrong offset!");

}

