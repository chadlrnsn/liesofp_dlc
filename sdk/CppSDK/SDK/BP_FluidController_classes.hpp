#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FluidController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FluidController.BP_FluidController_C
// 0x00B0 (0x0290 - 0x01E0)
class ABP_FluidController_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x01E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    Icon;                                              // 0x01E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentRT;                                         // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               FluidTransfer;                                     // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               FluidSimulation;                                   // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               NormalSimulation;                                  // 0x0208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableSimulation;                                  // 0x0210(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_211[0x3];                                      // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FluidUpdateRate;                                   // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FluidTravelSpeed;                                  // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FluidDampening;                                    // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Height_0;                                          // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Height_1;                                          // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Height_2;                                          // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RenderTargetSize;                                  // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 FluidOut;                                          // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 FluidOutNormal;                                    // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalIntensity;                                   // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastTracedTime;                                    // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UpdateDuration;                                    // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxSimulatePerTick;                                // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              SurfaceType;                                       // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RefreshSurfaceBounds;                              // 0x0261(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_262[0x6];                                      // 0x0262(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBoxSphereBounds>               SurfaceBounds;                                     // 0x0268(0x0010)(Edit, BlueprintVisible)
	struct FVector                                ScaleSurfaceBound;                                 // 0x0278(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SurfaceBoundZExtent;                               // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnAnySurface;                                      // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_FluidController(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void GetPreviousRT(int32 CurrentRTIndex, int32 FramesOld, class UTextureRenderTarget2D* RenderTarget_0, class UTextureRenderTarget2D* RenderTarget_1, class UTextureRenderTarget2D* RenderTarget_2, class UTextureRenderTarget2D** RenderTargetOut);
	void GetRT(int32 Index_0, class UTextureRenderTarget2D* RenderTarget_0, class UTextureRenderTarget2D* RenderTarget_1, class UTextureRenderTarget2D* RenderTarget_2, class UTextureRenderTarget2D** RenderTarget);
	void ClearRenderTargets();
	void CreateMaterials();
	void GetRT_Height(int32 Index_0, class UTextureRenderTarget2D** RenderTarget);
	void SetLastTracedTime();
	void SetSurfaceType(EPhysicalSurface InSurfaceType);
	void RefreshSimulationMaterial();
	void CollectSurfaceBounds();
	void IsInAnySurface(bool* Value);

	void ShouldUpdate(bool* Value) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FluidController_C">();
	}
	static class ABP_FluidController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FluidController_C>();
	}
};
static_assert(alignof(ABP_FluidController_C) == 0x000008, "Wrong alignment on ABP_FluidController_C");
static_assert(sizeof(ABP_FluidController_C) == 0x000290, "Wrong size on ABP_FluidController_C");
static_assert(offsetof(ABP_FluidController_C, UberGraphFrame) == 0x0001E0, "Member 'ABP_FluidController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_FluidController_C, Icon) == 0x0001E8, "Member 'ABP_FluidController_C::Icon' has a wrong offset!");
static_assert(offsetof(ABP_FluidController_C, CurrentRT) == 0x0001F0, "Member 'ABP_FluidController_C::CurrentRT' has a wrong offset!");
static_assert(offsetof(ABP_FluidController_C, Time) == 0x0001F4, "Member 'ABP_FluidController_C::Time' has a wrong offset!");
static_assert(offsetof(ABP_FluidController_C, FluidTransfer) == 0x0001F8, "Member 'ABP_FluidController_C::FluidTransfer' has a wrong offset!");
static_assert(offsetof(ABP_FluidController_C, FluidSimulation) == 0x000200, "Member 'ABP_FluidController_C::FluidSimulation' has a wrong offset!");
static_assert(offsetof(ABP_FluidController_C, NormalSimulation) == 0x000208, "Member 'ABP_FluidController_C::NormalSimulation' has a wrong offset!");
static_assert(offsetof(ABP_FluidController_C, EnableSimulation) == 0x000210, "Member 'ABP_FluidController_C::EnableSimulation' has a wrong offset!");
static_assert(offsetof(ABP_FluidController_C, FluidUpdateRate) == 0x000214, "Member 'ABP_FluidController_C::FluidUpdateRate' has a wrong offset!");
static_assert(offsetof(ABP_FluidController_C, FluidTravelSpeed) == 0x000218, "Member 'ABP_FluidController_C::FluidTravelSpeed' has a wrong offset!");
static_assert(offsetof(ABP_FluidController_C, FluidDampening) == 0x00021C, "Member 'ABP_FluidController_C::FluidDampening' has a wrong offset!");
static_assert(offsetof(ABP_FluidController_C, Height_0) == 0x000220, "Member 'ABP_FluidController_C::Height_0' has a wrong offset!");
static_assert(offsetof(ABP_FluidController_C, Height_1) == 0x000228, "Member 'ABP_FluidController_C::Height_1' has a wrong offset!");
static_assert(offsetof(ABP_FluidController_C, Height_2) == 0x000230, "Member 'ABP_FluidController_C::Height_2' has a wrong offset!");
static_assert(offsetof(ABP_FluidController_C, RenderTargetSize) == 0x000238, "Member 'ABP_FluidController_C::RenderTargetSize' has a wrong offset!");
static_assert(offsetof(ABP_FluidController_C, FluidOut) == 0x000240, "Member 'ABP_FluidController_C::FluidOut' has a wrong offset!");
static_assert(offsetof(ABP_FluidController_C, FluidOutNormal) == 0x000248, "Member 'ABP_FluidController_C::FluidOutNormal' has a wrong offset!");
static_assert(offsetof(ABP_FluidController_C, NormalIntensity) == 0x000250, "Member 'ABP_FluidController_C::NormalIntensity' has a wrong offset!");
static_assert(offsetof(ABP_FluidController_C, LastTracedTime) == 0x000254, "Member 'ABP_FluidController_C::LastTracedTime' has a wrong offset!");
static_assert(offsetof(ABP_FluidController_C, UpdateDuration) == 0x000258, "Member 'ABP_FluidController_C::UpdateDuration' has a wrong offset!");
static_assert(offsetof(ABP_FluidController_C, MaxSimulatePerTick) == 0x00025C, "Member 'ABP_FluidController_C::MaxSimulatePerTick' has a wrong offset!");
static_assert(offsetof(ABP_FluidController_C, SurfaceType) == 0x000260, "Member 'ABP_FluidController_C::SurfaceType' has a wrong offset!");
static_assert(offsetof(ABP_FluidController_C, RefreshSurfaceBounds) == 0x000261, "Member 'ABP_FluidController_C::RefreshSurfaceBounds' has a wrong offset!");
static_assert(offsetof(ABP_FluidController_C, SurfaceBounds) == 0x000268, "Member 'ABP_FluidController_C::SurfaceBounds' has a wrong offset!");
static_assert(offsetof(ABP_FluidController_C, ScaleSurfaceBound) == 0x000278, "Member 'ABP_FluidController_C::ScaleSurfaceBound' has a wrong offset!");
static_assert(offsetof(ABP_FluidController_C, SurfaceBoundZExtent) == 0x000284, "Member 'ABP_FluidController_C::SurfaceBoundZExtent' has a wrong offset!");
static_assert(offsetof(ABP_FluidController_C, OnAnySurface) == 0x000288, "Member 'ABP_FluidController_C::OnAnySurface' has a wrong offset!");

}

