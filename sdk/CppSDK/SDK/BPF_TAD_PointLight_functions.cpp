#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPF_TAD_PointLight

#include "Basic.hpp"

#include "BPF_TAD_PointLight_classes.hpp"
#include "BPF_TAD_PointLight_parameters.hpp"


namespace SDK
{

// Function BPF_TAD_PointLight.BPF_TAD_PointLight_C.BPF TAD Point Light
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPointLightComponent*             PointLight                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     LightColor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Intensity                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Temperature                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AttenuationRadius                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SourceRadius                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   VolumScatterIntensity                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EComponentMobility                      Mobility                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ELightUnits                             IntensityUnits                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CastShadow                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   SpecularScale                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Contact_Shadow                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_TAD_PointLight_C::BPF_TAD_Point_Light(class UPointLightComponent* PointLight, const struct FLinearColor& LightColor, float Intensity, float Temperature, float AttenuationRadius, float SourceRadius, float VolumScatterIntensity, EComponentMobility Mobility, ELightUnits IntensityUnits, bool CastShadow, float SpecularScale, float Contact_Shadow, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_TAD_PointLight_C", "BPF TAD Point Light");

	Params::BPF_TAD_PointLight_C_BPF_TAD_Point_Light Parms{};

	Parms.PointLight = PointLight;
	Parms.LightColor = std::move(LightColor);
	Parms.Intensity = Intensity;
	Parms.Temperature = Temperature;
	Parms.AttenuationRadius = AttenuationRadius;
	Parms.SourceRadius = SourceRadius;
	Parms.VolumScatterIntensity = VolumScatterIntensity;
	Parms.Mobility = Mobility;
	Parms.IntensityUnits = IntensityUnits;
	Parms.CastShadow = CastShadow;
	Parms.SpecularScale = SpecularScale;
	Parms.Contact_Shadow = Contact_Shadow;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}

}

