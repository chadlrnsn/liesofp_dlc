#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTask_UseSkill

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ProjectP_structs.hpp"
#include "ProjectP_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTask_UseSkill.BTask_UseSkill_C
// 0x0030 (0x00E0 - 0x00B0)
class UBTask_UseSkill_C final : public ULBTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          bUseSkillCooltime;                                 // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bUseGlobalCooltime;                                // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BA[0x2];                                       // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SkillCodeName;                                     // 0x00BC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCheckCooltime;                                    // 0x00C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bCheckGlobalCooltime;                              // 0x00C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C6[0x2];                                       // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLNPCSkillLaunchResult                 LaunchResult;                                      // 0x00C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class ULActBase*                              RotateAction;                                      // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Force_Execute;                                     // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BTask_UseSkill(int32 EntryPoint);
	void DoSkill(class FName SkillId);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void CheckCoolTime(class FName SkillId, bool* Result);
	void CheckOutOfRotationAngle(class AAIController* Controller, int32 Angle, bool* bResult);
	void GetSkillInfo(struct FSkillInfoPtr* SkillInfo);
	int32 GetRotateAngle(const struct FSkillInfoPtr& SkillInfoPtr, const struct FNPCInfoPtr& NPCInfoPtr);
	void DoRatate(class AAIController* Controller, class ALNPCCharacter* Character);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTask_UseSkill_C">();
	}
	static class UBTask_UseSkill_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTask_UseSkill_C>();
	}
};
static_assert(alignof(UBTask_UseSkill_C) == 0x000008, "Wrong alignment on UBTask_UseSkill_C");
static_assert(sizeof(UBTask_UseSkill_C) == 0x0000E0, "Wrong size on UBTask_UseSkill_C");
static_assert(offsetof(UBTask_UseSkill_C, UberGraphFrame) == 0x0000B0, "Member 'UBTask_UseSkill_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTask_UseSkill_C, bUseSkillCooltime) == 0x0000B8, "Member 'UBTask_UseSkill_C::bUseSkillCooltime' has a wrong offset!");
static_assert(offsetof(UBTask_UseSkill_C, bUseGlobalCooltime) == 0x0000B9, "Member 'UBTask_UseSkill_C::bUseGlobalCooltime' has a wrong offset!");
static_assert(offsetof(UBTask_UseSkill_C, SkillCodeName) == 0x0000BC, "Member 'UBTask_UseSkill_C::SkillCodeName' has a wrong offset!");
static_assert(offsetof(UBTask_UseSkill_C, bCheckCooltime) == 0x0000C4, "Member 'UBTask_UseSkill_C::bCheckCooltime' has a wrong offset!");
static_assert(offsetof(UBTask_UseSkill_C, bCheckGlobalCooltime) == 0x0000C5, "Member 'UBTask_UseSkill_C::bCheckGlobalCooltime' has a wrong offset!");
static_assert(offsetof(UBTask_UseSkill_C, LaunchResult) == 0x0000C8, "Member 'UBTask_UseSkill_C::LaunchResult' has a wrong offset!");
static_assert(offsetof(UBTask_UseSkill_C, RotateAction) == 0x0000D0, "Member 'UBTask_UseSkill_C::RotateAction' has a wrong offset!");
static_assert(offsetof(UBTask_UseSkill_C, Force_Execute) == 0x0000D8, "Member 'UBTask_UseSkill_C::Force_Execute' has a wrong offset!");

}

