#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ProfilerMessages

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct ProfilerMessages.ProfilerServiceRequest
// 0x0004 (0x0004 - 0x0000)
struct FProfilerServiceRequest final
{
public:
	uint32                                        Request;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfilerServiceRequest) == 0x000004, "Wrong alignment on FProfilerServiceRequest");
static_assert(sizeof(FProfilerServiceRequest) == 0x000004, "Wrong size on FProfilerServiceRequest");
static_assert(offsetof(FProfilerServiceRequest, Request) == 0x000000, "Member 'FProfilerServiceRequest::Request' has a wrong offset!");

// ScriptStruct ProfilerMessages.ProfilerServicePreview
// 0x0001 (0x0001 - 0x0000)
struct FProfilerServicePreview final
{
public:
	bool                                          bRequestedPreviewState;                            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfilerServicePreview) == 0x000001, "Wrong alignment on FProfilerServicePreview");
static_assert(sizeof(FProfilerServicePreview) == 0x000001, "Wrong size on FProfilerServicePreview");
static_assert(offsetof(FProfilerServicePreview, bRequestedPreviewState) == 0x000000, "Member 'FProfilerServicePreview::bRequestedPreviewState' has a wrong offset!");

// ScriptStruct ProfilerMessages.ProfilerServiceCapture
// 0x0001 (0x0001 - 0x0000)
struct FProfilerServiceCapture final
{
public:
	bool                                          bRequestedCaptureState;                            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfilerServiceCapture) == 0x000001, "Wrong alignment on FProfilerServiceCapture");
static_assert(sizeof(FProfilerServiceCapture) == 0x000001, "Wrong size on FProfilerServiceCapture");
static_assert(offsetof(FProfilerServiceCapture, bRequestedCaptureState) == 0x000000, "Member 'FProfilerServiceCapture::bRequestedCaptureState' has a wrong offset!");

// ScriptStruct ProfilerMessages.ProfilerServiceUnsubscribe
// 0x0020 (0x0020 - 0x0000)
struct FProfilerServiceUnsubscribe final
{
public:
	struct FGuid                                  SessionId;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  InstanceId;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfilerServiceUnsubscribe) == 0x000004, "Wrong alignment on FProfilerServiceUnsubscribe");
static_assert(sizeof(FProfilerServiceUnsubscribe) == 0x000020, "Wrong size on FProfilerServiceUnsubscribe");
static_assert(offsetof(FProfilerServiceUnsubscribe, SessionId) == 0x000000, "Member 'FProfilerServiceUnsubscribe::SessionId' has a wrong offset!");
static_assert(offsetof(FProfilerServiceUnsubscribe, InstanceId) == 0x000010, "Member 'FProfilerServiceUnsubscribe::InstanceId' has a wrong offset!");

// ScriptStruct ProfilerMessages.ProfilerServiceSubscribe
// 0x0020 (0x0020 - 0x0000)
struct FProfilerServiceSubscribe final
{
public:
	struct FGuid                                  SessionId;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  InstanceId;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfilerServiceSubscribe) == 0x000004, "Wrong alignment on FProfilerServiceSubscribe");
static_assert(sizeof(FProfilerServiceSubscribe) == 0x000020, "Wrong size on FProfilerServiceSubscribe");
static_assert(offsetof(FProfilerServiceSubscribe, SessionId) == 0x000000, "Member 'FProfilerServiceSubscribe::SessionId' has a wrong offset!");
static_assert(offsetof(FProfilerServiceSubscribe, InstanceId) == 0x000010, "Member 'FProfilerServiceSubscribe::InstanceId' has a wrong offset!");

// ScriptStruct ProfilerMessages.ProfilerServicePong
// 0x0001 (0x0001 - 0x0000)
struct FProfilerServicePong final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProfilerServicePong) == 0x000001, "Wrong alignment on FProfilerServicePong");
static_assert(sizeof(FProfilerServicePong) == 0x000001, "Wrong size on FProfilerServicePong");

// ScriptStruct ProfilerMessages.ProfilerServicePing
// 0x0001 (0x0001 - 0x0000)
struct FProfilerServicePing final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProfilerServicePing) == 0x000001, "Wrong alignment on FProfilerServicePing");
static_assert(sizeof(FProfilerServicePing) == 0x000001, "Wrong size on FProfilerServicePing");

// ScriptStruct ProfilerMessages.ProfilerServiceFileChunk
// 0x0050 (0x0050 - 0x0000)
struct FProfilerServiceFileChunk final
{
public:
	struct FGuid                                  InstanceId;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HexData;                                           // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Header;                                            // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ChunkHash;                                         // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfilerServiceFileChunk) == 0x000008, "Wrong alignment on FProfilerServiceFileChunk");
static_assert(sizeof(FProfilerServiceFileChunk) == 0x000050, "Wrong size on FProfilerServiceFileChunk");
static_assert(offsetof(FProfilerServiceFileChunk, InstanceId) == 0x000000, "Member 'FProfilerServiceFileChunk::InstanceId' has a wrong offset!");
static_assert(offsetof(FProfilerServiceFileChunk, Filename) == 0x000010, "Member 'FProfilerServiceFileChunk::Filename' has a wrong offset!");
static_assert(offsetof(FProfilerServiceFileChunk, HexData) == 0x000020, "Member 'FProfilerServiceFileChunk::HexData' has a wrong offset!");
static_assert(offsetof(FProfilerServiceFileChunk, Header) == 0x000030, "Member 'FProfilerServiceFileChunk::Header' has a wrong offset!");
static_assert(offsetof(FProfilerServiceFileChunk, ChunkHash) == 0x000040, "Member 'FProfilerServiceFileChunk::ChunkHash' has a wrong offset!");

// ScriptStruct ProfilerMessages.ProfilerServicePreviewAck
// 0x0010 (0x0010 - 0x0000)
struct FProfilerServicePreviewAck final
{
public:
	struct FGuid                                  InstanceId;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfilerServicePreviewAck) == 0x000004, "Wrong alignment on FProfilerServicePreviewAck");
static_assert(sizeof(FProfilerServicePreviewAck) == 0x000010, "Wrong size on FProfilerServicePreviewAck");
static_assert(offsetof(FProfilerServicePreviewAck, InstanceId) == 0x000000, "Member 'FProfilerServicePreviewAck::InstanceId' has a wrong offset!");

// ScriptStruct ProfilerMessages.ProfilerServiceData2
// 0x0030 (0x0030 - 0x0000)
struct FProfilerServiceData2 final
{
public:
	struct FGuid                                  InstanceId;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Frame;                                             // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CompressedSize;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UncompressedSize;                                  // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HexData;                                           // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfilerServiceData2) == 0x000008, "Wrong alignment on FProfilerServiceData2");
static_assert(sizeof(FProfilerServiceData2) == 0x000030, "Wrong size on FProfilerServiceData2");
static_assert(offsetof(FProfilerServiceData2, InstanceId) == 0x000000, "Member 'FProfilerServiceData2::InstanceId' has a wrong offset!");
static_assert(offsetof(FProfilerServiceData2, Frame) == 0x000010, "Member 'FProfilerServiceData2::Frame' has a wrong offset!");
static_assert(offsetof(FProfilerServiceData2, CompressedSize) == 0x000018, "Member 'FProfilerServiceData2::CompressedSize' has a wrong offset!");
static_assert(offsetof(FProfilerServiceData2, UncompressedSize) == 0x00001C, "Member 'FProfilerServiceData2::UncompressedSize' has a wrong offset!");
static_assert(offsetof(FProfilerServiceData2, HexData) == 0x000020, "Member 'FProfilerServiceData2::HexData' has a wrong offset!");

// ScriptStruct ProfilerMessages.ProfilerServiceAuthorize
// 0x0020 (0x0020 - 0x0000)
struct FProfilerServiceAuthorize final
{
public:
	struct FGuid                                  SessionId;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  InstanceId;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfilerServiceAuthorize) == 0x000004, "Wrong alignment on FProfilerServiceAuthorize");
static_assert(sizeof(FProfilerServiceAuthorize) == 0x000020, "Wrong size on FProfilerServiceAuthorize");
static_assert(offsetof(FProfilerServiceAuthorize, SessionId) == 0x000000, "Member 'FProfilerServiceAuthorize::SessionId' has a wrong offset!");
static_assert(offsetof(FProfilerServiceAuthorize, InstanceId) == 0x000010, "Member 'FProfilerServiceAuthorize::InstanceId' has a wrong offset!");

}

