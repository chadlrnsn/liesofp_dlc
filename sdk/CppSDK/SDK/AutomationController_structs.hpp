#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AutomationController

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum AutomationController.EAutomationArtifactType
// NumValues: 0x0004
enum class EAutomationArtifactType : uint8
{
	None                                     = 0,
	Image                                    = 1,
	Comparison                               = 2,
	EAutomationArtifactType_MAX              = 3,
};

// Enum AutomationController.EAutomationState
// NumValues: 0x0006
enum class EAutomationState : uint8
{
	NotRun                                   = 0,
	InProcess                                = 1,
	Fail                                     = 2,
	Success                                  = 3,
	NotEnoughParticipants                    = 4,
	EAutomationState_MAX                     = 5,
};

// ScriptStruct AutomationController.AutomationArtifact
// 0x00C8 (0x00C8 - 0x0000)
struct FAutomationArtifact final
{
public:
	struct FGuid                                  ID;                                                // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAutomationArtifactType                       Type;                                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            Files;                                             // 0x0028(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x50];                                      // 0x0078(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAutomationArtifact) == 0x000008, "Wrong alignment on FAutomationArtifact");
static_assert(sizeof(FAutomationArtifact) == 0x0000C8, "Wrong size on FAutomationArtifact");
static_assert(offsetof(FAutomationArtifact, ID) == 0x000000, "Member 'FAutomationArtifact::ID' has a wrong offset!");
static_assert(offsetof(FAutomationArtifact, Name) == 0x000010, "Member 'FAutomationArtifact::Name' has a wrong offset!");
static_assert(offsetof(FAutomationArtifact, Type) == 0x000020, "Member 'FAutomationArtifact::Type' has a wrong offset!");
static_assert(offsetof(FAutomationArtifact, Files) == 0x000028, "Member 'FAutomationArtifact::Files' has a wrong offset!");

// ScriptStruct AutomationController.AutomatedTestResult
// 0x0060 (0x0060 - 0x0000)
struct FAutomatedTestResult final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TestDisplayName;                                   // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FullTestPath;                                      // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAutomationState                              State;                                             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAutomationExecutionEntry>      Entries;                                           // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         Warnings;                                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Errors;                                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FAutomationArtifact>            Artifacts;                                         // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FAutomatedTestResult) == 0x000008, "Wrong alignment on FAutomatedTestResult");
static_assert(sizeof(FAutomatedTestResult) == 0x000060, "Wrong size on FAutomatedTestResult");
static_assert(offsetof(FAutomatedTestResult, TestDisplayName) == 0x000010, "Member 'FAutomatedTestResult::TestDisplayName' has a wrong offset!");
static_assert(offsetof(FAutomatedTestResult, FullTestPath) == 0x000020, "Member 'FAutomatedTestResult::FullTestPath' has a wrong offset!");
static_assert(offsetof(FAutomatedTestResult, State) == 0x000030, "Member 'FAutomatedTestResult::State' has a wrong offset!");
static_assert(offsetof(FAutomatedTestResult, Entries) == 0x000038, "Member 'FAutomatedTestResult::Entries' has a wrong offset!");
static_assert(offsetof(FAutomatedTestResult, Warnings) == 0x000048, "Member 'FAutomatedTestResult::Warnings' has a wrong offset!");
static_assert(offsetof(FAutomatedTestResult, Errors) == 0x00004C, "Member 'FAutomatedTestResult::Errors' has a wrong offset!");
static_assert(offsetof(FAutomatedTestResult, Artifacts) == 0x000050, "Member 'FAutomatedTestResult::Artifacts' has a wrong offset!");

// ScriptStruct AutomationController.AutomatedTestPassResults
// 0x00B0 (0x00B0 - 0x0000)
struct FAutomatedTestPassResults final
{
public:
	class FString                                 ClientDescriptor;                                  // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReportCreatedOn;                                   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Succeeded;                                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SucceededWithWarnings;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Failed;                                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NotRun;                                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InProcess;                                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalDuration;                                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ComparisonExported;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ComparisonExportDirectory;                         // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAutomatedTestResult>           Tests;                                             // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x58];                                      // 0x0058(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAutomatedTestPassResults) == 0x000008, "Wrong alignment on FAutomatedTestPassResults");
static_assert(sizeof(FAutomatedTestPassResults) == 0x0000B0, "Wrong size on FAutomatedTestPassResults");
static_assert(offsetof(FAutomatedTestPassResults, ClientDescriptor) == 0x000000, "Member 'FAutomatedTestPassResults::ClientDescriptor' has a wrong offset!");
static_assert(offsetof(FAutomatedTestPassResults, ReportCreatedOn) == 0x000010, "Member 'FAutomatedTestPassResults::ReportCreatedOn' has a wrong offset!");
static_assert(offsetof(FAutomatedTestPassResults, Succeeded) == 0x000018, "Member 'FAutomatedTestPassResults::Succeeded' has a wrong offset!");
static_assert(offsetof(FAutomatedTestPassResults, SucceededWithWarnings) == 0x00001C, "Member 'FAutomatedTestPassResults::SucceededWithWarnings' has a wrong offset!");
static_assert(offsetof(FAutomatedTestPassResults, Failed) == 0x000020, "Member 'FAutomatedTestPassResults::Failed' has a wrong offset!");
static_assert(offsetof(FAutomatedTestPassResults, NotRun) == 0x000024, "Member 'FAutomatedTestPassResults::NotRun' has a wrong offset!");
static_assert(offsetof(FAutomatedTestPassResults, InProcess) == 0x000028, "Member 'FAutomatedTestPassResults::InProcess' has a wrong offset!");
static_assert(offsetof(FAutomatedTestPassResults, TotalDuration) == 0x00002C, "Member 'FAutomatedTestPassResults::TotalDuration' has a wrong offset!");
static_assert(offsetof(FAutomatedTestPassResults, ComparisonExported) == 0x000030, "Member 'FAutomatedTestPassResults::ComparisonExported' has a wrong offset!");
static_assert(offsetof(FAutomatedTestPassResults, ComparisonExportDirectory) == 0x000038, "Member 'FAutomatedTestPassResults::ComparisonExportDirectory' has a wrong offset!");
static_assert(offsetof(FAutomatedTestPassResults, Tests) == 0x000048, "Member 'FAutomatedTestPassResults::Tests' has a wrong offset!");

// ScriptStruct AutomationController.AutomatedTestFilter
// 0x0018 (0x0018 - 0x0000)
struct FAutomatedTestFilter final
{
public:
	class FString                                 Contains;                                          // 0x0000(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchFromStart;                                    // 0x0010(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAutomatedTestFilter) == 0x000008, "Wrong alignment on FAutomatedTestFilter");
static_assert(sizeof(FAutomatedTestFilter) == 0x000018, "Wrong size on FAutomatedTestFilter");
static_assert(offsetof(FAutomatedTestFilter, Contains) == 0x000000, "Member 'FAutomatedTestFilter::Contains' has a wrong offset!");
static_assert(offsetof(FAutomatedTestFilter, MatchFromStart) == 0x000010, "Member 'FAutomatedTestFilter::MatchFromStart' has a wrong offset!");

// ScriptStruct AutomationController.AutomatedTestGroup
// 0x0020 (0x0020 - 0x0000)
struct FAutomatedTestGroup final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAutomatedTestFilter>           Filters;                                           // 0x0010(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAutomatedTestGroup) == 0x000008, "Wrong alignment on FAutomatedTestGroup");
static_assert(sizeof(FAutomatedTestGroup) == 0x000020, "Wrong size on FAutomatedTestGroup");
static_assert(offsetof(FAutomatedTestGroup, Name) == 0x000000, "Member 'FAutomatedTestGroup::Name' has a wrong offset!");
static_assert(offsetof(FAutomatedTestGroup, Filters) == 0x000010, "Member 'FAutomatedTestGroup::Filters' has a wrong offset!");

}

