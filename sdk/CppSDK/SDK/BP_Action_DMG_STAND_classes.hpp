#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Action_DMG_STAND

#include "Basic.hpp"

#include "BP_Action_HitBase_classes.hpp"
#include "Engine_structs.hpp"
#include "ProjectP_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ProjectPContentInfo_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Action_DMG_STAND.BP_Action_DMG_STAND_C
// 0x0250 (0x0670 - 0x0420)
class UBP_Action_DMG_STAND_C : public UBP_Action_HitBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Action_DMG_STAND_C;              // 0x0420(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FLGameObjectHandle                     MoveModifierHandle_Horizontal;                     // 0x0428(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          Cached_BackHit;                                    // 0x042C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42D[0x3];                                      // 0x042D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Timer_OnHitAnimDurationEnded;                      // 0x0430(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLGameObjectHandle                     MoveModifierHandle_Vertical;                       // 0x0438(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          IsGuardRepulse;                                    // 0x043C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43D[0x3];                                      // 0x043D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DebugOnly_AttackerPos;                             // 0x0440(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cached_HitAngle;                                   // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Cached_AlignRot;                                   // 0x0450(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Cached_DoNotRotate;                                // 0x045C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45D[0x3];                                      // 0x045D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Timer_OnStartFalling;                              // 0x0460(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Cached_IsFloatingState;                            // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Cached_HitAnimDurationEnded;                       // 0x0469(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46A[0x6];                                      // 0x046A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Timer_OnHitAnimDuration;                           // 0x0470(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Cached_IsGetupPlayRateApplied;                     // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_479[0x3];                                      // 0x0479(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGameObjectHandle                     Cached_GameHandle_GetupPlayRate;                   // 0x047C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          BladeWeightEnable;                                 // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Cached_IsSpecialHit;                               // 0x0481(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_482[0x2];                                      // 0x0482(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CommonAnim_Tough_SpeicialHit;                      // 0x0484(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48C[0x4];                                      // 0x048C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DelayedCancelMoveHandle;                           // 0x0490(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   Cached_SelectedHitMotionName;                      // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLHitInfo                              Temp_HitInfo;                                      // 0x04A0(0x0150)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference)
	struct FVector                                Cached_HitOrigin;                                  // 0x05F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELHitMotionType                               Cached_SelectedHitMotionType;                      // 0x05FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELHitMotionDirectionType                      Cached_SelectedHitMotionDirection;                 // 0x05FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cached_Groggy_Special;                             // 0x05FE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FF[0x1];                                      // 0x05FF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DownState_Intro;                                   // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DownState_Lying;                                   // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DownState_Getup;                                   // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Cached_CurrentDownState;                           // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Debug_PreviousDownState;                           // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Option_TraceDebugLog;                              // 0x0628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_629[0x7];                                      // 0x0629(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Timer_OnTooLongFalling;                            // 0x0630(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Timer_OnTooLongFalling_ReserverStop;               // 0x0638(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Timer_OnTooLongHitting;                            // 0x0640(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         ApplyInput_GuardDash_Duration_Ratio;               // 0x0648(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64C[0x4];                                      // 0x064C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Timer_OnApplyInput_GuardDash;                      // 0x0650(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLGameObjectHandle                     Handle_RegCMD_Guard;                               // 0x0658(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          bUseFloatingCeilingMotion;                         // 0x065C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65D[0x3];                                      // 0x065D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Cached_CalcHitAnimDuration;                        // 0x0660(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_664[0x4];                                      // 0x0664(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULActPayload_HitAnim*                   Cached_Payload_Hit_Anim;                           // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Action_DMG_STAND(int32 EntryPoint);
	void OnTooLongHitting();
	void OnReseveStop();
	void OnTooLongFalling();
	void OnCurrMontageBlendOutStarted(class UAnimMontage* Montage, bool bInterrupted, int32 MontageInstanceID);
	void OnStartFalling();
	void ProcessHitAnim();
	void OnCurrMontageEnded(class UAnimMontage* Montage, bool bInterrupted, int32 MontageInstanceID);
	void OnStop(class ULActBase* ReasonAction, class FName Reason);
	void OnStart();
	bool OnLanded(class ACharacter* LandingChar, const struct FHitResult& Hit);
	void HitDurationEnded();
	void Applyinput_GuardDash();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Action_DMG_STAND_C">();
	}
	static class UBP_Action_DMG_STAND_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Action_DMG_STAND_C>();
	}
};
static_assert(alignof(UBP_Action_DMG_STAND_C) == 0x000008, "Wrong alignment on UBP_Action_DMG_STAND_C");
static_assert(sizeof(UBP_Action_DMG_STAND_C) == 0x000670, "Wrong size on UBP_Action_DMG_STAND_C");
static_assert(offsetof(UBP_Action_DMG_STAND_C, UberGraphFrame_BP_Action_DMG_STAND_C) == 0x000420, "Member 'UBP_Action_DMG_STAND_C::UberGraphFrame_BP_Action_DMG_STAND_C' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, MoveModifierHandle_Horizontal) == 0x000428, "Member 'UBP_Action_DMG_STAND_C::MoveModifierHandle_Horizontal' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Cached_BackHit) == 0x00042C, "Member 'UBP_Action_DMG_STAND_C::Cached_BackHit' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Timer_OnHitAnimDurationEnded) == 0x000430, "Member 'UBP_Action_DMG_STAND_C::Timer_OnHitAnimDurationEnded' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, MoveModifierHandle_Vertical) == 0x000438, "Member 'UBP_Action_DMG_STAND_C::MoveModifierHandle_Vertical' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, IsGuardRepulse) == 0x00043C, "Member 'UBP_Action_DMG_STAND_C::IsGuardRepulse' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, DebugOnly_AttackerPos) == 0x000440, "Member 'UBP_Action_DMG_STAND_C::DebugOnly_AttackerPos' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Cached_HitAngle) == 0x00044C, "Member 'UBP_Action_DMG_STAND_C::Cached_HitAngle' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Cached_AlignRot) == 0x000450, "Member 'UBP_Action_DMG_STAND_C::Cached_AlignRot' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Cached_DoNotRotate) == 0x00045C, "Member 'UBP_Action_DMG_STAND_C::Cached_DoNotRotate' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Timer_OnStartFalling) == 0x000460, "Member 'UBP_Action_DMG_STAND_C::Timer_OnStartFalling' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Cached_IsFloatingState) == 0x000468, "Member 'UBP_Action_DMG_STAND_C::Cached_IsFloatingState' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Cached_HitAnimDurationEnded) == 0x000469, "Member 'UBP_Action_DMG_STAND_C::Cached_HitAnimDurationEnded' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Timer_OnHitAnimDuration) == 0x000470, "Member 'UBP_Action_DMG_STAND_C::Timer_OnHitAnimDuration' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Cached_IsGetupPlayRateApplied) == 0x000478, "Member 'UBP_Action_DMG_STAND_C::Cached_IsGetupPlayRateApplied' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Cached_GameHandle_GetupPlayRate) == 0x00047C, "Member 'UBP_Action_DMG_STAND_C::Cached_GameHandle_GetupPlayRate' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, BladeWeightEnable) == 0x000480, "Member 'UBP_Action_DMG_STAND_C::BladeWeightEnable' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Cached_IsSpecialHit) == 0x000481, "Member 'UBP_Action_DMG_STAND_C::Cached_IsSpecialHit' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, CommonAnim_Tough_SpeicialHit) == 0x000484, "Member 'UBP_Action_DMG_STAND_C::CommonAnim_Tough_SpeicialHit' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, DelayedCancelMoveHandle) == 0x000490, "Member 'UBP_Action_DMG_STAND_C::DelayedCancelMoveHandle' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Cached_SelectedHitMotionName) == 0x000498, "Member 'UBP_Action_DMG_STAND_C::Cached_SelectedHitMotionName' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Temp_HitInfo) == 0x0004A0, "Member 'UBP_Action_DMG_STAND_C::Temp_HitInfo' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Cached_HitOrigin) == 0x0005F0, "Member 'UBP_Action_DMG_STAND_C::Cached_HitOrigin' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Cached_SelectedHitMotionType) == 0x0005FC, "Member 'UBP_Action_DMG_STAND_C::Cached_SelectedHitMotionType' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Cached_SelectedHitMotionDirection) == 0x0005FD, "Member 'UBP_Action_DMG_STAND_C::Cached_SelectedHitMotionDirection' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Cached_Groggy_Special) == 0x0005FE, "Member 'UBP_Action_DMG_STAND_C::Cached_Groggy_Special' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, DownState_Intro) == 0x000600, "Member 'UBP_Action_DMG_STAND_C::DownState_Intro' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, DownState_Lying) == 0x000608, "Member 'UBP_Action_DMG_STAND_C::DownState_Lying' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, DownState_Getup) == 0x000610, "Member 'UBP_Action_DMG_STAND_C::DownState_Getup' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Cached_CurrentDownState) == 0x000618, "Member 'UBP_Action_DMG_STAND_C::Cached_CurrentDownState' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Debug_PreviousDownState) == 0x000620, "Member 'UBP_Action_DMG_STAND_C::Debug_PreviousDownState' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Option_TraceDebugLog) == 0x000628, "Member 'UBP_Action_DMG_STAND_C::Option_TraceDebugLog' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Timer_OnTooLongFalling) == 0x000630, "Member 'UBP_Action_DMG_STAND_C::Timer_OnTooLongFalling' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Timer_OnTooLongFalling_ReserverStop) == 0x000638, "Member 'UBP_Action_DMG_STAND_C::Timer_OnTooLongFalling_ReserverStop' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Timer_OnTooLongHitting) == 0x000640, "Member 'UBP_Action_DMG_STAND_C::Timer_OnTooLongHitting' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, ApplyInput_GuardDash_Duration_Ratio) == 0x000648, "Member 'UBP_Action_DMG_STAND_C::ApplyInput_GuardDash_Duration_Ratio' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Timer_OnApplyInput_GuardDash) == 0x000650, "Member 'UBP_Action_DMG_STAND_C::Timer_OnApplyInput_GuardDash' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Handle_RegCMD_Guard) == 0x000658, "Member 'UBP_Action_DMG_STAND_C::Handle_RegCMD_Guard' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, bUseFloatingCeilingMotion) == 0x00065C, "Member 'UBP_Action_DMG_STAND_C::bUseFloatingCeilingMotion' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Cached_CalcHitAnimDuration) == 0x000660, "Member 'UBP_Action_DMG_STAND_C::Cached_CalcHitAnimDuration' has a wrong offset!");
static_assert(offsetof(UBP_Action_DMG_STAND_C, Cached_Payload_Hit_Anim) == 0x000668, "Member 'UBP_Action_DMG_STAND_C::Cached_Payload_Hit_Anim' has a wrong offset!");

}

