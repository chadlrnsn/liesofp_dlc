#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Action_JumpSkill

#include "Basic.hpp"

#include "ProjectP_structs.hpp"
#include "ProjectP_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Action_JumpSkill.BP_Action_JumpSkill_C
// 0x0088 (0x02F8 - 0x0270)
class UBP_Action_JumpSkill_C final : public ULAction_MultiAnim
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0270(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FLGameObjectHandle                     Cached_GameHandle_RootMotion;                      // 0x0278(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FVector                                Cached_DestLocation;                               // 0x027C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Cached_MoveDistance;                               // 0x0288(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Cached_TimerHandle_OnJumpStart;                    // 0x0298(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLGameObjectHandle                     Cached_GameHandle_Move;                            // 0x02A0(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FLGameObjectHandle                     Cached_GameHandle_Rot;                             // 0x02A4(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class UCurveVector*                           Option_Move_Curve_Skill13;                         // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Cached_MeshMove_Original;                          // 0x02B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Cached_MeshMove_TimerHandle;                       // 0x02C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Cached_MeshMove_Move;                              // 0x02C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Duration_move_Skill13;                             // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveMesh_Start_Time_Skill12;                       // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveMesh_Start_Time_Skill13;                       // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Move_dist_Skill12;                                 // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cached_AirLoopRot_Duration_Skill13;                // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveMeshStartBlend_Jump_Common;                    // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveMeshEndBlend_Jump_Common;                      // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Cached_SkillType;                                  // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Action_JumpSkill(int32 EntryPoint);
	void ReseveMoveMesh(float MoveDelayTime);
	void StopMoveMesh();
	void MoveMesh();
	void RecoverMesh();
	void OnTick(float DeltaTime);
	void OnCurrMontageBlendOutStarted(class UAnimMontage* Montage, bool bInterrupted, int32 MontageInstanceID);
	void CustomEvent();
	void OnJumpStart();
	void OnCurrMontageEnded(class UAnimMontage* Montage, bool bInterrupted, int32 MontageInstanceID);
	void OnStart();
	void OnNewAnimPlayed();
	void OnStop(class ULActBase* ReasonAction, class FName Reason);
	bool OnLanded(class ACharacter* LandingChar, const struct FHitResult& Hit);
	bool OnMoveBlockedBy(class ACharacter* BlockedChar, const struct FHitResult& Hit);
	int32 OnSelectNextAnim(class UAnimMontage* Montage, bool bInterrupted, int32 CurrentAnimIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Action_JumpSkill_C">();
	}
	static class UBP_Action_JumpSkill_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Action_JumpSkill_C>();
	}
};
static_assert(alignof(UBP_Action_JumpSkill_C) == 0x000008, "Wrong alignment on UBP_Action_JumpSkill_C");
static_assert(sizeof(UBP_Action_JumpSkill_C) == 0x0002F8, "Wrong size on UBP_Action_JumpSkill_C");
static_assert(offsetof(UBP_Action_JumpSkill_C, UberGraphFrame) == 0x000270, "Member 'UBP_Action_JumpSkill_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_Action_JumpSkill_C, Cached_GameHandle_RootMotion) == 0x000278, "Member 'UBP_Action_JumpSkill_C::Cached_GameHandle_RootMotion' has a wrong offset!");
static_assert(offsetof(UBP_Action_JumpSkill_C, Cached_DestLocation) == 0x00027C, "Member 'UBP_Action_JumpSkill_C::Cached_DestLocation' has a wrong offset!");
static_assert(offsetof(UBP_Action_JumpSkill_C, Cached_MoveDistance) == 0x000288, "Member 'UBP_Action_JumpSkill_C::Cached_MoveDistance' has a wrong offset!");
static_assert(offsetof(UBP_Action_JumpSkill_C, Cached_TimerHandle_OnJumpStart) == 0x000298, "Member 'UBP_Action_JumpSkill_C::Cached_TimerHandle_OnJumpStart' has a wrong offset!");
static_assert(offsetof(UBP_Action_JumpSkill_C, Cached_GameHandle_Move) == 0x0002A0, "Member 'UBP_Action_JumpSkill_C::Cached_GameHandle_Move' has a wrong offset!");
static_assert(offsetof(UBP_Action_JumpSkill_C, Cached_GameHandle_Rot) == 0x0002A4, "Member 'UBP_Action_JumpSkill_C::Cached_GameHandle_Rot' has a wrong offset!");
static_assert(offsetof(UBP_Action_JumpSkill_C, Option_Move_Curve_Skill13) == 0x0002A8, "Member 'UBP_Action_JumpSkill_C::Option_Move_Curve_Skill13' has a wrong offset!");
static_assert(offsetof(UBP_Action_JumpSkill_C, Cached_MeshMove_Original) == 0x0002B0, "Member 'UBP_Action_JumpSkill_C::Cached_MeshMove_Original' has a wrong offset!");
static_assert(offsetof(UBP_Action_JumpSkill_C, Cached_MeshMove_TimerHandle) == 0x0002C0, "Member 'UBP_Action_JumpSkill_C::Cached_MeshMove_TimerHandle' has a wrong offset!");
static_assert(offsetof(UBP_Action_JumpSkill_C, Cached_MeshMove_Move) == 0x0002C8, "Member 'UBP_Action_JumpSkill_C::Cached_MeshMove_Move' has a wrong offset!");
static_assert(offsetof(UBP_Action_JumpSkill_C, Duration_move_Skill13) == 0x0002D4, "Member 'UBP_Action_JumpSkill_C::Duration_move_Skill13' has a wrong offset!");
static_assert(offsetof(UBP_Action_JumpSkill_C, MoveMesh_Start_Time_Skill12) == 0x0002D8, "Member 'UBP_Action_JumpSkill_C::MoveMesh_Start_Time_Skill12' has a wrong offset!");
static_assert(offsetof(UBP_Action_JumpSkill_C, MoveMesh_Start_Time_Skill13) == 0x0002DC, "Member 'UBP_Action_JumpSkill_C::MoveMesh_Start_Time_Skill13' has a wrong offset!");
static_assert(offsetof(UBP_Action_JumpSkill_C, Move_dist_Skill12) == 0x0002E0, "Member 'UBP_Action_JumpSkill_C::Move_dist_Skill12' has a wrong offset!");
static_assert(offsetof(UBP_Action_JumpSkill_C, Cached_AirLoopRot_Duration_Skill13) == 0x0002E4, "Member 'UBP_Action_JumpSkill_C::Cached_AirLoopRot_Duration_Skill13' has a wrong offset!");
static_assert(offsetof(UBP_Action_JumpSkill_C, MoveMeshStartBlend_Jump_Common) == 0x0002E8, "Member 'UBP_Action_JumpSkill_C::MoveMeshStartBlend_Jump_Common' has a wrong offset!");
static_assert(offsetof(UBP_Action_JumpSkill_C, MoveMeshEndBlend_Jump_Common) == 0x0002EC, "Member 'UBP_Action_JumpSkill_C::MoveMeshEndBlend_Jump_Common' has a wrong offset!");
static_assert(offsetof(UBP_Action_JumpSkill_C, Cached_SkillType) == 0x0002F0, "Member 'UBP_Action_JumpSkill_C::Cached_SkillType' has a wrong offset!");

}

