#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MovieSystemDataBP

#include "Basic.hpp"

#include "ProjectP_structs.hpp"
#include "ProjectP_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass MovieSystemDataBP.MovieSystemDataBP_C
// 0x0068 (0x0258 - 0x01F0)
class AMovieSystemDataBP_C final : public ALMovieSystemData
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x01F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x01F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBinkMediaPlayer*                       FullScreenMoviePlayer;                             // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, struct FLMovieAudioSetting> MovieAudioSetting;                                 // 0x0208(0x0050)(Edit, BlueprintVisible)

public:
	void ExecuteUbergraph_MovieSystemDataBP(int32 EntryPoint);
	void StopBinkMovie(class FName MovieCodeName);
	void DeactivatePauseOnReachedEnd();
	void BndEvt__MovieSystemDataBP_FullScreenMoviePlayer_K2Node_ComponentBoundEvent_3_OnBinkMediaPlayerMediaPauseOnReachedEnd__DelegateSignature();
	void BndEvt__MovieSystemData_FullScreenMoviePlayer_K2Node_ComponentBoundEvent_0_OnBinkMediaPlayerMediaOpened__DelegateSignature(const class FString& OpenedUrl);
	void BndEvt__MovieSystemData_FullScreenMoviePlayer_K2Node_ComponentBoundEvent_1_OnBinkMediaPlayerMediaReachedEnd__DelegateSignature();
	void BndEvt__MovieSystemData_FullScreenMoviePlayer_K2Node_ComponentBoundEvent_2_OnBinkMediaPlayerMediaClosed__DelegateSignature();
	bool PlayBinkMovie(class FName MovieCodeName, const class FString& MovieUrl, bool bPauseOnReachedEnd);
	bool IsPlayingBinkMovie();
	void GetMovieVolume(class FName InMovieCodeName, float* Volume);
	void PushMovieSoundMixes(class FName MovieCodeName);
	void ClearMovieSoundMixes(class FName MovieCodeName);
	void EndMoviePushSoundMixes(class FName MovieCodeName);
	bool IsPauseOnReachedEnd();
	void MovieSeekToLast();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MovieSystemDataBP_C">();
	}
	static class AMovieSystemDataBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMovieSystemDataBP_C>();
	}
};
static_assert(alignof(AMovieSystemDataBP_C) == 0x000008, "Wrong alignment on AMovieSystemDataBP_C");
static_assert(sizeof(AMovieSystemDataBP_C) == 0x000258, "Wrong size on AMovieSystemDataBP_C");
static_assert(offsetof(AMovieSystemDataBP_C, UberGraphFrame) == 0x0001F0, "Member 'AMovieSystemDataBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMovieSystemDataBP_C, DefaultSceneRoot) == 0x0001F8, "Member 'AMovieSystemDataBP_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AMovieSystemDataBP_C, FullScreenMoviePlayer) == 0x000200, "Member 'AMovieSystemDataBP_C::FullScreenMoviePlayer' has a wrong offset!");
static_assert(offsetof(AMovieSystemDataBP_C, MovieAudioSetting) == 0x000208, "Member 'AMovieSystemDataBP_C::MovieAudioSetting' has a wrong offset!");

}

