#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CWBP_Template_AlignCurve

#include "Basic.hpp"

#include "ProjectP_structs.hpp"
#include "ProjectP_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass CWBP_Template_AlignCurve.CWBP_Template_AlignCurve_C
// 0x0070 (0x0370 - 0x0300)
#pragma pack(push, 0x1)
class alignas(0x10) ACWBP_Template_AlignCurve_C : public ALCameraWork
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0300(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         StartCameraDistance;                               // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CameraRotation;                                    // 0x0314(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                UpdateLocation;                                    // 0x0320(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurveFovOffset;                                    // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetAlignedOffset;                               // 0x0330(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultCameraDistanceRate;                         // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurveBoneAlpha;                                    // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurveCameraOffset;                                 // 0x0344(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTraceOwnerCharacter;                              // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_351[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetUpdateLocation;                              // 0x0354(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UpdateLocationInterpSpeed;                         // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_CWBP_Template_AlignCurve(int32 EntryPoint);
	void CurveUpdateLocation();
	void CurveUpdateRotation();
	void OnStopWork();
	void CurveStopTimeLine();
	void CurvePlayTimeLine();
	void OnChangeBlend(ELCameraWorkBlendState CameraWorkBlendState);
	void OnStartWork();
	void UpdateTargetView(float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CWBP_Template_AlignCurve_C">();
	}
	static class ACWBP_Template_AlignCurve_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACWBP_Template_AlignCurve_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ACWBP_Template_AlignCurve_C) == 0x000010, "Wrong alignment on ACWBP_Template_AlignCurve_C");
static_assert(sizeof(ACWBP_Template_AlignCurve_C) == 0x000370, "Wrong size on ACWBP_Template_AlignCurve_C");
static_assert(offsetof(ACWBP_Template_AlignCurve_C, UberGraphFrame) == 0x000300, "Member 'ACWBP_Template_AlignCurve_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ACWBP_Template_AlignCurve_C, DefaultSceneRoot) == 0x000308, "Member 'ACWBP_Template_AlignCurve_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ACWBP_Template_AlignCurve_C, StartCameraDistance) == 0x000310, "Member 'ACWBP_Template_AlignCurve_C::StartCameraDistance' has a wrong offset!");
static_assert(offsetof(ACWBP_Template_AlignCurve_C, CameraRotation) == 0x000314, "Member 'ACWBP_Template_AlignCurve_C::CameraRotation' has a wrong offset!");
static_assert(offsetof(ACWBP_Template_AlignCurve_C, UpdateLocation) == 0x000320, "Member 'ACWBP_Template_AlignCurve_C::UpdateLocation' has a wrong offset!");
static_assert(offsetof(ACWBP_Template_AlignCurve_C, CurveFovOffset) == 0x00032C, "Member 'ACWBP_Template_AlignCurve_C::CurveFovOffset' has a wrong offset!");
static_assert(offsetof(ACWBP_Template_AlignCurve_C, TargetAlignedOffset) == 0x000330, "Member 'ACWBP_Template_AlignCurve_C::TargetAlignedOffset' has a wrong offset!");
static_assert(offsetof(ACWBP_Template_AlignCurve_C, DefaultCameraDistanceRate) == 0x00033C, "Member 'ACWBP_Template_AlignCurve_C::DefaultCameraDistanceRate' has a wrong offset!");
static_assert(offsetof(ACWBP_Template_AlignCurve_C, CurveBoneAlpha) == 0x000340, "Member 'ACWBP_Template_AlignCurve_C::CurveBoneAlpha' has a wrong offset!");
static_assert(offsetof(ACWBP_Template_AlignCurve_C, CurveCameraOffset) == 0x000344, "Member 'ACWBP_Template_AlignCurve_C::CurveCameraOffset' has a wrong offset!");
static_assert(offsetof(ACWBP_Template_AlignCurve_C, bTraceOwnerCharacter) == 0x000350, "Member 'ACWBP_Template_AlignCurve_C::bTraceOwnerCharacter' has a wrong offset!");
static_assert(offsetof(ACWBP_Template_AlignCurve_C, TargetUpdateLocation) == 0x000354, "Member 'ACWBP_Template_AlignCurve_C::TargetUpdateLocation' has a wrong offset!");
static_assert(offsetof(ACWBP_Template_AlignCurve_C, UpdateLocationInterpSpeed) == 0x000360, "Member 'ACWBP_Template_AlignCurve_C::UpdateLocationInterpSpeed' has a wrong offset!");

}

