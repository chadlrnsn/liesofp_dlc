#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OptionSystemDataBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ProjectP_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefaultUseAutoNewTargetLockOn
// 0x0001 (0x0001 - 0x0000)
struct OptionSystemDataBP_C_GetDefaultUseAutoNewTargetLockOn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefaultUseAutoNewTargetLockOn) == 0x000001, "Wrong alignment on OptionSystemDataBP_C_GetDefaultUseAutoNewTargetLockOn");
static_assert(sizeof(OptionSystemDataBP_C_GetDefaultUseAutoNewTargetLockOn) == 0x000001, "Wrong size on OptionSystemDataBP_C_GetDefaultUseAutoNewTargetLockOn");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultUseAutoNewTargetLockOn, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefaultUseAutoNewTargetLockOn::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefaultPlayStyleOption
// 0x0001 (0x0001 - 0x0000)
struct OptionSystemDataBP_C_GetDefaultPlayStyleOption final
{
public:
	EPlayStyleOption                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefaultPlayStyleOption) == 0x000001, "Wrong alignment on OptionSystemDataBP_C_GetDefaultPlayStyleOption");
static_assert(sizeof(OptionSystemDataBP_C_GetDefaultPlayStyleOption) == 0x000001, "Wrong size on OptionSystemDataBP_C_GetDefaultPlayStyleOption");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultPlayStyleOption, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefaultPlayStyleOption::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetSelectableCameraSpeeds
// 0x0020 (0x0020 - 0x0000)
struct OptionSystemDataBP_C_GetSelectableCameraSpeeds final
{
public:
	ECameraDirectOption                           InRotator;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPad;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(OptionSystemDataBP_C_GetSelectableCameraSpeeds) == 0x000008, "Wrong alignment on OptionSystemDataBP_C_GetSelectableCameraSpeeds");
static_assert(sizeof(OptionSystemDataBP_C_GetSelectableCameraSpeeds) == 0x000020, "Wrong size on OptionSystemDataBP_C_GetSelectableCameraSpeeds");
static_assert(offsetof(OptionSystemDataBP_C_GetSelectableCameraSpeeds, InRotator) == 0x000000, "Member 'OptionSystemDataBP_C_GetSelectableCameraSpeeds::InRotator' has a wrong offset!");
static_assert(offsetof(OptionSystemDataBP_C_GetSelectableCameraSpeeds, IsPad) == 0x000001, "Member 'OptionSystemDataBP_C_GetSelectableCameraSpeeds::IsPad' has a wrong offset!");
static_assert(offsetof(OptionSystemDataBP_C_GetSelectableCameraSpeeds, ReturnValue) == 0x000008, "Member 'OptionSystemDataBP_C_GetSelectableCameraSpeeds::ReturnValue' has a wrong offset!");
static_assert(offsetof(OptionSystemDataBP_C_GetSelectableCameraSpeeds, K2Node_SwitchEnum_CmpSuccess) == 0x000018, "Member 'OptionSystemDataBP_C_GetSelectableCameraSpeeds::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefaultCameraSpeedIdx
// 0x000C (0x000C - 0x0000)
struct OptionSystemDataBP_C_GetDefaultCameraSpeedIdx final
{
public:
	ECameraDirectOption                           InRotator;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefaultCameraSpeedIdx) == 0x000004, "Wrong alignment on OptionSystemDataBP_C_GetDefaultCameraSpeedIdx");
static_assert(sizeof(OptionSystemDataBP_C_GetDefaultCameraSpeedIdx) == 0x00000C, "Wrong size on OptionSystemDataBP_C_GetDefaultCameraSpeedIdx");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultCameraSpeedIdx, InRotator) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefaultCameraSpeedIdx::InRotator' has a wrong offset!");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultCameraSpeedIdx, ReturnValue) == 0x000004, "Member 'OptionSystemDataBP_C_GetDefaultCameraSpeedIdx::ReturnValue' has a wrong offset!");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultCameraSpeedIdx, K2Node_SwitchEnum_CmpSuccess) == 0x000008, "Member 'OptionSystemDataBP_C_GetDefaultCameraSpeedIdx::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefaultCameraInvert
// 0x0003 (0x0003 - 0x0000)
struct OptionSystemDataBP_C_GetDefaultCameraInvert final
{
public:
	ECameraDirectOption                           InRotator;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefaultCameraInvert) == 0x000001, "Wrong alignment on OptionSystemDataBP_C_GetDefaultCameraInvert");
static_assert(sizeof(OptionSystemDataBP_C_GetDefaultCameraInvert) == 0x000003, "Wrong size on OptionSystemDataBP_C_GetDefaultCameraInvert");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultCameraInvert, InRotator) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefaultCameraInvert::InRotator' has a wrong offset!");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultCameraInvert, ReturnValue) == 0x000001, "Member 'OptionSystemDataBP_C_GetDefaultCameraInvert::ReturnValue' has a wrong offset!");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultCameraInvert, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'OptionSystemDataBP_C_GetDefaultCameraInvert::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefaultFullscreenMode
// 0x0001 (0x0001 - 0x0000)
struct OptionSystemDataBP_C_GetDefaultFullscreenMode final
{
public:
	EWindowMode                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefaultFullscreenMode) == 0x000001, "Wrong alignment on OptionSystemDataBP_C_GetDefaultFullscreenMode");
static_assert(sizeof(OptionSystemDataBP_C_GetDefaultFullscreenMode) == 0x000001, "Wrong size on OptionSystemDataBP_C_GetDefaultFullscreenMode");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultFullscreenMode, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefaultFullscreenMode::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefaultVSyncEnabled
// 0x0001 (0x0001 - 0x0000)
struct OptionSystemDataBP_C_GetDefaultVSyncEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefaultVSyncEnabled) == 0x000001, "Wrong alignment on OptionSystemDataBP_C_GetDefaultVSyncEnabled");
static_assert(sizeof(OptionSystemDataBP_C_GetDefaultVSyncEnabled) == 0x000001, "Wrong size on OptionSystemDataBP_C_GetDefaultVSyncEnabled");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultVSyncEnabled, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefaultVSyncEnabled::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetSelectableVolumes
// 0x0020 (0x0020 - 0x0000)
struct OptionSystemDataBP_C_GetSelectableVolumes final
{
public:
	ELVolumeType                                  InType;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(OptionSystemDataBP_C_GetSelectableVolumes) == 0x000008, "Wrong alignment on OptionSystemDataBP_C_GetSelectableVolumes");
static_assert(sizeof(OptionSystemDataBP_C_GetSelectableVolumes) == 0x000020, "Wrong size on OptionSystemDataBP_C_GetSelectableVolumes");
static_assert(offsetof(OptionSystemDataBP_C_GetSelectableVolumes, InType) == 0x000000, "Member 'OptionSystemDataBP_C_GetSelectableVolumes::InType' has a wrong offset!");
static_assert(offsetof(OptionSystemDataBP_C_GetSelectableVolumes, ReturnValue) == 0x000008, "Member 'OptionSystemDataBP_C_GetSelectableVolumes::ReturnValue' has a wrong offset!");
static_assert(offsetof(OptionSystemDataBP_C_GetSelectableVolumes, K2Node_SwitchEnum_CmpSuccess) == 0x000018, "Member 'OptionSystemDataBP_C_GetSelectableVolumes::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefaultVolumeIdx
// 0x000C (0x000C - 0x0000)
struct OptionSystemDataBP_C_GetDefaultVolumeIdx final
{
public:
	ELVolumeType                                  InType;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefaultVolumeIdx) == 0x000004, "Wrong alignment on OptionSystemDataBP_C_GetDefaultVolumeIdx");
static_assert(sizeof(OptionSystemDataBP_C_GetDefaultVolumeIdx) == 0x00000C, "Wrong size on OptionSystemDataBP_C_GetDefaultVolumeIdx");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultVolumeIdx, InType) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefaultVolumeIdx::InType' has a wrong offset!");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultVolumeIdx, ReturnValue) == 0x000004, "Member 'OptionSystemDataBP_C_GetDefaultVolumeIdx::ReturnValue' has a wrong offset!");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultVolumeIdx, K2Node_SwitchEnum_CmpSuccess) == 0x000008, "Member 'OptionSystemDataBP_C_GetDefaultVolumeIdx::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefaultInputPresetName
// 0x000C (0x000C - 0x0000)
struct OptionSystemDataBP_C_GetDefaultInputPresetName final
{
public:
	bool                                          IsGamePad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefaultInputPresetName) == 0x000004, "Wrong alignment on OptionSystemDataBP_C_GetDefaultInputPresetName");
static_assert(sizeof(OptionSystemDataBP_C_GetDefaultInputPresetName) == 0x00000C, "Wrong size on OptionSystemDataBP_C_GetDefaultInputPresetName");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultInputPresetName, IsGamePad) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefaultInputPresetName::IsGamePad' has a wrong offset!");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultInputPresetName, ReturnValue) == 0x000004, "Member 'OptionSystemDataBP_C_GetDefaultInputPresetName::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetSelectableLanguages
// 0x0010 (0x0010 - 0x0000)
struct OptionSystemDataBP_C_GetSelectableLanguages final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(OptionSystemDataBP_C_GetSelectableLanguages) == 0x000008, "Wrong alignment on OptionSystemDataBP_C_GetSelectableLanguages");
static_assert(sizeof(OptionSystemDataBP_C_GetSelectableLanguages) == 0x000010, "Wrong size on OptionSystemDataBP_C_GetSelectableLanguages");
static_assert(offsetof(OptionSystemDataBP_C_GetSelectableLanguages, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetSelectableLanguages::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefaultLanguage
// 0x0010 (0x0010 - 0x0000)
struct OptionSystemDataBP_C_GetDefaultLanguage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefaultLanguage) == 0x000008, "Wrong alignment on OptionSystemDataBP_C_GetDefaultLanguage");
static_assert(sizeof(OptionSystemDataBP_C_GetDefaultLanguage) == 0x000010, "Wrong size on OptionSystemDataBP_C_GetDefaultLanguage");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultLanguage, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefaultLanguage::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefaultScreenResolution
// 0x0018 (0x0018 - 0x0000)
struct OptionSystemDataBP_C_GetDefaultScreenResolution final
{
public:
	struct FIntPoint                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameUserSettings*                      CallFunc_GetGameUserSettings_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_GetDesktopResolution_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefaultScreenResolution) == 0x000008, "Wrong alignment on OptionSystemDataBP_C_GetDefaultScreenResolution");
static_assert(sizeof(OptionSystemDataBP_C_GetDefaultScreenResolution) == 0x000018, "Wrong size on OptionSystemDataBP_C_GetDefaultScreenResolution");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultScreenResolution, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefaultScreenResolution::ReturnValue' has a wrong offset!");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultScreenResolution, CallFunc_GetGameUserSettings_ReturnValue) == 0x000008, "Member 'OptionSystemDataBP_C_GetDefaultScreenResolution::CallFunc_GetGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultScreenResolution, CallFunc_GetDesktopResolution_ReturnValue) == 0x000010, "Member 'OptionSystemDataBP_C_GetDefaultScreenResolution::CallFunc_GetDesktopResolution_ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefaultUseAutoTargeting
// 0x0001 (0x0001 - 0x0000)
struct OptionSystemDataBP_C_GetDefaultUseAutoTargeting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefaultUseAutoTargeting) == 0x000001, "Wrong alignment on OptionSystemDataBP_C_GetDefaultUseAutoTargeting");
static_assert(sizeof(OptionSystemDataBP_C_GetDefaultUseAutoTargeting) == 0x000001, "Wrong size on OptionSystemDataBP_C_GetDefaultUseAutoTargeting");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultUseAutoTargeting, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefaultUseAutoTargeting::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefaultScalabilityLevel
// 0x0001 (0x0001 - 0x0000)
struct OptionSystemDataBP_C_GetDefaultScalabilityLevel final
{
public:
	ELScalabilityLevel                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefaultScalabilityLevel) == 0x000001, "Wrong alignment on OptionSystemDataBP_C_GetDefaultScalabilityLevel");
static_assert(sizeof(OptionSystemDataBP_C_GetDefaultScalabilityLevel) == 0x000001, "Wrong size on OptionSystemDataBP_C_GetDefaultScalabilityLevel");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultScalabilityLevel, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefaultScalabilityLevel::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefaultEnableMotionBlur
// 0x0001 (0x0001 - 0x0000)
struct OptionSystemDataBP_C_GetDefaultEnableMotionBlur final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefaultEnableMotionBlur) == 0x000001, "Wrong alignment on OptionSystemDataBP_C_GetDefaultEnableMotionBlur");
static_assert(sizeof(OptionSystemDataBP_C_GetDefaultEnableMotionBlur) == 0x000001, "Wrong size on OptionSystemDataBP_C_GetDefaultEnableMotionBlur");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultEnableMotionBlur, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefaultEnableMotionBlur::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefaultEnableTutorialPopup
// 0x0001 (0x0001 - 0x0000)
struct OptionSystemDataBP_C_GetDefaultEnableTutorialPopup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefaultEnableTutorialPopup) == 0x000001, "Wrong alignment on OptionSystemDataBP_C_GetDefaultEnableTutorialPopup");
static_assert(sizeof(OptionSystemDataBP_C_GetDefaultEnableTutorialPopup) == 0x000001, "Wrong size on OptionSystemDataBP_C_GetDefaultEnableTutorialPopup");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultEnableTutorialPopup, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefaultEnableTutorialPopup::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefaultLockOnImportanceWeightMultiply
// 0x0004 (0x0004 - 0x0000)
struct OptionSystemDataBP_C_GetDefaultLockOnImportanceWeightMultiply final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefaultLockOnImportanceWeightMultiply) == 0x000004, "Wrong alignment on OptionSystemDataBP_C_GetDefaultLockOnImportanceWeightMultiply");
static_assert(sizeof(OptionSystemDataBP_C_GetDefaultLockOnImportanceWeightMultiply) == 0x000004, "Wrong size on OptionSystemDataBP_C_GetDefaultLockOnImportanceWeightMultiply");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultLockOnImportanceWeightMultiply, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefaultLockOnImportanceWeightMultiply::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetSelectableLockOnImportanceWeightMultiply
// 0x0010 (0x0010 - 0x0000)
struct OptionSystemDataBP_C_GetSelectableLockOnImportanceWeightMultiply final
{
public:
	TArray<struct FLLockOnImportanceWeight>       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(OptionSystemDataBP_C_GetSelectableLockOnImportanceWeightMultiply) == 0x000008, "Wrong alignment on OptionSystemDataBP_C_GetSelectableLockOnImportanceWeightMultiply");
static_assert(sizeof(OptionSystemDataBP_C_GetSelectableLockOnImportanceWeightMultiply) == 0x000010, "Wrong size on OptionSystemDataBP_C_GetSelectableLockOnImportanceWeightMultiply");
static_assert(offsetof(OptionSystemDataBP_C_GetSelectableLockOnImportanceWeightMultiply, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetSelectableLockOnImportanceWeightMultiply::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefault_EnableAlignmentToCamera
// 0x0001 (0x0001 - 0x0000)
struct OptionSystemDataBP_C_GetDefault_EnableAlignmentToCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefault_EnableAlignmentToCamera) == 0x000001, "Wrong alignment on OptionSystemDataBP_C_GetDefault_EnableAlignmentToCamera");
static_assert(sizeof(OptionSystemDataBP_C_GetDefault_EnableAlignmentToCamera) == 0x000001, "Wrong size on OptionSystemDataBP_C_GetDefault_EnableAlignmentToCamera");
static_assert(offsetof(OptionSystemDataBP_C_GetDefault_EnableAlignmentToCamera, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefault_EnableAlignmentToCamera::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefault_EnableCameraShake
// 0x0001 (0x0001 - 0x0000)
struct OptionSystemDataBP_C_GetDefault_EnableCameraShake final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefault_EnableCameraShake) == 0x000001, "Wrong alignment on OptionSystemDataBP_C_GetDefault_EnableCameraShake");
static_assert(sizeof(OptionSystemDataBP_C_GetDefault_EnableCameraShake) == 0x000001, "Wrong size on OptionSystemDataBP_C_GetDefault_EnableCameraShake");
static_assert(offsetof(OptionSystemDataBP_C_GetDefault_EnableCameraShake, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefault_EnableCameraShake::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefault_EnableMoveCameraUpDown
// 0x0001 (0x0001 - 0x0000)
struct OptionSystemDataBP_C_GetDefault_EnableMoveCameraUpDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefault_EnableMoveCameraUpDown) == 0x000001, "Wrong alignment on OptionSystemDataBP_C_GetDefault_EnableMoveCameraUpDown");
static_assert(sizeof(OptionSystemDataBP_C_GetDefault_EnableMoveCameraUpDown) == 0x000001, "Wrong size on OptionSystemDataBP_C_GetDefault_EnableMoveCameraUpDown");
static_assert(offsetof(OptionSystemDataBP_C_GetDefault_EnableMoveCameraUpDown, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefault_EnableMoveCameraUpDown::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefaultHUDVisibility
// 0x0001 (0x0001 - 0x0000)
struct OptionSystemDataBP_C_GetDefaultHUDVisibility final
{
public:
	ELHUDVisible                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefaultHUDVisibility) == 0x000001, "Wrong alignment on OptionSystemDataBP_C_GetDefaultHUDVisibility");
static_assert(sizeof(OptionSystemDataBP_C_GetDefaultHUDVisibility) == 0x000001, "Wrong size on OptionSystemDataBP_C_GetDefaultHUDVisibility");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultHUDVisibility, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefaultHUDVisibility::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefaultEnableBloodExpression
// 0x0001 (0x0001 - 0x0000)
struct OptionSystemDataBP_C_GetDefaultEnableBloodExpression final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefaultEnableBloodExpression) == 0x000001, "Wrong alignment on OptionSystemDataBP_C_GetDefaultEnableBloodExpression");
static_assert(sizeof(OptionSystemDataBP_C_GetDefaultEnableBloodExpression) == 0x000001, "Wrong size on OptionSystemDataBP_C_GetDefaultEnableBloodExpression");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultEnableBloodExpression, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefaultEnableBloodExpression::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefaultFramerateLimit
// 0x0001 (0x0001 - 0x0000)
struct OptionSystemDataBP_C_GetDefaultFramerateLimit final
{
public:
	ELFramerateLimit                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefaultFramerateLimit) == 0x000001, "Wrong alignment on OptionSystemDataBP_C_GetDefaultFramerateLimit");
static_assert(sizeof(OptionSystemDataBP_C_GetDefaultFramerateLimit) == 0x000001, "Wrong size on OptionSystemDataBP_C_GetDefaultFramerateLimit");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultFramerateLimit, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefaultFramerateLimit::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefaultEnableVideoSubtitle
// 0x0001 (0x0001 - 0x0000)
struct OptionSystemDataBP_C_GetDefaultEnableVideoSubtitle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefaultEnableVideoSubtitle) == 0x000001, "Wrong alignment on OptionSystemDataBP_C_GetDefaultEnableVideoSubtitle");
static_assert(sizeof(OptionSystemDataBP_C_GetDefaultEnableVideoSubtitle) == 0x000001, "Wrong size on OptionSystemDataBP_C_GetDefaultEnableVideoSubtitle");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultEnableVideoSubtitle, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefaultEnableVideoSubtitle::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetSelectableDeadZone
// 0x0018 (0x0018 - 0x0000)
struct OptionSystemDataBP_C_GetSelectableDeadZone final
{
public:
	bool                                          LeftStick;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(OptionSystemDataBP_C_GetSelectableDeadZone) == 0x000008, "Wrong alignment on OptionSystemDataBP_C_GetSelectableDeadZone");
static_assert(sizeof(OptionSystemDataBP_C_GetSelectableDeadZone) == 0x000018, "Wrong size on OptionSystemDataBP_C_GetSelectableDeadZone");
static_assert(offsetof(OptionSystemDataBP_C_GetSelectableDeadZone, LeftStick) == 0x000000, "Member 'OptionSystemDataBP_C_GetSelectableDeadZone::LeftStick' has a wrong offset!");
static_assert(offsetof(OptionSystemDataBP_C_GetSelectableDeadZone, ReturnValue) == 0x000008, "Member 'OptionSystemDataBP_C_GetSelectableDeadZone::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetSelectableForceFeedback
// 0x0010 (0x0010 - 0x0000)
struct OptionSystemDataBP_C_GetSelectableForceFeedback final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(OptionSystemDataBP_C_GetSelectableForceFeedback) == 0x000008, "Wrong alignment on OptionSystemDataBP_C_GetSelectableForceFeedback");
static_assert(sizeof(OptionSystemDataBP_C_GetSelectableForceFeedback) == 0x000010, "Wrong size on OptionSystemDataBP_C_GetSelectableForceFeedback");
static_assert(offsetof(OptionSystemDataBP_C_GetSelectableForceFeedback, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetSelectableForceFeedback::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefaultDeadZoneIdx
// 0x0008 (0x0008 - 0x0000)
struct OptionSystemDataBP_C_GetDefaultDeadZoneIdx final
{
public:
	bool                                          LeftStick;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefaultDeadZoneIdx) == 0x000004, "Wrong alignment on OptionSystemDataBP_C_GetDefaultDeadZoneIdx");
static_assert(sizeof(OptionSystemDataBP_C_GetDefaultDeadZoneIdx) == 0x000008, "Wrong size on OptionSystemDataBP_C_GetDefaultDeadZoneIdx");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultDeadZoneIdx, LeftStick) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefaultDeadZoneIdx::LeftStick' has a wrong offset!");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultDeadZoneIdx, ReturnValue) == 0x000004, "Member 'OptionSystemDataBP_C_GetDefaultDeadZoneIdx::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefaultForceFeedbackIdx
// 0x0004 (0x0004 - 0x0000)
struct OptionSystemDataBP_C_GetDefaultForceFeedbackIdx final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefaultForceFeedbackIdx) == 0x000004, "Wrong alignment on OptionSystemDataBP_C_GetDefaultForceFeedbackIdx");
static_assert(sizeof(OptionSystemDataBP_C_GetDefaultForceFeedbackIdx) == 0x000004, "Wrong size on OptionSystemDataBP_C_GetDefaultForceFeedbackIdx");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultForceFeedbackIdx, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefaultForceFeedbackIdx::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefaultSelectableMouseSensitivityMultiplyIdx
// 0x0004 (0x0004 - 0x0000)
struct OptionSystemDataBP_C_GetDefaultSelectableMouseSensitivityMultiplyIdx final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefaultSelectableMouseSensitivityMultiplyIdx) == 0x000004, "Wrong alignment on OptionSystemDataBP_C_GetDefaultSelectableMouseSensitivityMultiplyIdx");
static_assert(sizeof(OptionSystemDataBP_C_GetDefaultSelectableMouseSensitivityMultiplyIdx) == 0x000004, "Wrong size on OptionSystemDataBP_C_GetDefaultSelectableMouseSensitivityMultiplyIdx");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultSelectableMouseSensitivityMultiplyIdx, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefaultSelectableMouseSensitivityMultiplyIdx::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetSelectableMouseSensitivityMultiply
// 0x0010 (0x0010 - 0x0000)
struct OptionSystemDataBP_C_GetSelectableMouseSensitivityMultiply final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(OptionSystemDataBP_C_GetSelectableMouseSensitivityMultiply) == 0x000008, "Wrong alignment on OptionSystemDataBP_C_GetSelectableMouseSensitivityMultiply");
static_assert(sizeof(OptionSystemDataBP_C_GetSelectableMouseSensitivityMultiply) == 0x000010, "Wrong size on OptionSystemDataBP_C_GetSelectableMouseSensitivityMultiply");
static_assert(offsetof(OptionSystemDataBP_C_GetSelectableMouseSensitivityMultiply, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetSelectableMouseSensitivityMultiply::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetSelectableFramerateLimits
// 0x0010 (0x0010 - 0x0000)
struct OptionSystemDataBP_C_GetSelectableFramerateLimits final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(OptionSystemDataBP_C_GetSelectableFramerateLimits) == 0x000008, "Wrong alignment on OptionSystemDataBP_C_GetSelectableFramerateLimits");
static_assert(sizeof(OptionSystemDataBP_C_GetSelectableFramerateLimits) == 0x000010, "Wrong size on OptionSystemDataBP_C_GetSelectableFramerateLimits");
static_assert(offsetof(OptionSystemDataBP_C_GetSelectableFramerateLimits, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetSelectableFramerateLimits::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefaultUseHDR
// 0x0001 (0x0001 - 0x0000)
struct OptionSystemDataBP_C_GetDefaultUseHDR final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefaultUseHDR) == 0x000001, "Wrong alignment on OptionSystemDataBP_C_GetDefaultUseHDR");
static_assert(sizeof(OptionSystemDataBP_C_GetDefaultUseHDR) == 0x000001, "Wrong size on OptionSystemDataBP_C_GetDefaultUseHDR");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultUseHDR, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefaultUseHDR::ReturnValue' has a wrong offset!");

// Function OptionSystemDataBP.OptionSystemDataBP_C.GetDefaultSubtitleSize
// 0x0004 (0x0004 - 0x0000)
struct OptionSystemDataBP_C_GetDefaultSubtitleSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(OptionSystemDataBP_C_GetDefaultSubtitleSize) == 0x000004, "Wrong alignment on OptionSystemDataBP_C_GetDefaultSubtitleSize");
static_assert(sizeof(OptionSystemDataBP_C_GetDefaultSubtitleSize) == 0x000004, "Wrong size on OptionSystemDataBP_C_GetDefaultSubtitleSize");
static_assert(offsetof(OptionSystemDataBP_C_GetDefaultSubtitleSize, ReturnValue) == 0x000000, "Member 'OptionSystemDataBP_C_GetDefaultSubtitleSize::ReturnValue' has a wrong offset!");

}

