#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Weapon_Base

#include "Basic.hpp"

#include "BP_Weapon_Base_classes.hpp"
#include "BP_Weapon_Base_parameters.hpp"


namespace SDK
{

// Function BP_Weapon_Base.BP_Weapon_Base_C.ExecuteUbergraph_BP_Weapon_Base
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Weapon_Base_C::ExecuteUbergraph_BP_Weapon_Base(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "ExecuteUbergraph_BP_Weapon_Base");

	Params::BP_Weapon_Base_C_ExecuteUbergraph_BP_Weapon_Base Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.OnUpdateBreakBlade
// (Event, Public, BlueprintEvent)

void ABP_Weapon_Base_C::OnUpdateBreakBlade()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "OnUpdateBreakBlade");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.StartHideDerbisBlade
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_Weapon_Base_C::StartHideDerbisBlade()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "StartHideDerbisBlade");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.OnWeaponChanged
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALWeapon*                         From                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ALWeapon*                         To                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Weapon_Base_C::OnWeaponChanged(class ALWeapon* From, class ALWeapon* To)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "OnWeaponChanged");

	Params::BP_Weapon_Base_C_OnWeaponChanged Parms{};

	Parms.From = From;
	Parms.To = To;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.PlayDurabilityConsumeFX
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_Weapon_Base_C::PlayDurabilityConsumeFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "PlayDurabilityConsumeFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.RemoveElement
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ElementName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Weapon_Base_C::RemoveElement(class FName ElementName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "RemoveElement");

	Params::BP_Weapon_Base_C_RemoveElement Parms{};

	Parms.ElementName = ElementName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.ApplyElement
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ElementName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Weapon_Base_C::ApplyElement(class FName ElementName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "ApplyElement");

	Params::BP_Weapon_Base_C_ApplyElement Parms{};

	Parms.ElementName = ElementName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.StopTrailElementFX
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_Weapon_Base_C::StopTrailElementFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "StopTrailElementFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.PlayTrailElementFX
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_Weapon_Base_C::PlayTrailElementFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "PlayTrailElementFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.OnDropWeapon
// (Event, Public, BlueprintEvent)

void ABP_Weapon_Base_C::OnDropWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "OnDropWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.OnWeaponOnOff
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bOnOff                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Weapon_Base_C::OnWeaponOnOff(bool bOnOff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "OnWeaponOnOff");

	Params::BP_Weapon_Base_C_OnWeaponOnOff Parms{};

	Parms.bOnOff = bOnOff;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.RemoveMaterialVarying
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             MaterialFxCodename                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Weapon_Base_C::RemoveMaterialVarying(class FName MaterialFxCodename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "RemoveMaterialVarying");

	Params::BP_Weapon_Base_C_RemoveMaterialVarying Parms{};

	Parms.MaterialFxCodename = MaterialFxCodename;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.ApplyMaterialVarying
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             MaterialFxCodename                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Weapon_Base_C::ApplyMaterialVarying(class FName MaterialFxCodename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "ApplyMaterialVarying");

	Params::BP_Weapon_Base_C_ApplyMaterialVarying Parms{};

	Parms.MaterialFxCodename = MaterialFxCodename;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.OnWeaponHitDamage
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_Weapon_Base_C::OnWeaponHitDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "OnWeaponHitDamage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.OnWeaponRespawn
// (Event, Public, BlueprintEvent)

void ABP_Weapon_Base_C::OnWeaponRespawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "OnWeaponRespawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.OnApplyRunningAbnormal
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsApply                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             AbnormalCodeName                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Weapon_Base_C::OnApplyRunningAbnormal(bool IsApply, class FName AbnormalCodeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "OnApplyRunningAbnormal");

	Params::BP_Weapon_Base_C_OnApplyRunningAbnormal Parms{};

	Parms.IsApply = IsApply;
	Parms.AbnormalCodeName = AbnormalCodeName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.JoinHandleAndBladeMeshComponents
// (Event, Public, BlueprintEvent)

void ABP_Weapon_Base_C::JoinHandleAndBladeMeshComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "JoinHandleAndBladeMeshComponents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.Build Auto Collision
// (BlueprintCallable, BlueprintEvent)

void ABP_Weapon_Base_C::Build_Auto_Collision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "Build Auto Collision");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.Post Build
// (BlueprintCallable, BlueprintEvent)

void ABP_Weapon_Base_C::Post_Build()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "Post Build");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.BuildWeapon
// (Event, Public, BlueprintEvent)

void ABP_Weapon_Base_C::BuildWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "BuildWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.OnBreakBlade
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FVector                          BreakPointLocation                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ImpulseDirection                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Weapon_Base_C::OnBreakBlade(const struct FVector& BreakPointLocation, const struct FVector& ImpulseDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "OnBreakBlade");

	Params::BP_Weapon_Base_C_OnBreakBlade Parms{};

	Parms.BreakPointLocation = std::move(BreakPointLocation);
	Parms.ImpulseDirection = std::move(ImpulseDirection);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Weapon_Base_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.Duplicate Handle
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Weapon_Base_C::Duplicate_Handle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "Duplicate Handle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.Join Handle And  Blade Mesh Component
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Weapon_Base_C::Join_Handle_And__Blade_Mesh_Component()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "Join Handle And  Blade Mesh Component");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.OnImpl Make Weapon
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Weapon_Base_C::OnImpl_Make_Weapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "OnImpl Make Weapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.OnImpl Break Blade
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Weapon_Base_C::OnImpl_Break_Blade()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "OnImpl Break Blade");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.OnImpl Drop Weapon
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Weapon_Base_C::OnImpl_Drop_Weapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "OnImpl Drop Weapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.OnImpl Weapon Hit Damage
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Weapon_Base_C::OnImpl_Weapon_Hit_Damage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "OnImpl Weapon Hit Damage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.OnImpl Apply Running Abnormal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsApply                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             Abnormal_Code_Name                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Weapon_Base_C::OnImpl_Apply_Running_Abnormal(bool IsApply, class FName Abnormal_Code_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "OnImpl Apply Running Abnormal");

	Params::BP_Weapon_Base_C_OnImpl_Apply_Running_Abnormal Parms{};

	Parms.IsApply = IsApply;
	Parms.Abnormal_Code_Name = Abnormal_Code_Name;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.PutOnAbnormal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InAbnormalCodeName                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Weapon_Base_C::PutOnAbnormal(const class FName InAbnormalCodeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "PutOnAbnormal");

	Params::BP_Weapon_Base_C_PutOnAbnormal Parms{};

	Parms.InAbnormalCodeName = InAbnormalCodeName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.IsAppliedGroupAbnormal
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             GroupCodename                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Weapon_Base_C::IsAppliedGroupAbnormal(const class FName GroupCodename, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "IsAppliedGroupAbnormal");

	Params::BP_Weapon_Base_C_IsAppliedGroupAbnormal Parms{};

	Parms.GroupCodename = GroupCodename;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.TakeOffbyGroupAbnormal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             GroupCodename                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Weapon_Base_C::TakeOffbyGroupAbnormal(const class FName GroupCodename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "TakeOffbyGroupAbnormal");

	Params::BP_Weapon_Base_C_TakeOffbyGroupAbnormal Parms{};

	Parms.GroupCodename = GroupCodename;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.OnImpl Weapon OnOff
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bOn                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Weapon_Base_C::OnImpl_Weapon_OnOff(bool bOn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "OnImpl Weapon OnOff");

	Params::BP_Weapon_Base_C_OnImpl_Weapon_OnOff Parms{};

	Parms.bOn = bOn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.PutOn_TakeOff_EquipAbnormal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bPutOn                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Weapon_Base_C::PutOn_TakeOff_EquipAbnormal(bool bPutOn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "PutOn_TakeOff_EquipAbnormal");

	Params::BP_Weapon_Base_C_PutOn_TakeOff_EquipAbnormal Parms{};

	Parms.bPutOn = bPutOn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.CreateHandleTemplateActor
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALWeapon*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class ALWeapon* ABP_Weapon_Base_C::CreateHandleTemplateActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "CreateHandleTemplateActor");

	Params::BP_Weapon_Base_C_CreateHandleTemplateActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.MoveWeaponActorOnPenetrait
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Weapon_Base_C::MoveWeaponActorOnPenetrait()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "MoveWeaponActorOnPenetrait");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.OnImpl Weapon Changed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALWeapon*                         From                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ALWeapon*                         To                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Weapon_Base_C::OnImpl_Weapon_Changed(class ALWeapon* From, class ALWeapon* To)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "OnImpl Weapon Changed");

	Params::BP_Weapon_Base_C_OnImpl_Weapon_Changed Parms{};

	Parms.From = From;
	Parms.To = To;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.TakeOffAbnormal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InAbnormalCodeName                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Immediately                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Weapon_Base_C::TakeOffAbnormal(class FName InAbnormalCodeName, bool Immediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "TakeOffAbnormal");

	Params::BP_Weapon_Base_C_TakeOffAbnormal Parms{};

	Parms.InAbnormalCodeName = InAbnormalCodeName;
	Parms.Immediately = Immediately;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Weapon_Base.BP_Weapon_Base_C.SetWeaponFableArtsSkill
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             OverrideBladeSkillCodeName                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             OverrideHandleSkillCodeName                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Weapon_Base_C::SetWeaponFableArtsSkill(class FName OverrideBladeSkillCodeName, class FName OverrideHandleSkillCodeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Weapon_Base_C", "SetWeaponFableArtsSkill");

	Params::BP_Weapon_Base_C_SetWeaponFableArtsSkill Parms{};

	Parms.OverrideBladeSkillCodeName = OverrideBladeSkillCodeName;
	Parms.OverrideHandleSkillCodeName = OverrideHandleSkillCodeName;

	UObject::ProcessEvent(Func, &Parms);
}

}

