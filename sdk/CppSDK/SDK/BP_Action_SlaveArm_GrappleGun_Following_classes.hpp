#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Action_SlaveArm_GrappleGun_Following

#include "Basic.hpp"

#include "ProjectP_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_Action_SlaveArm_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Action_SlaveArm_GrappleGun_Following.BP_Action_SlaveArm_GrappleGun_Following_C
// 0x0080 (0x0310 - 0x0290)
class UBP_Action_SlaveArm_GrappleGun_Following_C final : public UBP_Action_SlaveArm_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Action_SlaveArm_GrappleGun_Following_C; // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          IsWireAttached;                                    // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFollowingAnimEnd;                                // 0x0299(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29A[0x6];                                      // 0x029A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ALCharacter*                            Cached_Target;                                     // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Cached_StartLocation;                              // 0x02A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Cached_EndLocation;                                // 0x02B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FollowingDistance;                                 // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FollowingDirection;                                // 0x02C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElaspedTime;                                       // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Angle;                                             // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Gravity;                                           // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          JumpSmashEnable;                                   // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RisingAttackEnable;                                // 0x02E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFlying;                                          // 0x02E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFalling;                                         // 0x02E3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsLanded;                                          // 0x02E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E5[0x3];                                      // 0x02E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CachedActorLocation;                               // 0x02E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FollowingAnimMontageInstanceID;                    // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LandingAnimMontageInstanceID;                      // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TempAnimState;                                     // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Action_SlaveArm_GrappleGun_Following(int32 EntryPoint);
	void OnArrived();
	void OnStart();
	void OnTick(float DeltaTime);
	void OnCurrMontageEnded(class UAnimMontage* Montage, bool bInterrupted, int32 MontageInstanceID);
	void OnFollowingStop();
	void OnStop(class ULActBase* ReasonAction, class FName Reason);
	void OnWireAttached(class ALCharacter* Target);
	void SetReinforcedVariableValue(class FName VariableName, class FName Value);
	void ClearReinforcedVariableValues();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Action_SlaveArm_GrappleGun_Following_C">();
	}
	static class UBP_Action_SlaveArm_GrappleGun_Following_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Action_SlaveArm_GrappleGun_Following_C>();
	}
};
static_assert(alignof(UBP_Action_SlaveArm_GrappleGun_Following_C) == 0x000008, "Wrong alignment on UBP_Action_SlaveArm_GrappleGun_Following_C");
static_assert(sizeof(UBP_Action_SlaveArm_GrappleGun_Following_C) == 0x000310, "Wrong size on UBP_Action_SlaveArm_GrappleGun_Following_C");
static_assert(offsetof(UBP_Action_SlaveArm_GrappleGun_Following_C, UberGraphFrame_BP_Action_SlaveArm_GrappleGun_Following_C) == 0x000290, "Member 'UBP_Action_SlaveArm_GrappleGun_Following_C::UberGraphFrame_BP_Action_SlaveArm_GrappleGun_Following_C' has a wrong offset!");
static_assert(offsetof(UBP_Action_SlaveArm_GrappleGun_Following_C, IsWireAttached) == 0x000298, "Member 'UBP_Action_SlaveArm_GrappleGun_Following_C::IsWireAttached' has a wrong offset!");
static_assert(offsetof(UBP_Action_SlaveArm_GrappleGun_Following_C, IsFollowingAnimEnd) == 0x000299, "Member 'UBP_Action_SlaveArm_GrappleGun_Following_C::IsFollowingAnimEnd' has a wrong offset!");
static_assert(offsetof(UBP_Action_SlaveArm_GrappleGun_Following_C, Cached_Target) == 0x0002A0, "Member 'UBP_Action_SlaveArm_GrappleGun_Following_C::Cached_Target' has a wrong offset!");
static_assert(offsetof(UBP_Action_SlaveArm_GrappleGun_Following_C, Cached_StartLocation) == 0x0002A8, "Member 'UBP_Action_SlaveArm_GrappleGun_Following_C::Cached_StartLocation' has a wrong offset!");
static_assert(offsetof(UBP_Action_SlaveArm_GrappleGun_Following_C, Cached_EndLocation) == 0x0002B4, "Member 'UBP_Action_SlaveArm_GrappleGun_Following_C::Cached_EndLocation' has a wrong offset!");
static_assert(offsetof(UBP_Action_SlaveArm_GrappleGun_Following_C, FollowingDistance) == 0x0002C0, "Member 'UBP_Action_SlaveArm_GrappleGun_Following_C::FollowingDistance' has a wrong offset!");
static_assert(offsetof(UBP_Action_SlaveArm_GrappleGun_Following_C, FollowingDirection) == 0x0002C4, "Member 'UBP_Action_SlaveArm_GrappleGun_Following_C::FollowingDirection' has a wrong offset!");
static_assert(offsetof(UBP_Action_SlaveArm_GrappleGun_Following_C, ElaspedTime) == 0x0002D0, "Member 'UBP_Action_SlaveArm_GrappleGun_Following_C::ElaspedTime' has a wrong offset!");
static_assert(offsetof(UBP_Action_SlaveArm_GrappleGun_Following_C, Angle) == 0x0002D4, "Member 'UBP_Action_SlaveArm_GrappleGun_Following_C::Angle' has a wrong offset!");
static_assert(offsetof(UBP_Action_SlaveArm_GrappleGun_Following_C, Speed) == 0x0002D8, "Member 'UBP_Action_SlaveArm_GrappleGun_Following_C::Speed' has a wrong offset!");
static_assert(offsetof(UBP_Action_SlaveArm_GrappleGun_Following_C, Gravity) == 0x0002DC, "Member 'UBP_Action_SlaveArm_GrappleGun_Following_C::Gravity' has a wrong offset!");
static_assert(offsetof(UBP_Action_SlaveArm_GrappleGun_Following_C, JumpSmashEnable) == 0x0002E0, "Member 'UBP_Action_SlaveArm_GrappleGun_Following_C::JumpSmashEnable' has a wrong offset!");
static_assert(offsetof(UBP_Action_SlaveArm_GrappleGun_Following_C, RisingAttackEnable) == 0x0002E1, "Member 'UBP_Action_SlaveArm_GrappleGun_Following_C::RisingAttackEnable' has a wrong offset!");
static_assert(offsetof(UBP_Action_SlaveArm_GrappleGun_Following_C, IsFlying) == 0x0002E2, "Member 'UBP_Action_SlaveArm_GrappleGun_Following_C::IsFlying' has a wrong offset!");
static_assert(offsetof(UBP_Action_SlaveArm_GrappleGun_Following_C, IsFalling) == 0x0002E3, "Member 'UBP_Action_SlaveArm_GrappleGun_Following_C::IsFalling' has a wrong offset!");
static_assert(offsetof(UBP_Action_SlaveArm_GrappleGun_Following_C, IsLanded) == 0x0002E4, "Member 'UBP_Action_SlaveArm_GrappleGun_Following_C::IsLanded' has a wrong offset!");
static_assert(offsetof(UBP_Action_SlaveArm_GrappleGun_Following_C, CachedActorLocation) == 0x0002E8, "Member 'UBP_Action_SlaveArm_GrappleGun_Following_C::CachedActorLocation' has a wrong offset!");
static_assert(offsetof(UBP_Action_SlaveArm_GrappleGun_Following_C, FollowingAnimMontageInstanceID) == 0x0002F4, "Member 'UBP_Action_SlaveArm_GrappleGun_Following_C::FollowingAnimMontageInstanceID' has a wrong offset!");
static_assert(offsetof(UBP_Action_SlaveArm_GrappleGun_Following_C, LandingAnimMontageInstanceID) == 0x0002F8, "Member 'UBP_Action_SlaveArm_GrappleGun_Following_C::LandingAnimMontageInstanceID' has a wrong offset!");
static_assert(offsetof(UBP_Action_SlaveArm_GrappleGun_Following_C, TempAnimState) == 0x000300, "Member 'UBP_Action_SlaveArm_GrappleGun_Following_C::TempAnimState' has a wrong offset!");

}

