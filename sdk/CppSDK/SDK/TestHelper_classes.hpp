#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TestHelper

#include "Basic.hpp"

#include "ProjectPContentInfo_structs.hpp"
#include "ProjectP_structs.hpp"
#include "ProjectP_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass TestHelper.TestHelper_C
// 0x0250 (0x0430 - 0x01E0)
class ATestHelper_C final : public ALTestHelper
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x01E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Sphere;                                            // 0x01E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x01F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CamRotator;                                        // 0x01F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0200(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0208(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ALPCCharacter*                          Required_PC;                                       // 0x0210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class ALNPCSpot*                              Required_NPCSpot;                                  // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Option_CamMoveSpeed_Vertical;                      // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Option_CamMoveSpeed_Horizontal;                    // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_228[0x8];                                      // 0x0228(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Cached_InitTransform_PC;                           // 0x0230(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             Cached_InitTransform_NPC;                          // 0x0260(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ALPCCharacter*                          Cached_LPC;                                        // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ALNPCCharacter*                         Cached_LNPC;                                       // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Option_NPC_Skill_5;                                // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FName                                   Option_NPC_Skill_6;                                // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FName                                   Option_NPC_Skill_7;                                // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FName                                   Option_NPC_Skill_8;                                // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FName                                   Option_NPC_Skill_9;                                // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FName                                   Option_NPC_Skill_0;                                // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FTransform                             Cached_InitTransform_Helper;                       // 0x02D0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             Cached_InitTransform_Helper_CamRotator;            // 0x0300(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             Cached_InitTransform_Helper_Camera;                // 0x0330(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Option_RemoveBlurringEffect;                       // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          Option_Cam_TraceMove_PC;                           // 0x0361(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          Option_Cam_TraceMove_NPC;                          // 0x0362(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          Option_UseGameCamera;                              // 0x0363(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          Option_AllowDamage;                                // 0x0364(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          Option_ChangeEffect;                               // 0x0365(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	ELExplosionPowerType                          Option_Explosion_Power_Type;                       // 0x0366(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELExplosionDirectionType                      Option_Explosion_Direction_Type;                   // 0x0367(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Option_Explosion_Power_Type_Light;                 // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Option_Explosion_Power_Type_Medium;                // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Option_Explosion_Power_Type_Heavy;                 // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         Option_ChangeFX_1;                                 // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         Option_ChangeFX_2;                                 // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Option_DelayedHitFxTime;                           // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38C[0x4];                                      // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         Cached_DelayedHitFx_Fx_1;                          // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Cached_DelayedHitFx_Loc_1;                         // 0x0398(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Cached_DelayedHitFx_Rot_1;                         // 0x03A4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UNiagaraSystem*                         Cached_DelayedHitFx_Fx_2;                          // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Cached_DelayedHitFx_Loc_2;                         // 0x03B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Cached_DelayedHitFx_Rot_2;                         // 0x03C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ELHitFXType                                   DelayedHitFx_Type;                                 // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	ELHitFX_SecondaryType                         DelayedHitFx_Event;                                // 0x03D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3D2[0x2];                                      // 0x03D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DelayedHitFx_Attribute;                            // 0x03D4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	ELFxHitDirectionType                          DelayedHitFx_Direction;                            // 0x03DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	ELSwingPowerType                              DelayedHitFx_Power;                                // 0x03DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3DE[0x2];                                      // 0x03DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         Option_Explosion_Fx;                               // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Option_HitFxRotate;                                // 0x03E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Option_HitFxMove;                                  // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Option_HitFxChange;                                // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          Option_HitFxAngleInvert;                           // 0x03F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          Option_HitFxOnOff;                                 // 0x03FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_3FB[0x5];                                      // 0x03FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Option_HitFxAngleArray;                            // 0x0400(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ExposeOnSpawn)
	bool                                          Option_UseBullsOne;                                // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_411[0x3];                                      // 0x0411(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Option_Grab_SocketName_Attacker;                   // 0x0414(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FName                                   Option_Grab_SocketName_Victim;                     // 0x041C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicsAsset*                          Option_Grab_ChangePhysicsAsset;                    // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void InpActEvt_Enter_K2Node_InputKeyEvent_32(const struct FKey& Key);
	void InpActEvt_Five_K2Node_InputKeyEvent_31(const struct FKey& Key);
	void InpActEvt_A_K2Node_InputKeyEvent_30(const struct FKey& Key);
	void InpActEvt_A_K2Node_InputKeyEvent_29(const struct FKey& Key);
	void InpActEvt_S_K2Node_InputKeyEvent_28(const struct FKey& Key);
	void InpActEvt_S_K2Node_InputKeyEvent_27(const struct FKey& Key);
	void InpActEvt_W_K2Node_InputKeyEvent_26(const struct FKey& Key);
	void InpActEvt_W_K2Node_InputKeyEvent_25(const struct FKey& Key);
	void InpActEvt_D_K2Node_InputKeyEvent_24(const struct FKey& Key);
	void InpActEvt_D_K2Node_InputKeyEvent_23(const struct FKey& Key);
	void InpActEvt_Q_K2Node_InputKeyEvent_22(const struct FKey& Key);
	void InpActEvt_Q_K2Node_InputKeyEvent_21(const struct FKey& Key);
	void InpActEvt_E_K2Node_InputKeyEvent_20(const struct FKey& Key);
	void InpActEvt_E_K2Node_InputKeyEvent_19(const struct FKey& Key);
	void InpActEvt_X_K2Node_InputKeyEvent_18(const struct FKey& Key);
	void InpActEvt_X_K2Node_InputKeyEvent_17(const struct FKey& Key);
	void InpActEvt_T_K2Node_InputKeyEvent_16(const struct FKey& Key);
	void InpActEvt_Six_K2Node_InputKeyEvent_15(const struct FKey& Key);
	void InpActEvt_Seven_K2Node_InputKeyEvent_14(const struct FKey& Key);
	void InpActEvt_Eight_K2Node_InputKeyEvent_13(const struct FKey& Key);
	void InpActEvt_Nine_K2Node_InputKeyEvent_12(const struct FKey& Key);
	void InpActEvt_Zero_K2Node_InputKeyEvent_11(const struct FKey& Key);
	void InpActEvt_Y_K2Node_InputKeyEvent_10(const struct FKey& Key);
	void InpActEvt_Hyphen_K2Node_InputKeyEvent_9(const struct FKey& Key);
	void InpActEvt_Equals_K2Node_InputKeyEvent_8(const struct FKey& Key);
	void InpActEvt_H_K2Node_InputKeyEvent_7(const struct FKey& Key);
	void InpActEvt_M_K2Node_InputKeyEvent_6(const struct FKey& Key);
	void InpActEvt_N_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void InpActEvt_K_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_B_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_G_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_Q_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_Shift_Q_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void DoDelayedFx(class UNiagaraSystem* Fx, const struct FVector& Location, const struct FRotator& Rotation);
	void DoDelayedHitFX(const struct FVector& Location, const struct FRotator& Rotation);
	void ExecuteUbergraph_TestHelper(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TestHelper_C">();
	}
	static class ATestHelper_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATestHelper_C>();
	}
};
static_assert(alignof(ATestHelper_C) == 0x000010, "Wrong alignment on ATestHelper_C");
static_assert(sizeof(ATestHelper_C) == 0x000430, "Wrong size on ATestHelper_C");
static_assert(offsetof(ATestHelper_C, UberGraphFrame) == 0x0001E0, "Member 'ATestHelper_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Sphere) == 0x0001E8, "Member 'ATestHelper_C::Sphere' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Arrow) == 0x0001F0, "Member 'ATestHelper_C::Arrow' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, CamRotator) == 0x0001F8, "Member 'ATestHelper_C::CamRotator' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Scene) == 0x000200, "Member 'ATestHelper_C::Scene' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Camera) == 0x000208, "Member 'ATestHelper_C::Camera' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Required_PC) == 0x000210, "Member 'ATestHelper_C::Required_PC' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Required_NPCSpot) == 0x000218, "Member 'ATestHelper_C::Required_NPCSpot' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_CamMoveSpeed_Vertical) == 0x000220, "Member 'ATestHelper_C::Option_CamMoveSpeed_Vertical' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_CamMoveSpeed_Horizontal) == 0x000224, "Member 'ATestHelper_C::Option_CamMoveSpeed_Horizontal' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Cached_InitTransform_PC) == 0x000230, "Member 'ATestHelper_C::Cached_InitTransform_PC' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Cached_InitTransform_NPC) == 0x000260, "Member 'ATestHelper_C::Cached_InitTransform_NPC' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Cached_LPC) == 0x000290, "Member 'ATestHelper_C::Cached_LPC' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Cached_LNPC) == 0x000298, "Member 'ATestHelper_C::Cached_LNPC' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_NPC_Skill_5) == 0x0002A0, "Member 'ATestHelper_C::Option_NPC_Skill_5' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_NPC_Skill_6) == 0x0002A8, "Member 'ATestHelper_C::Option_NPC_Skill_6' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_NPC_Skill_7) == 0x0002B0, "Member 'ATestHelper_C::Option_NPC_Skill_7' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_NPC_Skill_8) == 0x0002B8, "Member 'ATestHelper_C::Option_NPC_Skill_8' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_NPC_Skill_9) == 0x0002C0, "Member 'ATestHelper_C::Option_NPC_Skill_9' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_NPC_Skill_0) == 0x0002C8, "Member 'ATestHelper_C::Option_NPC_Skill_0' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Cached_InitTransform_Helper) == 0x0002D0, "Member 'ATestHelper_C::Cached_InitTransform_Helper' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Cached_InitTransform_Helper_CamRotator) == 0x000300, "Member 'ATestHelper_C::Cached_InitTransform_Helper_CamRotator' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Cached_InitTransform_Helper_Camera) == 0x000330, "Member 'ATestHelper_C::Cached_InitTransform_Helper_Camera' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_RemoveBlurringEffect) == 0x000360, "Member 'ATestHelper_C::Option_RemoveBlurringEffect' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_Cam_TraceMove_PC) == 0x000361, "Member 'ATestHelper_C::Option_Cam_TraceMove_PC' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_Cam_TraceMove_NPC) == 0x000362, "Member 'ATestHelper_C::Option_Cam_TraceMove_NPC' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_UseGameCamera) == 0x000363, "Member 'ATestHelper_C::Option_UseGameCamera' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_AllowDamage) == 0x000364, "Member 'ATestHelper_C::Option_AllowDamage' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_ChangeEffect) == 0x000365, "Member 'ATestHelper_C::Option_ChangeEffect' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_Explosion_Power_Type) == 0x000366, "Member 'ATestHelper_C::Option_Explosion_Power_Type' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_Explosion_Direction_Type) == 0x000367, "Member 'ATestHelper_C::Option_Explosion_Direction_Type' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_Explosion_Power_Type_Light) == 0x000368, "Member 'ATestHelper_C::Option_Explosion_Power_Type_Light' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_Explosion_Power_Type_Medium) == 0x00036C, "Member 'ATestHelper_C::Option_Explosion_Power_Type_Medium' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_Explosion_Power_Type_Heavy) == 0x000370, "Member 'ATestHelper_C::Option_Explosion_Power_Type_Heavy' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_ChangeFX_1) == 0x000378, "Member 'ATestHelper_C::Option_ChangeFX_1' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_ChangeFX_2) == 0x000380, "Member 'ATestHelper_C::Option_ChangeFX_2' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_DelayedHitFxTime) == 0x000388, "Member 'ATestHelper_C::Option_DelayedHitFxTime' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Cached_DelayedHitFx_Fx_1) == 0x000390, "Member 'ATestHelper_C::Cached_DelayedHitFx_Fx_1' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Cached_DelayedHitFx_Loc_1) == 0x000398, "Member 'ATestHelper_C::Cached_DelayedHitFx_Loc_1' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Cached_DelayedHitFx_Rot_1) == 0x0003A4, "Member 'ATestHelper_C::Cached_DelayedHitFx_Rot_1' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Cached_DelayedHitFx_Fx_2) == 0x0003B0, "Member 'ATestHelper_C::Cached_DelayedHitFx_Fx_2' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Cached_DelayedHitFx_Loc_2) == 0x0003B8, "Member 'ATestHelper_C::Cached_DelayedHitFx_Loc_2' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Cached_DelayedHitFx_Rot_2) == 0x0003C4, "Member 'ATestHelper_C::Cached_DelayedHitFx_Rot_2' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, DelayedHitFx_Type) == 0x0003D0, "Member 'ATestHelper_C::DelayedHitFx_Type' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, DelayedHitFx_Event) == 0x0003D1, "Member 'ATestHelper_C::DelayedHitFx_Event' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, DelayedHitFx_Attribute) == 0x0003D4, "Member 'ATestHelper_C::DelayedHitFx_Attribute' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, DelayedHitFx_Direction) == 0x0003DC, "Member 'ATestHelper_C::DelayedHitFx_Direction' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, DelayedHitFx_Power) == 0x0003DD, "Member 'ATestHelper_C::DelayedHitFx_Power' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_Explosion_Fx) == 0x0003E0, "Member 'ATestHelper_C::Option_Explosion_Fx' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_HitFxRotate) == 0x0003E8, "Member 'ATestHelper_C::Option_HitFxRotate' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_HitFxMove) == 0x0003F4, "Member 'ATestHelper_C::Option_HitFxMove' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_HitFxChange) == 0x0003F8, "Member 'ATestHelper_C::Option_HitFxChange' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_HitFxAngleInvert) == 0x0003F9, "Member 'ATestHelper_C::Option_HitFxAngleInvert' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_HitFxOnOff) == 0x0003FA, "Member 'ATestHelper_C::Option_HitFxOnOff' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_HitFxAngleArray) == 0x000400, "Member 'ATestHelper_C::Option_HitFxAngleArray' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_UseBullsOne) == 0x000410, "Member 'ATestHelper_C::Option_UseBullsOne' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_Grab_SocketName_Attacker) == 0x000414, "Member 'ATestHelper_C::Option_Grab_SocketName_Attacker' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_Grab_SocketName_Victim) == 0x00041C, "Member 'ATestHelper_C::Option_Grab_SocketName_Victim' has a wrong offset!");
static_assert(offsetof(ATestHelper_C, Option_Grab_ChangePhysicsAsset) == 0x000428, "Member 'ATestHelper_C::Option_Grab_ChangePhysicsAsset' has a wrong offset!");

}

