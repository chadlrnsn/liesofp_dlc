#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Judge_Boss

#include "Basic.hpp"

#include "BP_Judge_Boss_classes.hpp"
#include "BP_Judge_Boss_parameters.hpp"


namespace SDK
{

// Function BP_Judge_Boss.BP_Judge_Boss_C.ExecuteUbergraph_BP_Judge_Boss
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Judge_Boss_C::ExecuteUbergraph_BP_Judge_Boss(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Judge_Boss_C", "ExecuteUbergraph_BP_Judge_Boss");

	Params::BP_Judge_Boss_C_ExecuteUbergraph_BP_Judge_Boss Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Judge_Boss.BP_Judge_Boss_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Judge_Boss_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Judge_Boss_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Judge_Boss.BP_Judge_Boss_C.OnRespawnBP
// (Event, Public, BlueprintEvent)

void ABP_Judge_Boss_C::OnRespawnBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Judge_Boss_C", "OnRespawnBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Judge_Boss.BP_Judge_Boss_C.OnPostDead
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_Judge_Boss_C::OnPostDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Judge_Boss_C", "OnPostDead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Judge_Boss.BP_Judge_Boss_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Judge_Boss_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Judge_Boss_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Judge_Boss.BP_Judge_Boss_C.IK_Trace
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   TraceDistance                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          FootSize                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Moving                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Offest                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Impact                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    BlockHitBool                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Judge_Boss_C::IK_Trace(float TraceDistance, class FName SocketName, const struct FVector& FootSize, bool Moving, float* Offest, struct FRotator* Impact, bool* BlockHitBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Judge_Boss_C", "IK_Trace");

	Params::BP_Judge_Boss_C_IK_Trace Parms{};

	Parms.TraceDistance = TraceDistance;
	Parms.SocketName = SocketName;
	Parms.FootSize = std::move(FootSize);
	Parms.Moving = Moving;

	UObject::ProcessEvent(Func, &Parms);

	if (Offest != nullptr)
		*Offest = Parms.Offest;

	if (Impact != nullptr)
		*Impact = std::move(Parms.Impact);

	if (BlockHitBool != nullptr)
		*BlockHitBool = Parms.BlockHitBool;
}


// Function BP_Judge_Boss.BP_Judge_Boss_C.IK_UpdateFootOffset 
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   TargetValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EffectorVar                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InterpSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EffectorValue                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Judge_Boss_C::IK_UpdateFootOffset_(float TargetValue, float& EffectorVar, float InterpSpeed, float* EffectorValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Judge_Boss_C", "IK_UpdateFootOffset ");

	Params::BP_Judge_Boss_C_IK_UpdateFootOffset_ Parms{};

	Parms.TargetValue = TargetValue;
	Parms.EffectorVar = EffectorVar;
	Parms.InterpSpeed = InterpSpeed;

	UObject::ProcessEvent(Func, &Parms);

	EffectorVar = Parms.EffectorVar;

	if (EffectorValue != nullptr)
		*EffectorValue = Parms.EffectorValue;
}


// Function BP_Judge_Boss.BP_Judge_Boss_C.IK_UpdateFootRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         TargetValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         RotationVar                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// float                                   InterpSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         RotatorValue                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Judge_Boss_C::IK_UpdateFootRotation(const struct FRotator& TargetValue, struct FRotator& RotationVar, float InterpSpeed, struct FRotator* RotatorValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Judge_Boss_C", "IK_UpdateFootRotation");

	Params::BP_Judge_Boss_C_IK_UpdateFootRotation Parms{};

	Parms.TargetValue = std::move(TargetValue);
	Parms.RotationVar = std::move(RotationVar);
	Parms.InterpSpeed = InterpSpeed;

	UObject::ProcessEvent(Func, &Parms);

	RotationVar = std::move(Parms.RotationVar);

	if (RotatorValue != nullptr)
		*RotatorValue = std::move(Parms.RotatorValue);
}


// Function BP_Judge_Boss.BP_Judge_Boss_C.IK_AllUpdate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InterpSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Moving                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   ReturnLeftOffset                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnRightOffset                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         ReturnLeftRotator                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ReturnRightRotator                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   ReturnHipsOffset                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Judge_Boss_C::IK_AllUpdate(float InterpSpeed, bool Moving, float* ReturnLeftOffset, float* ReturnRightOffset, struct FRotator* ReturnLeftRotator, struct FRotator* ReturnRightRotator, float* ReturnHipsOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Judge_Boss_C", "IK_AllUpdate");

	Params::BP_Judge_Boss_C_IK_AllUpdate Parms{};

	Parms.InterpSpeed = InterpSpeed;
	Parms.Moving = Moving;

	UObject::ProcessEvent(Func, &Parms);

	if (ReturnLeftOffset != nullptr)
		*ReturnLeftOffset = Parms.ReturnLeftOffset;

	if (ReturnRightOffset != nullptr)
		*ReturnRightOffset = Parms.ReturnRightOffset;

	if (ReturnLeftRotator != nullptr)
		*ReturnLeftRotator = std::move(Parms.ReturnLeftRotator);

	if (ReturnRightRotator != nullptr)
		*ReturnRightRotator = std::move(Parms.ReturnRightRotator);

	if (ReturnHipsOffset != nullptr)
		*ReturnHipsOffset = Parms.ReturnHipsOffset;
}


// Function BP_Judge_Boss.BP_Judge_Boss_C.OnCanHitOccurDecoMesh
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Attacker                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Victim                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       HitResult                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_Judge_Boss_C::OnCanHitOccurDecoMesh(class AActor* Attacker, class AActor* Victim, const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Judge_Boss_C", "OnCanHitOccurDecoMesh");

	Params::BP_Judge_Boss_C_OnCanHitOccurDecoMesh Parms{};

	Parms.Attacker = Attacker;
	Parms.Victim = Victim;
	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

