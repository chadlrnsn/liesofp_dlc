#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Localization

#include "Basic.hpp"

#include "Localization_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class Localization.LocalizationSettings
// 0x0030 (0x0058 - 0x0028)
class ULocalizationSettings final : public UObject
{
public:
	class ULocalizationTargetSet*                 EngineTargetSet;                                   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FLocalizationTargetSettings>    EngineTargetsSettings;                             // 0x0030(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	class ULocalizationTargetSet*                 GameTargetSet;                                     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FLocalizationTargetSettings>    GameTargetsSettings;                               // 0x0048(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LocalizationSettings">();
	}
	static class ULocalizationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULocalizationSettings>();
	}
};
static_assert(alignof(ULocalizationSettings) == 0x000008, "Wrong alignment on ULocalizationSettings");
static_assert(sizeof(ULocalizationSettings) == 0x000058, "Wrong size on ULocalizationSettings");
static_assert(offsetof(ULocalizationSettings, EngineTargetSet) == 0x000028, "Member 'ULocalizationSettings::EngineTargetSet' has a wrong offset!");
static_assert(offsetof(ULocalizationSettings, EngineTargetsSettings) == 0x000030, "Member 'ULocalizationSettings::EngineTargetsSettings' has a wrong offset!");
static_assert(offsetof(ULocalizationSettings, GameTargetSet) == 0x000040, "Member 'ULocalizationSettings::GameTargetSet' has a wrong offset!");
static_assert(offsetof(ULocalizationSettings, GameTargetsSettings) == 0x000048, "Member 'ULocalizationSettings::GameTargetsSettings' has a wrong offset!");

// Class Localization.LocalizationTargetSet
// 0x0010 (0x0038 - 0x0028)
class ULocalizationTargetSet final : public UObject
{
public:
	TArray<class ULocalizationTarget*>            TargetObjects;                                     // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LocalizationTargetSet">();
	}
	static class ULocalizationTargetSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULocalizationTargetSet>();
	}
};
static_assert(alignof(ULocalizationTargetSet) == 0x000008, "Wrong alignment on ULocalizationTargetSet");
static_assert(sizeof(ULocalizationTargetSet) == 0x000038, "Wrong size on ULocalizationTargetSet");
static_assert(offsetof(ULocalizationTargetSet, TargetObjects) == 0x000028, "Member 'ULocalizationTargetSet::TargetObjects' has a wrong offset!");

// Class Localization.LocalizationTarget
// 0x0180 (0x01A8 - 0x0028)
class ULocalizationTarget final : public UObject
{
public:
	struct FLocalizationTargetSettings            Settings;                                          // 0x0028(0x0180)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LocalizationTarget">();
	}
	static class ULocalizationTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULocalizationTarget>();
	}
};
static_assert(alignof(ULocalizationTarget) == 0x000008, "Wrong alignment on ULocalizationTarget");
static_assert(sizeof(ULocalizationTarget) == 0x0001A8, "Wrong size on ULocalizationTarget");
static_assert(offsetof(ULocalizationTarget, Settings) == 0x000028, "Member 'ULocalizationTarget::Settings' has a wrong offset!");

}

