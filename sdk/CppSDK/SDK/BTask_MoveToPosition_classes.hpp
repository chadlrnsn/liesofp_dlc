#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTask_MoveToPosition

#include "Basic.hpp"

#include "ProjectP_structs.hpp"
#include "ProjectP_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTask_MoveToPosition.BTask_MoveToPosition_C
// 0x0020 (0x00D0 - 0x00B0)
class UBTask_MoveToPosition_C final : public ULBTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	ELAITargetType                                TargetType;                                        // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBackMove;                                         // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BA[0x2];                                       // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLAIMoveBehaviorID                     BehaviorID;                                        // 0x00BC(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          DontUseTurnMontage;                                // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ELAIMoveSpeedType                             Move_Speed_Type;                                   // 0x00C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C2[0x2];                                       // 0x00C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Move_Speed_Rate;                                   // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotationCooltimeOverride;                          // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTask_MoveToPosition(int32 EntryPoint);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTask_MoveToPosition_C">();
	}
	static class UBTask_MoveToPosition_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTask_MoveToPosition_C>();
	}
};
static_assert(alignof(UBTask_MoveToPosition_C) == 0x000008, "Wrong alignment on UBTask_MoveToPosition_C");
static_assert(sizeof(UBTask_MoveToPosition_C) == 0x0000D0, "Wrong size on UBTask_MoveToPosition_C");
static_assert(offsetof(UBTask_MoveToPosition_C, UberGraphFrame) == 0x0000B0, "Member 'UBTask_MoveToPosition_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTask_MoveToPosition_C, TargetType) == 0x0000B8, "Member 'UBTask_MoveToPosition_C::TargetType' has a wrong offset!");
static_assert(offsetof(UBTask_MoveToPosition_C, bBackMove) == 0x0000B9, "Member 'UBTask_MoveToPosition_C::bBackMove' has a wrong offset!");
static_assert(offsetof(UBTask_MoveToPosition_C, BehaviorID) == 0x0000BC, "Member 'UBTask_MoveToPosition_C::BehaviorID' has a wrong offset!");
static_assert(offsetof(UBTask_MoveToPosition_C, DontUseTurnMontage) == 0x0000C0, "Member 'UBTask_MoveToPosition_C::DontUseTurnMontage' has a wrong offset!");
static_assert(offsetof(UBTask_MoveToPosition_C, Move_Speed_Type) == 0x0000C1, "Member 'UBTask_MoveToPosition_C::Move_Speed_Type' has a wrong offset!");
static_assert(offsetof(UBTask_MoveToPosition_C, Move_Speed_Rate) == 0x0000C4, "Member 'UBTask_MoveToPosition_C::Move_Speed_Rate' has a wrong offset!");
static_assert(offsetof(UBTask_MoveToPosition_C, RotationCooltimeOverride) == 0x0000C8, "Member 'UBTask_MoveToPosition_C::RotationCooltimeOverride' has a wrong offset!");

}

