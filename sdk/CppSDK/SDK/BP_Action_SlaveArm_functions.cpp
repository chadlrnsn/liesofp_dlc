#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Action_SlaveArm

#include "Basic.hpp"

#include "BP_Action_SlaveArm_classes.hpp"
#include "BP_Action_SlaveArm_parameters.hpp"


namespace SDK
{

// Function BP_Action_SlaveArm.BP_Action_SlaveArm_C.ExecuteUbergraph_BP_Action_SlaveArm
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Action_SlaveArm_C::ExecuteUbergraph_BP_Action_SlaveArm(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Action_SlaveArm_C", "ExecuteUbergraph_BP_Action_SlaveArm");

	Params::BP_Action_SlaveArm_C_ExecuteUbergraph_BP_Action_SlaveArm Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Action_SlaveArm.BP_Action_SlaveArm_C.OnStart
// (Event, Public, BlueprintEvent)

void UBP_Action_SlaveArm_C::OnStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Action_SlaveArm_C", "OnStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Action_SlaveArm.BP_Action_SlaveArm_C.OnStop
// (Event, Public, BlueprintEvent)
// Parameters:
// class ULActBase*                        ReasonAction                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Action_SlaveArm_C::OnStop(class ULActBase* ReasonAction, class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Action_SlaveArm_C", "OnStop");

	Params::BP_Action_SlaveArm_C_OnStop Parms{};

	Parms.ReasonAction = ReasonAction;
	Parms.Reason = Reason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Action_SlaveArm.BP_Action_SlaveArm_C.OnTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Action_SlaveArm_C::OnTick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Action_SlaveArm_C", "OnTick");

	Params::BP_Action_SlaveArm_C_OnTick Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Action_SlaveArm.BP_Action_SlaveArm_C.OnCurrMontageEnded
// (Event, Public, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bInterrupted                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   MontageInstanceID                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Action_SlaveArm_C::OnCurrMontageEnded(class UAnimMontage* Montage, bool bInterrupted, int32 MontageInstanceID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Action_SlaveArm_C", "OnCurrMontageEnded");

	Params::BP_Action_SlaveArm_C_OnCurrMontageEnded Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;
	Parms.MontageInstanceID = MontageInstanceID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Action_SlaveArm.BP_Action_SlaveArm_C.PlaySlaveArmMontage
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_Action_SlaveArm_C::PlaySlaveArmMontage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Action_SlaveArm_C", "PlaySlaveArmMontage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Action_SlaveArm.BP_Action_SlaveArm_C.JumpToNextSection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NextSection                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Action_SlaveArm_C::JumpToNextSection(class FName NextSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Action_SlaveArm_C", "JumpToNextSection");

	Params::BP_Action_SlaveArm_C_JumpToNextSection Parms{};

	Parms.NextSection = NextSection;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Action_SlaveArm.BP_Action_SlaveArm_C.CheckCurrectSection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     SectionNameList                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FName                             CurrentSectionName                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPlayingSectionInList                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_Action_SlaveArm_C::CheckCurrectSection(TArray<class FName>& SectionNameList, class FName* CurrentSectionName, bool* IsPlayingSectionInList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Action_SlaveArm_C", "CheckCurrectSection");

	Params::BP_Action_SlaveArm_C_CheckCurrectSection Parms{};

	Parms.SectionNameList = std::move(SectionNameList);

	UObject::ProcessEvent(Func, &Parms);

	SectionNameList = std::move(Parms.SectionNameList);

	if (CurrentSectionName != nullptr)
		*CurrentSectionName = Parms.CurrentSectionName;

	if (IsPlayingSectionInList != nullptr)
		*IsPlayingSectionInList = Parms.IsPlayingSectionInList;
}


// Function BP_Action_SlaveArm.BP_Action_SlaveArm_C.CheckIfSectionChanged
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_Action_SlaveArm_C::CheckIfSectionChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Action_SlaveArm_C", "CheckIfSectionChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Action_SlaveArm.BP_Action_SlaveArm_C.ApplySectionReinforcement
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SectionName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Action_SlaveArm_C::ApplySectionReinforcement(class FName SectionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Action_SlaveArm_C", "ApplySectionReinforcement");

	Params::BP_Action_SlaveArm_C_ApplySectionReinforcement Parms{};

	Parms.SectionName = SectionName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Action_SlaveArm.BP_Action_SlaveArm_C.ClearSectionReinforcement
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_Action_SlaveArm_C::ClearSectionReinforcement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Action_SlaveArm_C", "ClearSectionReinforcement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Action_SlaveArm.BP_Action_SlaveArm_C.ApplyAllTimeReinforcement
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_Action_SlaveArm_C::ApplyAllTimeReinforcement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Action_SlaveArm_C", "ApplyAllTimeReinforcement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Action_SlaveArm.BP_Action_SlaveArm_C.ClearAllTimeReinforcement
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_Action_SlaveArm_C::ClearAllTimeReinforcement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Action_SlaveArm_C", "ClearAllTimeReinforcement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Action_SlaveArm.BP_Action_SlaveArm_C.SetReinforcedVariableValue
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             VariableName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Action_SlaveArm_C::SetReinforcedVariableValue(class FName VariableName, class FName Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Action_SlaveArm_C", "SetReinforcedVariableValue");

	Params::BP_Action_SlaveArm_C_SetReinforcedVariableValue Parms{};

	Parms.VariableName = VariableName;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Action_SlaveArm.BP_Action_SlaveArm_C.ClearReinforcedVariableValues
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_Action_SlaveArm_C::ClearReinforcedVariableValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Action_SlaveArm_C", "ClearReinforcedVariableValues");

	UObject::ProcessEvent(Func, nullptr);
}

}

