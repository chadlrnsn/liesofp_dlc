#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTask_RotateAction

#include "Basic.hpp"


namespace SDK::Params
{

// Function BTask_RotateAction.BTask_RotateAction_C.ExecuteUbergraph_BTask_RotateAction
// 0x0068 (0x0068 - 0x0000)
struct BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController_1;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_1;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ALNPCCharacter*                         K2Node_DynamicCast_AsLNPCCharacter;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ALNPCController*                        K2Node_DynamicCast_AsLNPCController;               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetRotateCooltime_ReturnValue;            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRotationCooltime_ReturnValue;          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default;                             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULActBase*                              CallFunc_PlayAction_RotationToTarget_ReturnValue;  // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction) == 0x000008, "Wrong alignment on BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction");
static_assert(sizeof(BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction) == 0x000068, "Wrong size on BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction");
static_assert(offsetof(BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction, EntryPoint) == 0x000000, "Member 'BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction, Temp_bool_Variable) == 0x000004, "Member 'BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction, K2Node_Event_OwnerController_1) == 0x000008, "Member 'BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction::K2Node_Event_OwnerController_1' has a wrong offset!");
static_assert(offsetof(BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction, K2Node_Event_ControlledPawn_1) == 0x000010, "Member 'BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction::K2Node_Event_ControlledPawn_1' has a wrong offset!");
static_assert(offsetof(BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction, K2Node_Event_OwnerController) == 0x000018, "Member 'BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction, K2Node_Event_ControlledPawn) == 0x000020, "Member 'BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction, K2Node_Event_DeltaSeconds) == 0x000028, "Member 'BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction, K2Node_DynamicCast_AsLNPCCharacter) == 0x000030, "Member 'BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction::K2Node_DynamicCast_AsLNPCCharacter' has a wrong offset!");
static_assert(offsetof(BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction, K2Node_DynamicCast_AsLNPCController) == 0x000040, "Member 'BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction::K2Node_DynamicCast_AsLNPCController' has a wrong offset!");
static_assert(offsetof(BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction, CallFunc_GetRotateCooltime_ReturnValue) == 0x00004C, "Member 'BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction::CallFunc_GetRotateCooltime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction, CallFunc_GetRotationCooltime_ReturnValue) == 0x000050, "Member 'BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction::CallFunc_GetRotationCooltime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000054, "Member 'BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000058, "Member 'BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction, CallFunc_IsValid_ReturnValue) == 0x000059, "Member 'BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction, CallFunc_IsValid_ReturnValue_1) == 0x00005A, "Member 'BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction, CallFunc_IsPlaying_ReturnValue) == 0x00005B, "Member 'BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction, K2Node_Select_Default) == 0x00005C, "Member 'BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction, CallFunc_PlayAction_RotationToTarget_ReturnValue) == 0x000060, "Member 'BTask_RotateAction_C_ExecuteUbergraph_BTask_RotateAction::CallFunc_PlayAction_RotationToTarget_ReturnValue' has a wrong offset!");

// Function BTask_RotateAction.BTask_RotateAction_C.ReceiveTickAI
// 0x0018 (0x0018 - 0x0000)
struct BTask_RotateAction_C_ReceiveTickAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTask_RotateAction_C_ReceiveTickAI) == 0x000008, "Wrong alignment on BTask_RotateAction_C_ReceiveTickAI");
static_assert(sizeof(BTask_RotateAction_C_ReceiveTickAI) == 0x000018, "Wrong size on BTask_RotateAction_C_ReceiveTickAI");
static_assert(offsetof(BTask_RotateAction_C_ReceiveTickAI, OwnerController) == 0x000000, "Member 'BTask_RotateAction_C_ReceiveTickAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTask_RotateAction_C_ReceiveTickAI, ControlledPawn) == 0x000008, "Member 'BTask_RotateAction_C_ReceiveTickAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTask_RotateAction_C_ReceiveTickAI, DeltaSeconds) == 0x000010, "Member 'BTask_RotateAction_C_ReceiveTickAI::DeltaSeconds' has a wrong offset!");

// Function BTask_RotateAction.BTask_RotateAction_C.ReceiveExecuteAI
// 0x0010 (0x0010 - 0x0000)
struct BTask_RotateAction_C_ReceiveExecuteAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTask_RotateAction_C_ReceiveExecuteAI) == 0x000008, "Wrong alignment on BTask_RotateAction_C_ReceiveExecuteAI");
static_assert(sizeof(BTask_RotateAction_C_ReceiveExecuteAI) == 0x000010, "Wrong size on BTask_RotateAction_C_ReceiveExecuteAI");
static_assert(offsetof(BTask_RotateAction_C_ReceiveExecuteAI, OwnerController) == 0x000000, "Member 'BTask_RotateAction_C_ReceiveExecuteAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTask_RotateAction_C_ReceiveExecuteAI, ControlledPawn) == 0x000008, "Member 'BTask_RotateAction_C_ReceiveExecuteAI::ControlledPawn' has a wrong offset!");

}

