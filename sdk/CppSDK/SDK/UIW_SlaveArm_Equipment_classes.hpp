#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UIW_SlaveArm_Equipment

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ProjectPContentInfo_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UIW_Window_classes.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UIW_SlaveArm_Equipment.UIW_SlaveArm_Equipment_C
// 0x01B0 (0x0500 - 0x0350)
class UUIW_SlaveArm_Equipment_C final : public UUIW_Window_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_UIW_SlaveArm_Equipment_C;           // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UUIW_Btn_Key_C*                         Btn_Back;                                          // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUIW_Btn_Key_C*                         Btn_Equip;                                         // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUIW_Btn_Key_C*                         Btn_InvenSlotChangeTab_Left;                       // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUIW_Btn_Key_C*                         Btn_InvenSlotChangeTab_Right;                      // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUIW_Btn_Key_C*                         Btn_ItemInfo;                                      // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                Btn_Rotation;                                      // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUIW_Btn_Key_C*                         Btn_Scroll;                                        // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUIW_Btn_Key_C*                         Btn_Unequip;                                       // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Deco_Line;                                         // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           Group_Info;                                        // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Group_SlaveArmDepth1;                              // 0x03A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Group_SlaveArmDepth2;                              // 0x03B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Group_Title;                                       // 0x03B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_ArmSlot;                                       // 0x03C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         Inven_SlotChangeTab;                               // 0x03C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUIW_ListItem_Stat_Simple_C*            Item_Advance;                                      // 0x03D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUIW_ListItem_Stat_Simple_C*            Item_Motivity;                                     // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUIW_ListItem_Stat_Simple_C*            Item_Technique;                                    // 0x03E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUIW_ItemInfo_Compare_C*                ItemInfo;                                          // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class ULListView*                             List_Abilities;                                    // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class ULTileView*                             List_InvenItemLarge;                               // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class ULListView*                             List_InvenSlotChangeTab;                           // 0x0400(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScrollBox*                             List_Reinforceinfo;                                // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUIW_Slot_Large_C*                      Slot_SlaveArm_0;                                   // 0x0410(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUIW_Slot_Large_C*                      Slot_SlaveArm_1;                                   // 0x0418(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUIW_Slot_Large_C*                      Slot_SlaveArm_2;                                   // 0x0420(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUIW_SubTitle_C*                        SubTitle_AttackAbility;                            // 0x0428(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_SlaveArm_Name;                                // 0x0430(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_Slot;                                         // 0x0438(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUIW_BG_Title_C*                        UIW_BG_Title;                                      // 0x0440(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUIW_BG_Title_C*                        UIW_BG_Title_1;                                    // 0x0448(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class ULItem*                                 CurrentSlaveArmItem;                               // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ALPCCharacterBP_StatRoom_C*             StatRoomCharacter;                                 // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CameraTimer;                                       // 0x0460(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              StartMousePosition;                                // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               StartCharacterRotation;                            // 0x0470(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         CameraHorizontalValue;                             // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinRotation;                                       // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxRotation;                                       // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULItem*                                 Slot_SlaveArm_1_Data;                              // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULItem*                                 Slot_SlaveArm_2_Data;                              // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULItem*                                 Slot_SlaveArm_3_Data;                              // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULItem*                                 SelectedSlaveArm1Data;                             // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULItem*                                 SelectedSlaveArm2Data;                             // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULItem*                                 SelectedSlaveArm3Data;                             // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELEquipSlotType                               SelectedEquipSlotType;                             // 0x04B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsShowInven;                                       // 0x04B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BA[0x6];                                      // 0x04BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ULItem*                                 SelectedInvenSlaveArm;                             // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                FocusedObject;                                     // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CurrentSlaveArmCodeName;                           // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUnequip;                                         // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D9[0x3];                                      // 0x04D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ColumnCount;                                       // 0x04DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UUIBP_ListData_Default_C*>       SlotChangeSlaveArmTabItems;                        // 0x04E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	ELEquipSlotType                               PrevSelectedEquipSlot;                             // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F1[0x3];                                      // 0x04F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PrevSelectedEquipID;                               // 0x04F4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NeedShowInvenItem;                                 // 0x04FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsTweening;                                        // 0x04FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_UIW_SlaveArm_Equipment(int32 EntryPoint);
	void BndEvt__UIW_SlaveArm_Equipment_List_InvenSlotChangeTab_K2Node_ComponentBoundEvent_12_OnListItemSelectionChangedDynamic__DelegateSignature(class UObject* Item, bool bIsSelected);
	void BndEvt__UIW_SlaveArm_Equipment_Slot_SlaveArm_2_K2Node_ComponentBoundEvent_11_OnActive__DelegateSignature(class ULItem* LItem);
	void BndEvt__UIW_SlaveArm_Equipment_Slot_SlaveArm_2_K2Node_ComponentBoundEvent_9_OnSelected__DelegateSignature(class ULItem* LItem);
	void ForceFeedbackEvent();
	void BndEvt__UIW_SlaveArm_Equipment_Btn_Unequip_K2Node_ComponentBoundEvent_10_OnActive__DelegateSignature(class UUIW_Btn_Key_C* BtnKey);
	void BndEvt__UIW_SlaveArm_Equipment_Btn_Scroll_K2Node_ComponentBoundEvent_8_OnScroll__DelegateSignature(float Delta);
	void BndEvt__UIW_SlaveArm_Equipment_Slot_SlaveArm_2_K2Node_ComponentBoundEvent_7_OnActive__DelegateSignature(class ULItem* LItem);
	void BndEvt__UIW_SlaveArm_Equipment_Slot_SlaveArm_1_K2Node_ComponentBoundEvent_6_OnActive__DelegateSignature(class ULItem* LItem);
	void BndEvt__UIW_SlaveArm_Equipment_Slot_SlaveArm_2_K2Node_ComponentBoundEvent_5_OnSelected__DelegateSignature(class ULItem* LItem);
	void BndEvt__UIW_SlaveArm_Equipment_Slot_SlaveArm_1_K2Node_ComponentBoundEvent_4_OnSelected__DelegateSignature(class ULItem* LItem);
	void BndEvt__UIW_SlaveArm_Equipment_Btn_Rotation_K2Node_ComponentBoundEvent_3_OnButtonReleasedEvent__DelegateSignature();
	void BndEvt__UIW_SlaveArm_Equipment_Btn_Rotation_K2Node_ComponentBoundEvent_2_OnButtonPressedEvent__DelegateSignature();
	void Destruct();
	void BndEvt__UIW_SlaveArm_Equipment_Btn_Back_K2Node_ComponentBoundEvent_1_OnActive__DelegateSignature(class UUIW_Btn_Key_C* BtnKey);
	void BndEvt__UIW_SlaveArm_Equipment_Btn_Equip_K2Node_ComponentBoundEvent_0_OnActive__DelegateSignature(class UUIW_Btn_Key_C* BtnKey);
	void Construct();
	void OnReady();
	void ChangeInfo_Depth1(class UObject* Item, bool IsSlot2Unlock);
	void RequestCloseWindow();
	void OnScroll(float Delta);
	void SetCameraRotation();
	void SetCameraRotationLeft();
	void SetCameraRotationRight();
	struct FEventReply OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	struct FEventReply OnKeyUp(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	void RefreshEquipSlot(ELEquipSlotType SlotIndex);
	void RefreshInvenSlaveArmList();
	void SetSelectedSlot(class ULItem* LItem);
	void RefreshCharacterActor();
	void ActiveItem(class UObject* Item);
	void EquipItem(ELEquipSlotType SlotType);
	void UnEquipItem(ELEquipSlotType SlotType);
	void ShowInvenItemLarge(bool NeedTween);
	void ShowEquipSlot();
	struct FEventReply FocusManage(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void InitWidget();
	void OnSelectedInvenSlaveArm(class UObject* Item, bool bIsSelected);
	void SetSelectedInvenSlaveArm(class ULItem* LItem);
	void IsSlotChangePossible(bool* IsAble);
	void ChangeEquipItem(ELEquipSlotType EquipSlot, class ULItem* OldItem, class ULItem* NewItem);
	void OnVisibleChangeInfo(ESlateVisibility InVisibility);
	void CallbackContextMenu(class FName EventName);
	class UWidget* NavToTop(EUINavigation Navigation_0);
	class UWidget* NavToBottom(EUINavigation Navigation_0);
	class UWidget* NavToArm3(EUINavigation Navigation_0);
	void SetFocusValidSlot(class UUIW_Slot_Large_C* UnequipSlot);
	class UWidget* NavToLRLoop(EUINavigation Navigation_0);
	void MoveLeftSlotChangeTab(class UUIW_Btn_Key_C* BtnKey);
	void MoveRightSlotChangeTab(class UUIW_Btn_Key_C* BtnKey);
	void AddEventBinding();
	void ClearEventBinding();
	void OnTweenComplete(class FName CategoryName);
	void Can_Unequip(bool NeedItemValidCheck, class ULItem* Item, bool* Bool);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UIW_SlaveArm_Equipment_C">();
	}
	static class UUIW_SlaveArm_Equipment_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIW_SlaveArm_Equipment_C>();
	}
};
static_assert(alignof(UUIW_SlaveArm_Equipment_C) == 0x000008, "Wrong alignment on UUIW_SlaveArm_Equipment_C");
static_assert(sizeof(UUIW_SlaveArm_Equipment_C) == 0x000500, "Wrong size on UUIW_SlaveArm_Equipment_C");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, UberGraphFrame_UIW_SlaveArm_Equipment_C) == 0x000350, "Member 'UUIW_SlaveArm_Equipment_C::UberGraphFrame_UIW_SlaveArm_Equipment_C' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, Btn_Back) == 0x000358, "Member 'UUIW_SlaveArm_Equipment_C::Btn_Back' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, Btn_Equip) == 0x000360, "Member 'UUIW_SlaveArm_Equipment_C::Btn_Equip' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, Btn_InvenSlotChangeTab_Left) == 0x000368, "Member 'UUIW_SlaveArm_Equipment_C::Btn_InvenSlotChangeTab_Left' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, Btn_InvenSlotChangeTab_Right) == 0x000370, "Member 'UUIW_SlaveArm_Equipment_C::Btn_InvenSlotChangeTab_Right' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, Btn_ItemInfo) == 0x000378, "Member 'UUIW_SlaveArm_Equipment_C::Btn_ItemInfo' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, Btn_Rotation) == 0x000380, "Member 'UUIW_SlaveArm_Equipment_C::Btn_Rotation' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, Btn_Scroll) == 0x000388, "Member 'UUIW_SlaveArm_Equipment_C::Btn_Scroll' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, Btn_Unequip) == 0x000390, "Member 'UUIW_SlaveArm_Equipment_C::Btn_Unequip' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, Deco_Line) == 0x000398, "Member 'UUIW_SlaveArm_Equipment_C::Deco_Line' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, Group_Info) == 0x0003A0, "Member 'UUIW_SlaveArm_Equipment_C::Group_Info' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, Group_SlaveArmDepth1) == 0x0003A8, "Member 'UUIW_SlaveArm_Equipment_C::Group_SlaveArmDepth1' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, Group_SlaveArmDepth2) == 0x0003B0, "Member 'UUIW_SlaveArm_Equipment_C::Group_SlaveArmDepth2' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, Group_Title) == 0x0003B8, "Member 'UUIW_SlaveArm_Equipment_C::Group_Title' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, Img_ArmSlot) == 0x0003C0, "Member 'UUIW_SlaveArm_Equipment_C::Img_ArmSlot' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, Inven_SlotChangeTab) == 0x0003C8, "Member 'UUIW_SlaveArm_Equipment_C::Inven_SlotChangeTab' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, Item_Advance) == 0x0003D0, "Member 'UUIW_SlaveArm_Equipment_C::Item_Advance' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, Item_Motivity) == 0x0003D8, "Member 'UUIW_SlaveArm_Equipment_C::Item_Motivity' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, Item_Technique) == 0x0003E0, "Member 'UUIW_SlaveArm_Equipment_C::Item_Technique' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, ItemInfo) == 0x0003E8, "Member 'UUIW_SlaveArm_Equipment_C::ItemInfo' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, List_Abilities) == 0x0003F0, "Member 'UUIW_SlaveArm_Equipment_C::List_Abilities' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, List_InvenItemLarge) == 0x0003F8, "Member 'UUIW_SlaveArm_Equipment_C::List_InvenItemLarge' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, List_InvenSlotChangeTab) == 0x000400, "Member 'UUIW_SlaveArm_Equipment_C::List_InvenSlotChangeTab' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, List_Reinforceinfo) == 0x000408, "Member 'UUIW_SlaveArm_Equipment_C::List_Reinforceinfo' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, Slot_SlaveArm_0) == 0x000410, "Member 'UUIW_SlaveArm_Equipment_C::Slot_SlaveArm_0' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, Slot_SlaveArm_1) == 0x000418, "Member 'UUIW_SlaveArm_Equipment_C::Slot_SlaveArm_1' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, Slot_SlaveArm_2) == 0x000420, "Member 'UUIW_SlaveArm_Equipment_C::Slot_SlaveArm_2' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, SubTitle_AttackAbility) == 0x000428, "Member 'UUIW_SlaveArm_Equipment_C::SubTitle_AttackAbility' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, Text_SlaveArm_Name) == 0x000430, "Member 'UUIW_SlaveArm_Equipment_C::Text_SlaveArm_Name' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, Text_Slot) == 0x000438, "Member 'UUIW_SlaveArm_Equipment_C::Text_Slot' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, UIW_BG_Title) == 0x000440, "Member 'UUIW_SlaveArm_Equipment_C::UIW_BG_Title' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, UIW_BG_Title_1) == 0x000448, "Member 'UUIW_SlaveArm_Equipment_C::UIW_BG_Title_1' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, CurrentSlaveArmItem) == 0x000450, "Member 'UUIW_SlaveArm_Equipment_C::CurrentSlaveArmItem' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, StatRoomCharacter) == 0x000458, "Member 'UUIW_SlaveArm_Equipment_C::StatRoomCharacter' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, CameraTimer) == 0x000460, "Member 'UUIW_SlaveArm_Equipment_C::CameraTimer' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, StartMousePosition) == 0x000468, "Member 'UUIW_SlaveArm_Equipment_C::StartMousePosition' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, StartCharacterRotation) == 0x000470, "Member 'UUIW_SlaveArm_Equipment_C::StartCharacterRotation' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, CameraHorizontalValue) == 0x00047C, "Member 'UUIW_SlaveArm_Equipment_C::CameraHorizontalValue' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, MinRotation) == 0x000480, "Member 'UUIW_SlaveArm_Equipment_C::MinRotation' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, MaxRotation) == 0x000484, "Member 'UUIW_SlaveArm_Equipment_C::MaxRotation' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, Slot_SlaveArm_1_Data) == 0x000488, "Member 'UUIW_SlaveArm_Equipment_C::Slot_SlaveArm_1_Data' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, Slot_SlaveArm_2_Data) == 0x000490, "Member 'UUIW_SlaveArm_Equipment_C::Slot_SlaveArm_2_Data' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, Slot_SlaveArm_3_Data) == 0x000498, "Member 'UUIW_SlaveArm_Equipment_C::Slot_SlaveArm_3_Data' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, SelectedSlaveArm1Data) == 0x0004A0, "Member 'UUIW_SlaveArm_Equipment_C::SelectedSlaveArm1Data' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, SelectedSlaveArm2Data) == 0x0004A8, "Member 'UUIW_SlaveArm_Equipment_C::SelectedSlaveArm2Data' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, SelectedSlaveArm3Data) == 0x0004B0, "Member 'UUIW_SlaveArm_Equipment_C::SelectedSlaveArm3Data' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, SelectedEquipSlotType) == 0x0004B8, "Member 'UUIW_SlaveArm_Equipment_C::SelectedEquipSlotType' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, IsShowInven) == 0x0004B9, "Member 'UUIW_SlaveArm_Equipment_C::IsShowInven' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, SelectedInvenSlaveArm) == 0x0004C0, "Member 'UUIW_SlaveArm_Equipment_C::SelectedInvenSlaveArm' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, FocusedObject) == 0x0004C8, "Member 'UUIW_SlaveArm_Equipment_C::FocusedObject' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, CurrentSlaveArmCodeName) == 0x0004D0, "Member 'UUIW_SlaveArm_Equipment_C::CurrentSlaveArmCodeName' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, IsUnequip) == 0x0004D8, "Member 'UUIW_SlaveArm_Equipment_C::IsUnequip' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, ColumnCount) == 0x0004DC, "Member 'UUIW_SlaveArm_Equipment_C::ColumnCount' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, SlotChangeSlaveArmTabItems) == 0x0004E0, "Member 'UUIW_SlaveArm_Equipment_C::SlotChangeSlaveArmTabItems' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, PrevSelectedEquipSlot) == 0x0004F0, "Member 'UUIW_SlaveArm_Equipment_C::PrevSelectedEquipSlot' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, PrevSelectedEquipID) == 0x0004F4, "Member 'UUIW_SlaveArm_Equipment_C::PrevSelectedEquipID' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, NeedShowInvenItem) == 0x0004FC, "Member 'UUIW_SlaveArm_Equipment_C::NeedShowInvenItem' has a wrong offset!");
static_assert(offsetof(UUIW_SlaveArm_Equipment_C, IsTweening) == 0x0004FD, "Member 'UUIW_SlaveArm_Equipment_C::IsTweening' has a wrong offset!");

}

