#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Action_SlaveArm

#include "Basic.hpp"

#include "ProjectP_structs.hpp"
#include "ProjectP_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Action_SlaveArm.BP_Action_SlaveArm_C
// 0x0038 (0x0290 - 0x0258)
class UBP_Action_SlaveArm_C : public ULAction_LoopAnim
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0258(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class FName                                   LastPlayingSectionName;                            // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           SectionSpecialBuffCodeNameList;                    // 0x0268(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           AllTimeSpecialBuffCodeNameList;                    // 0x0278(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         AllTimeCustomPlayRate;                             // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Action_SlaveArm(int32 EntryPoint);
	void OnStart();
	void OnStop(class ULActBase* ReasonAction, class FName Reason);
	void OnTick(float DeltaTime);
	void OnCurrMontageEnded(class UAnimMontage* Montage, bool bInterrupted, int32 MontageInstanceID);
	void PlaySlaveArmMontage();
	void JumpToNextSection(class FName NextSection);
	void CheckCurrectSection(TArray<class FName>& SectionNameList, class FName* CurrentSectionName, bool* IsPlayingSectionInList);
	void CheckIfSectionChanged();
	void ApplySectionReinforcement(class FName SectionName);
	void ClearSectionReinforcement();
	void ApplyAllTimeReinforcement();
	void ClearAllTimeReinforcement();
	void SetReinforcedVariableValue(class FName VariableName, class FName Value);
	void ClearReinforcedVariableValues();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Action_SlaveArm_C">();
	}
	static class UBP_Action_SlaveArm_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Action_SlaveArm_C>();
	}
};
static_assert(alignof(UBP_Action_SlaveArm_C) == 0x000008, "Wrong alignment on UBP_Action_SlaveArm_C");
static_assert(sizeof(UBP_Action_SlaveArm_C) == 0x000290, "Wrong size on UBP_Action_SlaveArm_C");
static_assert(offsetof(UBP_Action_SlaveArm_C, UberGraphFrame) == 0x000258, "Member 'UBP_Action_SlaveArm_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_Action_SlaveArm_C, LastPlayingSectionName) == 0x000260, "Member 'UBP_Action_SlaveArm_C::LastPlayingSectionName' has a wrong offset!");
static_assert(offsetof(UBP_Action_SlaveArm_C, SectionSpecialBuffCodeNameList) == 0x000268, "Member 'UBP_Action_SlaveArm_C::SectionSpecialBuffCodeNameList' has a wrong offset!");
static_assert(offsetof(UBP_Action_SlaveArm_C, AllTimeSpecialBuffCodeNameList) == 0x000278, "Member 'UBP_Action_SlaveArm_C::AllTimeSpecialBuffCodeNameList' has a wrong offset!");
static_assert(offsetof(UBP_Action_SlaveArm_C, AllTimeCustomPlayRate) == 0x000288, "Member 'UBP_Action_SlaveArm_C::AllTimeCustomPlayRate' has a wrong offset!");

}

