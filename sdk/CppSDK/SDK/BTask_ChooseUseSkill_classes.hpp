#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTask_ChooseUseSkill

#include "Basic.hpp"

#include "ProjectP_structs.hpp"
#include "ProjectP_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTask_ChooseUseSkill.BTask_ChooseUseSkill_C
// 0x0028 (0x00D8 - 0x00B0)
class UBTask_ChooseUseSkill_C final : public ULBTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          bCheckRange;                                       // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bCheckAngle;                                       // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ELAIRangeMinMaxType                           Range_Min_Max_Type;                                // 0x00BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BB[0x5];                                       // 0x00BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLNPCStandbySkill>              Custom_Skill_List;                                 // 0x00C0(0x0010)(Edit, BlueprintVisible)
	bool                                          Reselect_Include_Cooltime;                         // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BTask_ChooseUseSkill(int32 EntryPoint);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTask_ChooseUseSkill_C">();
	}
	static class UBTask_ChooseUseSkill_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTask_ChooseUseSkill_C>();
	}
};
static_assert(alignof(UBTask_ChooseUseSkill_C) == 0x000008, "Wrong alignment on UBTask_ChooseUseSkill_C");
static_assert(sizeof(UBTask_ChooseUseSkill_C) == 0x0000D8, "Wrong size on UBTask_ChooseUseSkill_C");
static_assert(offsetof(UBTask_ChooseUseSkill_C, UberGraphFrame) == 0x0000B0, "Member 'UBTask_ChooseUseSkill_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTask_ChooseUseSkill_C, bCheckRange) == 0x0000B8, "Member 'UBTask_ChooseUseSkill_C::bCheckRange' has a wrong offset!");
static_assert(offsetof(UBTask_ChooseUseSkill_C, bCheckAngle) == 0x0000B9, "Member 'UBTask_ChooseUseSkill_C::bCheckAngle' has a wrong offset!");
static_assert(offsetof(UBTask_ChooseUseSkill_C, Range_Min_Max_Type) == 0x0000BA, "Member 'UBTask_ChooseUseSkill_C::Range_Min_Max_Type' has a wrong offset!");
static_assert(offsetof(UBTask_ChooseUseSkill_C, Custom_Skill_List) == 0x0000C0, "Member 'UBTask_ChooseUseSkill_C::Custom_Skill_List' has a wrong offset!");
static_assert(offsetof(UBTask_ChooseUseSkill_C, Reselect_Include_Cooltime) == 0x0000D0, "Member 'UBTask_ChooseUseSkill_C::Reselect_Include_Cooltime' has a wrong offset!");

}

