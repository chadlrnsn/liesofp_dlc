#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LP_SpotLight_Movable_Linear

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass LP_SpotLight_Movable_Linear.LP_SpotLight_Movable_Linear_C
// 0x0070 (0x0250 - 0x01E0)
class ALP_SpotLight_Movable_Linear_C final : public AActor
{
public:
	class UBillboardComponent*                    Billboard;                                         // 0x01E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x01E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Light_Position;                                    // 0x01F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x01F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Light_Color;                                       // 0x0200(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Intensity;                                         // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Light_Temperature;                                 // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Light_Radius;                                      // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         In_Cone_Angle;                                     // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Out_Cone_Angle;                                    // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureLightProfile*                   IESProfile;                                        // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IES_Intensity;                                     // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Volumetric_Scattering_Intensity;                   // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDetailMode                                   Detail_Mode;                                       // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EComponentMobility                            Set_Mode;                                          // 0x0239(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELightUnits                                   Light_Unit;                                        // 0x023A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_IES_Intensity;                                 // 0x023B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Cast_Shadow_SpotLight;                             // 0x023C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23D[0x3];                                      // 0x023D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Specular_Scale;                                    // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Source_Radius;                                     // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Contact_Shadow;                                    // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"LP_SpotLight_Movable_Linear_C">();
	}
	static class ALP_SpotLight_Movable_Linear_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALP_SpotLight_Movable_Linear_C>();
	}
};
static_assert(alignof(ALP_SpotLight_Movable_Linear_C) == 0x000008, "Wrong alignment on ALP_SpotLight_Movable_Linear_C");
static_assert(sizeof(ALP_SpotLight_Movable_Linear_C) == 0x000250, "Wrong size on ALP_SpotLight_Movable_Linear_C");
static_assert(offsetof(ALP_SpotLight_Movable_Linear_C, Billboard) == 0x0001E0, "Member 'ALP_SpotLight_Movable_Linear_C::Billboard' has a wrong offset!");
static_assert(offsetof(ALP_SpotLight_Movable_Linear_C, SpotLight) == 0x0001E8, "Member 'ALP_SpotLight_Movable_Linear_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ALP_SpotLight_Movable_Linear_C, Light_Position) == 0x0001F0, "Member 'ALP_SpotLight_Movable_Linear_C::Light_Position' has a wrong offset!");
static_assert(offsetof(ALP_SpotLight_Movable_Linear_C, Arrow) == 0x0001F8, "Member 'ALP_SpotLight_Movable_Linear_C::Arrow' has a wrong offset!");
static_assert(offsetof(ALP_SpotLight_Movable_Linear_C, Light_Color) == 0x000200, "Member 'ALP_SpotLight_Movable_Linear_C::Light_Color' has a wrong offset!");
static_assert(offsetof(ALP_SpotLight_Movable_Linear_C, Intensity) == 0x000210, "Member 'ALP_SpotLight_Movable_Linear_C::Intensity' has a wrong offset!");
static_assert(offsetof(ALP_SpotLight_Movable_Linear_C, Light_Temperature) == 0x000214, "Member 'ALP_SpotLight_Movable_Linear_C::Light_Temperature' has a wrong offset!");
static_assert(offsetof(ALP_SpotLight_Movable_Linear_C, Light_Radius) == 0x000218, "Member 'ALP_SpotLight_Movable_Linear_C::Light_Radius' has a wrong offset!");
static_assert(offsetof(ALP_SpotLight_Movable_Linear_C, In_Cone_Angle) == 0x00021C, "Member 'ALP_SpotLight_Movable_Linear_C::In_Cone_Angle' has a wrong offset!");
static_assert(offsetof(ALP_SpotLight_Movable_Linear_C, Out_Cone_Angle) == 0x000220, "Member 'ALP_SpotLight_Movable_Linear_C::Out_Cone_Angle' has a wrong offset!");
static_assert(offsetof(ALP_SpotLight_Movable_Linear_C, IESProfile) == 0x000228, "Member 'ALP_SpotLight_Movable_Linear_C::IESProfile' has a wrong offset!");
static_assert(offsetof(ALP_SpotLight_Movable_Linear_C, IES_Intensity) == 0x000230, "Member 'ALP_SpotLight_Movable_Linear_C::IES_Intensity' has a wrong offset!");
static_assert(offsetof(ALP_SpotLight_Movable_Linear_C, Volumetric_Scattering_Intensity) == 0x000234, "Member 'ALP_SpotLight_Movable_Linear_C::Volumetric_Scattering_Intensity' has a wrong offset!");
static_assert(offsetof(ALP_SpotLight_Movable_Linear_C, Detail_Mode) == 0x000238, "Member 'ALP_SpotLight_Movable_Linear_C::Detail_Mode' has a wrong offset!");
static_assert(offsetof(ALP_SpotLight_Movable_Linear_C, Set_Mode) == 0x000239, "Member 'ALP_SpotLight_Movable_Linear_C::Set_Mode' has a wrong offset!");
static_assert(offsetof(ALP_SpotLight_Movable_Linear_C, Light_Unit) == 0x00023A, "Member 'ALP_SpotLight_Movable_Linear_C::Light_Unit' has a wrong offset!");
static_assert(offsetof(ALP_SpotLight_Movable_Linear_C, Use_IES_Intensity) == 0x00023B, "Member 'ALP_SpotLight_Movable_Linear_C::Use_IES_Intensity' has a wrong offset!");
static_assert(offsetof(ALP_SpotLight_Movable_Linear_C, Cast_Shadow_SpotLight) == 0x00023C, "Member 'ALP_SpotLight_Movable_Linear_C::Cast_Shadow_SpotLight' has a wrong offset!");
static_assert(offsetof(ALP_SpotLight_Movable_Linear_C, Specular_Scale) == 0x000240, "Member 'ALP_SpotLight_Movable_Linear_C::Specular_Scale' has a wrong offset!");
static_assert(offsetof(ALP_SpotLight_Movable_Linear_C, Source_Radius) == 0x000244, "Member 'ALP_SpotLight_Movable_Linear_C::Source_Radius' has a wrong offset!");
static_assert(offsetof(ALP_SpotLight_Movable_Linear_C, Contact_Shadow) == 0x000248, "Member 'ALP_SpotLight_Movable_Linear_C::Contact_Shadow' has a wrong offset!");

}

