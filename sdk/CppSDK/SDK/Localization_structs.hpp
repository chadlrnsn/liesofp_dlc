#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Localization

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum Localization.ELocalizationTargetLoadingPolicy
// NumValues: 0x0007
enum class ELocalizationTargetLoadingPolicy : uint8
{
	Never                                    = 0,
	Always                                   = 1,
	Editor                                   = 2,
	Game                                     = 3,
	PropertyNames                            = 4,
	ToolTips                                 = 5,
	ELocalizationTargetLoadingPolicy_MAX     = 6,
};

// Enum Localization.ELocalizationGatherPathRoot
// NumValues: 0x0004
enum class ELocalizationGatherPathRoot : uint8
{
	Auto                                     = 0,
	Engine                                   = 1,
	Project                                  = 2,
	ELocalizationGatherPathRoot_MAX          = 3,
};

// Enum Localization.ELocalizationTargetConflictStatus
// NumValues: 0x0004
enum class ELocalizationTargetConflictStatus : uint8
{
	Unknown                                  = 0,
	ConflictsPresent                         = 1,
	Clear                                    = 2,
	ELocalizationTargetConflictStatus_MAX    = 3,
};

// Enum Localization.ELocTextPlatformSplitMode
// NumValues: 0x0004
enum class ELocTextPlatformSplitMode : uint8
{
	None                                     = 0,
	Confidential                             = 1,
	All                                      = 2,
	ELocTextPlatformSplitMode_MAX            = 3,
};

// Enum Localization.EPortableObjectFormat
// NumValues: 0x0003
enum class EPortableObjectFormat : uint8
{
	Unreal                                   = 0,
	Crowdin                                  = 1,
	EPortableObjectFormat_MAX                = 2,
};

// Enum Localization.ELocalizedTextCollapseMode
// NumValues: 0x0004
enum class ELocalizedTextCollapseMode : uint8
{
	IdenticalTextIdAndSource                 = 0,
	IdenticalPackageIdTextIdAndSource        = 1,
	IdenticalNamespaceAndSource              = 2,
	ELocalizedTextCollapseMode_MAX           = 3,
};

// ScriptStruct Localization.LocalizationExportingSettings
// 0x0004 (0x0004 - 0x0000)
struct FLocalizationExportingSettings final
{
public:
	ELocalizedTextCollapseMode                    CollapseMode;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPortableObjectFormat                         POFormat;                                          // 0x0001(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldPersistCommentsOnExport;                     // 0x0002(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldAddSourceLocationsAsComments;                // 0x0003(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocalizationExportingSettings) == 0x000001, "Wrong alignment on FLocalizationExportingSettings");
static_assert(sizeof(FLocalizationExportingSettings) == 0x000004, "Wrong size on FLocalizationExportingSettings");
static_assert(offsetof(FLocalizationExportingSettings, CollapseMode) == 0x000000, "Member 'FLocalizationExportingSettings::CollapseMode' has a wrong offset!");
static_assert(offsetof(FLocalizationExportingSettings, POFormat) == 0x000001, "Member 'FLocalizationExportingSettings::POFormat' has a wrong offset!");
static_assert(offsetof(FLocalizationExportingSettings, ShouldPersistCommentsOnExport) == 0x000002, "Member 'FLocalizationExportingSettings::ShouldPersistCommentsOnExport' has a wrong offset!");
static_assert(offsetof(FLocalizationExportingSettings, ShouldAddSourceLocationsAsComments) == 0x000003, "Member 'FLocalizationExportingSettings::ShouldAddSourceLocationsAsComments' has a wrong offset!");

// ScriptStruct Localization.GatherTextSearchDirectory
// 0x0018 (0x0018 - 0x0000)
struct FGatherTextSearchDirectory final
{
public:
	ELocalizationGatherPathRoot                   PathRoot;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Path;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGatherTextSearchDirectory) == 0x000008, "Wrong alignment on FGatherTextSearchDirectory");
static_assert(sizeof(FGatherTextSearchDirectory) == 0x000018, "Wrong size on FGatherTextSearchDirectory");
static_assert(offsetof(FGatherTextSearchDirectory, PathRoot) == 0x000000, "Member 'FGatherTextSearchDirectory::PathRoot' has a wrong offset!");
static_assert(offsetof(FGatherTextSearchDirectory, Path) == 0x000008, "Member 'FGatherTextSearchDirectory::Path' has a wrong offset!");

// ScriptStruct Localization.GatherTextExcludePath
// 0x0018 (0x0018 - 0x0000)
struct FGatherTextExcludePath final
{
public:
	ELocalizationGatherPathRoot                   PathRoot;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Pattern;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGatherTextExcludePath) == 0x000008, "Wrong alignment on FGatherTextExcludePath");
static_assert(sizeof(FGatherTextExcludePath) == 0x000018, "Wrong size on FGatherTextExcludePath");
static_assert(offsetof(FGatherTextExcludePath, PathRoot) == 0x000000, "Member 'FGatherTextExcludePath::PathRoot' has a wrong offset!");
static_assert(offsetof(FGatherTextExcludePath, Pattern) == 0x000008, "Member 'FGatherTextExcludePath::Pattern' has a wrong offset!");

// ScriptStruct Localization.GatherTextFileExtension
// 0x0010 (0x0010 - 0x0000)
struct FGatherTextFileExtension final
{
public:
	class FString                                 Pattern;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGatherTextFileExtension) == 0x000008, "Wrong alignment on FGatherTextFileExtension");
static_assert(sizeof(FGatherTextFileExtension) == 0x000010, "Wrong size on FGatherTextFileExtension");
static_assert(offsetof(FGatherTextFileExtension, Pattern) == 0x000000, "Member 'FGatherTextFileExtension::Pattern' has a wrong offset!");

// ScriptStruct Localization.GatherTextFromTextFilesConfiguration
// 0x0040 (0x0040 - 0x0000)
struct FGatherTextFromTextFilesConfiguration final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGatherTextSearchDirectory>     SearchDirectories;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FGatherTextExcludePath>         ExcludePathWildcards;                              // 0x0018(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FGatherTextFileExtension>       FileExtensions;                                    // 0x0028(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          ShouldGatherFromEditorOnlyData;                    // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGatherTextFromTextFilesConfiguration) == 0x000008, "Wrong alignment on FGatherTextFromTextFilesConfiguration");
static_assert(sizeof(FGatherTextFromTextFilesConfiguration) == 0x000040, "Wrong size on FGatherTextFromTextFilesConfiguration");
static_assert(offsetof(FGatherTextFromTextFilesConfiguration, IsEnabled) == 0x000000, "Member 'FGatherTextFromTextFilesConfiguration::IsEnabled' has a wrong offset!");
static_assert(offsetof(FGatherTextFromTextFilesConfiguration, SearchDirectories) == 0x000008, "Member 'FGatherTextFromTextFilesConfiguration::SearchDirectories' has a wrong offset!");
static_assert(offsetof(FGatherTextFromTextFilesConfiguration, ExcludePathWildcards) == 0x000018, "Member 'FGatherTextFromTextFilesConfiguration::ExcludePathWildcards' has a wrong offset!");
static_assert(offsetof(FGatherTextFromTextFilesConfiguration, FileExtensions) == 0x000028, "Member 'FGatherTextFromTextFilesConfiguration::FileExtensions' has a wrong offset!");
static_assert(offsetof(FGatherTextFromTextFilesConfiguration, ShouldGatherFromEditorOnlyData) == 0x000038, "Member 'FGatherTextFromTextFilesConfiguration::ShouldGatherFromEditorOnlyData' has a wrong offset!");

// ScriptStruct Localization.GatherTextIncludePath
// 0x0018 (0x0018 - 0x0000)
struct FGatherTextIncludePath final
{
public:
	ELocalizationGatherPathRoot                   PathRoot;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Pattern;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGatherTextIncludePath) == 0x000008, "Wrong alignment on FGatherTextIncludePath");
static_assert(sizeof(FGatherTextIncludePath) == 0x000018, "Wrong size on FGatherTextIncludePath");
static_assert(offsetof(FGatherTextIncludePath, PathRoot) == 0x000000, "Member 'FGatherTextIncludePath::PathRoot' has a wrong offset!");
static_assert(offsetof(FGatherTextIncludePath, Pattern) == 0x000008, "Member 'FGatherTextIncludePath::Pattern' has a wrong offset!");

// ScriptStruct Localization.GatherTextFromPackagesConfiguration
// 0x0060 (0x0060 - 0x0000)
struct FGatherTextFromPackagesConfiguration final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGatherTextIncludePath>         IncludePathWildcards;                              // 0x0008(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FGatherTextExcludePath>         ExcludePathWildcards;                              // 0x0018(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FGatherTextFileExtension>       FileExtensions;                                    // 0x0028(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FName>                           Collections;                                       // 0x0038(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FSoftClassPath>                 ExcludeClasses;                                    // 0x0048(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          ShouldExcludeDerivedClasses;                       // 0x0058(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldGatherFromEditorOnlyData;                    // 0x0059(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipGatherCache;                                   // 0x005A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGatherTextFromPackagesConfiguration) == 0x000008, "Wrong alignment on FGatherTextFromPackagesConfiguration");
static_assert(sizeof(FGatherTextFromPackagesConfiguration) == 0x000060, "Wrong size on FGatherTextFromPackagesConfiguration");
static_assert(offsetof(FGatherTextFromPackagesConfiguration, IsEnabled) == 0x000000, "Member 'FGatherTextFromPackagesConfiguration::IsEnabled' has a wrong offset!");
static_assert(offsetof(FGatherTextFromPackagesConfiguration, IncludePathWildcards) == 0x000008, "Member 'FGatherTextFromPackagesConfiguration::IncludePathWildcards' has a wrong offset!");
static_assert(offsetof(FGatherTextFromPackagesConfiguration, ExcludePathWildcards) == 0x000018, "Member 'FGatherTextFromPackagesConfiguration::ExcludePathWildcards' has a wrong offset!");
static_assert(offsetof(FGatherTextFromPackagesConfiguration, FileExtensions) == 0x000028, "Member 'FGatherTextFromPackagesConfiguration::FileExtensions' has a wrong offset!");
static_assert(offsetof(FGatherTextFromPackagesConfiguration, Collections) == 0x000038, "Member 'FGatherTextFromPackagesConfiguration::Collections' has a wrong offset!");
static_assert(offsetof(FGatherTextFromPackagesConfiguration, ExcludeClasses) == 0x000048, "Member 'FGatherTextFromPackagesConfiguration::ExcludeClasses' has a wrong offset!");
static_assert(offsetof(FGatherTextFromPackagesConfiguration, ShouldExcludeDerivedClasses) == 0x000058, "Member 'FGatherTextFromPackagesConfiguration::ShouldExcludeDerivedClasses' has a wrong offset!");
static_assert(offsetof(FGatherTextFromPackagesConfiguration, ShouldGatherFromEditorOnlyData) == 0x000059, "Member 'FGatherTextFromPackagesConfiguration::ShouldGatherFromEditorOnlyData' has a wrong offset!");
static_assert(offsetof(FGatherTextFromPackagesConfiguration, SkipGatherCache) == 0x00005A, "Member 'FGatherTextFromPackagesConfiguration::SkipGatherCache' has a wrong offset!");

// ScriptStruct Localization.CultureStatistics
// 0x0018 (0x0018 - 0x0000)
struct FCultureStatistics final
{
public:
	class FString                                 CultureName;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        WordCount;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCultureStatistics) == 0x000008, "Wrong alignment on FCultureStatistics");
static_assert(sizeof(FCultureStatistics) == 0x000018, "Wrong size on FCultureStatistics");
static_assert(offsetof(FCultureStatistics, CultureName) == 0x000000, "Member 'FCultureStatistics::CultureName' has a wrong offset!");
static_assert(offsetof(FCultureStatistics, WordCount) == 0x000010, "Member 'FCultureStatistics::WordCount' has a wrong offset!");

// ScriptStruct Localization.MetaDataKeyName
// 0x0010 (0x0010 - 0x0000)
struct FMetaDataKeyName final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetaDataKeyName) == 0x000008, "Wrong alignment on FMetaDataKeyName");
static_assert(sizeof(FMetaDataKeyName) == 0x000010, "Wrong size on FMetaDataKeyName");
static_assert(offsetof(FMetaDataKeyName, Name) == 0x000000, "Member 'FMetaDataKeyName::Name' has a wrong offset!");

// ScriptStruct Localization.MetaDataTextKeyPattern
// 0x0010 (0x0010 - 0x0000)
struct FMetaDataTextKeyPattern final
{
public:
	class FString                                 Pattern;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetaDataTextKeyPattern) == 0x000008, "Wrong alignment on FMetaDataTextKeyPattern");
static_assert(sizeof(FMetaDataTextKeyPattern) == 0x000010, "Wrong size on FMetaDataTextKeyPattern");
static_assert(offsetof(FMetaDataTextKeyPattern, Pattern) == 0x000000, "Member 'FMetaDataTextKeyPattern::Pattern' has a wrong offset!");

// ScriptStruct Localization.MetaDataKeyGatherSpecification
// 0x0030 (0x0030 - 0x0000)
struct FMetaDataKeyGatherSpecification final
{
public:
	struct FMetaDataKeyName                       MetaDataKey;                                       // 0x0000(0x0010)(Edit, Config, NativeAccessSpecifierPublic)
	class FString                                 TextNamespace;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMetaDataTextKeyPattern                TextKeyPattern;                                    // 0x0020(0x0010)(Edit, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetaDataKeyGatherSpecification) == 0x000008, "Wrong alignment on FMetaDataKeyGatherSpecification");
static_assert(sizeof(FMetaDataKeyGatherSpecification) == 0x000030, "Wrong size on FMetaDataKeyGatherSpecification");
static_assert(offsetof(FMetaDataKeyGatherSpecification, MetaDataKey) == 0x000000, "Member 'FMetaDataKeyGatherSpecification::MetaDataKey' has a wrong offset!");
static_assert(offsetof(FMetaDataKeyGatherSpecification, TextNamespace) == 0x000010, "Member 'FMetaDataKeyGatherSpecification::TextNamespace' has a wrong offset!");
static_assert(offsetof(FMetaDataKeyGatherSpecification, TextKeyPattern) == 0x000020, "Member 'FMetaDataKeyGatherSpecification::TextKeyPattern' has a wrong offset!");

// ScriptStruct Localization.GatherTextFromMetaDataConfiguration
// 0x0040 (0x0040 - 0x0000)
struct FGatherTextFromMetaDataConfiguration final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGatherTextIncludePath>         IncludePathWildcards;                              // 0x0008(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FGatherTextExcludePath>         ExcludePathWildcards;                              // 0x0018(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FMetaDataKeyGatherSpecification> KeySpecifications;                                 // 0x0028(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          ShouldGatherFromEditorOnlyData;                    // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGatherTextFromMetaDataConfiguration) == 0x000008, "Wrong alignment on FGatherTextFromMetaDataConfiguration");
static_assert(sizeof(FGatherTextFromMetaDataConfiguration) == 0x000040, "Wrong size on FGatherTextFromMetaDataConfiguration");
static_assert(offsetof(FGatherTextFromMetaDataConfiguration, IsEnabled) == 0x000000, "Member 'FGatherTextFromMetaDataConfiguration::IsEnabled' has a wrong offset!");
static_assert(offsetof(FGatherTextFromMetaDataConfiguration, IncludePathWildcards) == 0x000008, "Member 'FGatherTextFromMetaDataConfiguration::IncludePathWildcards' has a wrong offset!");
static_assert(offsetof(FGatherTextFromMetaDataConfiguration, ExcludePathWildcards) == 0x000018, "Member 'FGatherTextFromMetaDataConfiguration::ExcludePathWildcards' has a wrong offset!");
static_assert(offsetof(FGatherTextFromMetaDataConfiguration, KeySpecifications) == 0x000028, "Member 'FGatherTextFromMetaDataConfiguration::KeySpecifications' has a wrong offset!");
static_assert(offsetof(FGatherTextFromMetaDataConfiguration, ShouldGatherFromEditorOnlyData) == 0x000038, "Member 'FGatherTextFromMetaDataConfiguration::ShouldGatherFromEditorOnlyData' has a wrong offset!");

// ScriptStruct Localization.LocalizationCompilationSettings
// 0x0003 (0x0003 - 0x0000)
struct FLocalizationCompilationSettings final
{
public:
	bool                                          SkipSourceCheck;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ValidateFormatPatterns;                            // 0x0001(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ValidateSafeWhitespace;                            // 0x0002(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocalizationCompilationSettings) == 0x000001, "Wrong alignment on FLocalizationCompilationSettings");
static_assert(sizeof(FLocalizationCompilationSettings) == 0x000003, "Wrong size on FLocalizationCompilationSettings");
static_assert(offsetof(FLocalizationCompilationSettings, SkipSourceCheck) == 0x000000, "Member 'FLocalizationCompilationSettings::SkipSourceCheck' has a wrong offset!");
static_assert(offsetof(FLocalizationCompilationSettings, ValidateFormatPatterns) == 0x000001, "Member 'FLocalizationCompilationSettings::ValidateFormatPatterns' has a wrong offset!");
static_assert(offsetof(FLocalizationCompilationSettings, ValidateSafeWhitespace) == 0x000002, "Member 'FLocalizationCompilationSettings::ValidateSafeWhitespace' has a wrong offset!");

// ScriptStruct Localization.LocalizationImportDialogueSettings
// 0x0028 (0x0028 - 0x0000)
struct FLocalizationImportDialogueSettings final
{
public:
	struct FDirectoryPath                         RawAudioPath;                                      // 0x0000(0x0010)(Edit, Config, NativeAccessSpecifierPublic)
	class FString                                 ImportedDialogueFolder;                            // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImportNativeAsSource;                             // 0x0020(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLocalizationImportDialogueSettings) == 0x000008, "Wrong alignment on FLocalizationImportDialogueSettings");
static_assert(sizeof(FLocalizationImportDialogueSettings) == 0x000028, "Wrong size on FLocalizationImportDialogueSettings");
static_assert(offsetof(FLocalizationImportDialogueSettings, RawAudioPath) == 0x000000, "Member 'FLocalizationImportDialogueSettings::RawAudioPath' has a wrong offset!");
static_assert(offsetof(FLocalizationImportDialogueSettings, ImportedDialogueFolder) == 0x000010, "Member 'FLocalizationImportDialogueSettings::ImportedDialogueFolder' has a wrong offset!");
static_assert(offsetof(FLocalizationImportDialogueSettings, bImportNativeAsSource) == 0x000020, "Member 'FLocalizationImportDialogueSettings::bImportNativeAsSource' has a wrong offset!");

// ScriptStruct Localization.LocalizationTargetSettings
// 0x0180 (0x0180 - 0x0000)
struct FLocalizationTargetSettings final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x0010(0x0010)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELocalizationTargetConflictStatus             ConflictStatus;                                    // 0x0020(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGuid>                          TargetDependencies;                                // 0x0028(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FFilePath>                      AdditionalManifestDependencies;                    // 0x0038(0x0010)(Edit, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<class FString>                         RequiredModuleNames;                               // 0x0048(0x0010)(Edit, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FGatherTextFromTextFilesConfiguration  GatherFromTextFiles;                               // 0x0058(0x0040)(Edit, Config, NativeAccessSpecifierPublic)
	struct FGatherTextFromPackagesConfiguration   GatherFromPackages;                                // 0x0098(0x0060)(Edit, Config, NativeAccessSpecifierPublic)
	struct FGatherTextFromMetaDataConfiguration   GatherFromMetaData;                                // 0x00F8(0x0040)(Edit, Config, NativeAccessSpecifierPublic)
	struct FLocalizationExportingSettings         ExportSettings;                                    // 0x0138(0x0004)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FLocalizationCompilationSettings       CompileSettings;                                   // 0x013C(0x0003)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_13F[0x1];                                      // 0x013F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLocalizationImportDialogueSettings    ImportDialogueSettings;                            // 0x0140(0x0028)(Edit, Config, NativeAccessSpecifierPublic)
	int32                                         NativeCultureIndex;                                // 0x0168(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCultureStatistics>             SupportedCulturesStatistics;                       // 0x0170(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocalizationTargetSettings) == 0x000008, "Wrong alignment on FLocalizationTargetSettings");
static_assert(sizeof(FLocalizationTargetSettings) == 0x000180, "Wrong size on FLocalizationTargetSettings");
static_assert(offsetof(FLocalizationTargetSettings, Name) == 0x000000, "Member 'FLocalizationTargetSettings::Name' has a wrong offset!");
static_assert(offsetof(FLocalizationTargetSettings, Guid) == 0x000010, "Member 'FLocalizationTargetSettings::Guid' has a wrong offset!");
static_assert(offsetof(FLocalizationTargetSettings, ConflictStatus) == 0x000020, "Member 'FLocalizationTargetSettings::ConflictStatus' has a wrong offset!");
static_assert(offsetof(FLocalizationTargetSettings, TargetDependencies) == 0x000028, "Member 'FLocalizationTargetSettings::TargetDependencies' has a wrong offset!");
static_assert(offsetof(FLocalizationTargetSettings, AdditionalManifestDependencies) == 0x000038, "Member 'FLocalizationTargetSettings::AdditionalManifestDependencies' has a wrong offset!");
static_assert(offsetof(FLocalizationTargetSettings, RequiredModuleNames) == 0x000048, "Member 'FLocalizationTargetSettings::RequiredModuleNames' has a wrong offset!");
static_assert(offsetof(FLocalizationTargetSettings, GatherFromTextFiles) == 0x000058, "Member 'FLocalizationTargetSettings::GatherFromTextFiles' has a wrong offset!");
static_assert(offsetof(FLocalizationTargetSettings, GatherFromPackages) == 0x000098, "Member 'FLocalizationTargetSettings::GatherFromPackages' has a wrong offset!");
static_assert(offsetof(FLocalizationTargetSettings, GatherFromMetaData) == 0x0000F8, "Member 'FLocalizationTargetSettings::GatherFromMetaData' has a wrong offset!");
static_assert(offsetof(FLocalizationTargetSettings, ExportSettings) == 0x000138, "Member 'FLocalizationTargetSettings::ExportSettings' has a wrong offset!");
static_assert(offsetof(FLocalizationTargetSettings, CompileSettings) == 0x00013C, "Member 'FLocalizationTargetSettings::CompileSettings' has a wrong offset!");
static_assert(offsetof(FLocalizationTargetSettings, ImportDialogueSettings) == 0x000140, "Member 'FLocalizationTargetSettings::ImportDialogueSettings' has a wrong offset!");
static_assert(offsetof(FLocalizationTargetSettings, NativeCultureIndex) == 0x000168, "Member 'FLocalizationTargetSettings::NativeCultureIndex' has a wrong offset!");
static_assert(offsetof(FLocalizationTargetSettings, SupportedCulturesStatistics) == 0x000170, "Member 'FLocalizationTargetSettings::SupportedCulturesStatistics' has a wrong offset!");

}

