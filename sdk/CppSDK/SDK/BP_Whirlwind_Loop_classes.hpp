#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Whirlwind_Loop

#include "Basic.hpp"

#include "ProjectP_structs.hpp"
#include "ProjectP_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Whirlwind_Loop.BP_Whirlwind_Loop_C
// 0x0010 (0x0280 - 0x0270)
class UBP_Whirlwind_Loop_C final : public ULAction_MultiAnim
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0270(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          Release;                                           // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_279[0x3];                                      // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FableConsume;                                      // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Whirlwind_Loop(int32 EntryPoint);
	void OnTick(float DeltaTime);
	void OnCommandOccurred_Event(class ULActMgrComponent* ActMgrComponent, class AActor* TargetActor, class FName Command, const struct FVector& Lever, bool SkipCommandPrerequisitiesCheck);
	void OnStop(class ULActBase* ReasonAction, class FName Reason);
	void OnStart();
	int32 OnSelectNextAnim(class UAnimMontage* Montage, bool bInterrupted, int32 CurrentAnimIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Whirlwind_Loop_C">();
	}
	static class UBP_Whirlwind_Loop_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Whirlwind_Loop_C>();
	}
};
static_assert(alignof(UBP_Whirlwind_Loop_C) == 0x000008, "Wrong alignment on UBP_Whirlwind_Loop_C");
static_assert(sizeof(UBP_Whirlwind_Loop_C) == 0x000280, "Wrong size on UBP_Whirlwind_Loop_C");
static_assert(offsetof(UBP_Whirlwind_Loop_C, UberGraphFrame) == 0x000270, "Member 'UBP_Whirlwind_Loop_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_Whirlwind_Loop_C, Release) == 0x000278, "Member 'UBP_Whirlwind_Loop_C::Release' has a wrong offset!");
static_assert(offsetof(UBP_Whirlwind_Loop_C, FableConsume) == 0x00027C, "Member 'UBP_Whirlwind_Loop_C::FableConsume' has a wrong offset!");

}

