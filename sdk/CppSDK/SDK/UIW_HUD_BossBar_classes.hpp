#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UIW_HUD_BossBar

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "ProjectP_classes.hpp"
#include "Engine_structs.hpp"
#include "UIST_AbnormalVisible_structs.hpp"
#include "ProjectPContentInfo_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UIW_HUD_BossBar.UIW_HUD_BossBar_C
// 0x0138 (0x03E0 - 0x02A8)
class UUIW_HUD_BossBar_C final : public ULWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Ani_Construct;                                     // 0x02B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UUIW_HUD_Gauge_HP_C*                    Gauge;                                             // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_MobDamage;                                    // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_MobName;                                      // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FTimerHandle                           DamageTimer;                                       // 0x02D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HpRefreshTimer;                                    // 0x02D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         PrevHP;                                            // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PrevRegainHP;                                      // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ALNPCCharacter*                         BossActor;                                         // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageShowTime;                                    // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PrevDamage;                                        // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             HideDispatcher;                                    // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FName                                   BossActorFName;                                    // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            DamageColor_Default;                               // 0x0310(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            DamageColor_Fire;                                  // 0x0338(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            DamageColor_Electric;                              // 0x0360(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            DamageColor_Acid;                                  // 0x0388(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsIconDmgTypeOrNot;                                // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIW_HUD_C*                             HUDRef;                                            // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FUIST_AbnormalVisible>          AbnormalArr;                                       // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UImage*>                         AbnormalIconArr;                                   // 0x03D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void HideDispatcher__DelegateSignature(class UUIW_HUD_BossBar_C* BossBar, class FName BossFName);
	void ExecuteUbergraph_UIW_HUD_BossBar(int32 EntryPoint);
	void OnInitialized();
	void PreConstruct(bool IsDesignTime);
	void OnComplete(class FName CategoryName);
	void Destruct();
	void OnHideAni();
	void OnShowAni();
	void Construct();
	void InitBossBar();
	void ShowHpBar(class ALNPCCharacter* BossActor_0, bool IsEnter);
	void ShowDamage(int32 Value, ELElementDamageType ElementDamageType);
	void HideDamage();
	void VisibleBossBar(bool IsShow, const class FText& Name_0);
	void RefreshHP();
	void OnParalyzeEnable(bool IsAbleParalyze);
	void OnGroggy(bool IsStarted);
	void Reset();
	void AddAbnormal(class FName Name_0, int64 ID, bool Visible, ELAbnormalAbstateClass State);
	void OnAbnormalState(class FName AbnormalName, int64 AbnormalUniqueId, bool Visible);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UIW_HUD_BossBar_C">();
	}
	static class UUIW_HUD_BossBar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIW_HUD_BossBar_C>();
	}
};
static_assert(alignof(UUIW_HUD_BossBar_C) == 0x000008, "Wrong alignment on UUIW_HUD_BossBar_C");
static_assert(sizeof(UUIW_HUD_BossBar_C) == 0x0003E0, "Wrong size on UUIW_HUD_BossBar_C");
static_assert(offsetof(UUIW_HUD_BossBar_C, UberGraphFrame) == 0x0002A8, "Member 'UUIW_HUD_BossBar_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUIW_HUD_BossBar_C, Ani_Construct) == 0x0002B0, "Member 'UUIW_HUD_BossBar_C::Ani_Construct' has a wrong offset!");
static_assert(offsetof(UUIW_HUD_BossBar_C, Gauge) == 0x0002B8, "Member 'UUIW_HUD_BossBar_C::Gauge' has a wrong offset!");
static_assert(offsetof(UUIW_HUD_BossBar_C, Text_MobDamage) == 0x0002C0, "Member 'UUIW_HUD_BossBar_C::Text_MobDamage' has a wrong offset!");
static_assert(offsetof(UUIW_HUD_BossBar_C, Text_MobName) == 0x0002C8, "Member 'UUIW_HUD_BossBar_C::Text_MobName' has a wrong offset!");
static_assert(offsetof(UUIW_HUD_BossBar_C, DamageTimer) == 0x0002D0, "Member 'UUIW_HUD_BossBar_C::DamageTimer' has a wrong offset!");
static_assert(offsetof(UUIW_HUD_BossBar_C, HpRefreshTimer) == 0x0002D8, "Member 'UUIW_HUD_BossBar_C::HpRefreshTimer' has a wrong offset!");
static_assert(offsetof(UUIW_HUD_BossBar_C, PrevHP) == 0x0002E0, "Member 'UUIW_HUD_BossBar_C::PrevHP' has a wrong offset!");
static_assert(offsetof(UUIW_HUD_BossBar_C, PrevRegainHP) == 0x0002E4, "Member 'UUIW_HUD_BossBar_C::PrevRegainHP' has a wrong offset!");
static_assert(offsetof(UUIW_HUD_BossBar_C, BossActor) == 0x0002E8, "Member 'UUIW_HUD_BossBar_C::BossActor' has a wrong offset!");
static_assert(offsetof(UUIW_HUD_BossBar_C, DamageShowTime) == 0x0002F0, "Member 'UUIW_HUD_BossBar_C::DamageShowTime' has a wrong offset!");
static_assert(offsetof(UUIW_HUD_BossBar_C, PrevDamage) == 0x0002F4, "Member 'UUIW_HUD_BossBar_C::PrevDamage' has a wrong offset!");
static_assert(offsetof(UUIW_HUD_BossBar_C, HideDispatcher) == 0x0002F8, "Member 'UUIW_HUD_BossBar_C::HideDispatcher' has a wrong offset!");
static_assert(offsetof(UUIW_HUD_BossBar_C, BossActorFName) == 0x000308, "Member 'UUIW_HUD_BossBar_C::BossActorFName' has a wrong offset!");
static_assert(offsetof(UUIW_HUD_BossBar_C, DamageColor_Default) == 0x000310, "Member 'UUIW_HUD_BossBar_C::DamageColor_Default' has a wrong offset!");
static_assert(offsetof(UUIW_HUD_BossBar_C, DamageColor_Fire) == 0x000338, "Member 'UUIW_HUD_BossBar_C::DamageColor_Fire' has a wrong offset!");
static_assert(offsetof(UUIW_HUD_BossBar_C, DamageColor_Electric) == 0x000360, "Member 'UUIW_HUD_BossBar_C::DamageColor_Electric' has a wrong offset!");
static_assert(offsetof(UUIW_HUD_BossBar_C, DamageColor_Acid) == 0x000388, "Member 'UUIW_HUD_BossBar_C::DamageColor_Acid' has a wrong offset!");
static_assert(offsetof(UUIW_HUD_BossBar_C, IsIconDmgTypeOrNot) == 0x0003B0, "Member 'UUIW_HUD_BossBar_C::IsIconDmgTypeOrNot' has a wrong offset!");
static_assert(offsetof(UUIW_HUD_BossBar_C, HUDRef) == 0x0003B8, "Member 'UUIW_HUD_BossBar_C::HUDRef' has a wrong offset!");
static_assert(offsetof(UUIW_HUD_BossBar_C, AbnormalArr) == 0x0003C0, "Member 'UUIW_HUD_BossBar_C::AbnormalArr' has a wrong offset!");
static_assert(offsetof(UUIW_HUD_BossBar_C, AbnormalIconArr) == 0x0003D0, "Member 'UUIW_HUD_BossBar_C::AbnormalIconArr' has a wrong offset!");

}

