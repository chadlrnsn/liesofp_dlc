#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Action_Die

#include "Basic.hpp"

#include "ProjectP_structs.hpp"
#include "ProjectP_classes.hpp"
#include "Engine_structs.hpp"
#include "ProjectPContentInfo_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Action_Die.BP_Action_Die_C
// 0x0078 (0x02D0 - 0x0258)
class UBP_Action_Die_C final : public ULAction_LoopAnim
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0258(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FTimerHandle                           Cached_Timer_DieEnd;                               // 0x0260(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   PhysicsPivotBoneName;                              // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULReasonForDeathInfo*                   Cached_DieReasonInfo;                              // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class FName                                   Explosion_ConstraintProfileName;                   // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkillHitInfoPtr                       Explosion_Cached_SkillHitInfo;                     // 0x0280(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	ELExplosionPowerType                          Debug_ExplosionPowerType;                          // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELExplosionDirectionType                      Debug_ExplosionDirectionType;                      // 0x0289(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28A[0x6];                                      // 0x028A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ULReasonForDeathInfo*                   Debug_DieReasonInfo;                               // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         Debug_ExplosionPowerType_Light;                    // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Debug_ExplosionPowerType_Medium;                   // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Debug_ExplosionPowerType_Heavy;                    // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug_DrawImpulseDirection;                        // 0x02A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A5[0x3];                                      // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ExplodeFXTimerHandle;                              // 0x02A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Cached_Timer_DoRagdollFreeze;                      // 0x02B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         DelayTimeForPostDeadCall;                          // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSetCustomDelayTimeForPostDeadCall;               // 0x02BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BD[0x3];                                      // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Cached_Timer_Explostion_PostDead;                  // 0x02C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Cached_OnPostDeadCalled;                           // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Cached_OnLandProcessed;                            // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CachedFloatingCeiling;                             // 0x02CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Cached_ForceAnimToRagdoll;                         // 0x02CB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Action_Die(int32 EntryPoint);
	void OnStopByMe(class ULActBase* StoppingAction);
	void ReserveRagdollFreeze();
	void OnExplostionPostDead();
	void OnDieAnimEnd();
	void OnCurrMontageEnded(class UAnimMontage* Montage, bool bInterrupted, int32 MontageInstanceID);
	void DoRagdollFreeze();
	void OnPostDeadCalled(class ALCharacter* Instigator);
	void OnStop(class ULActBase* ReasonAction, class FName Reason);
	void OnStart();
	bool OnLanded(class ACharacter* LandingChar, const struct FHitResult& Hit);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Action_Die_C">();
	}
	static class UBP_Action_Die_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Action_Die_C>();
	}
};
static_assert(alignof(UBP_Action_Die_C) == 0x000008, "Wrong alignment on UBP_Action_Die_C");
static_assert(sizeof(UBP_Action_Die_C) == 0x0002D0, "Wrong size on UBP_Action_Die_C");
static_assert(offsetof(UBP_Action_Die_C, UberGraphFrame) == 0x000258, "Member 'UBP_Action_Die_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_Action_Die_C, Cached_Timer_DieEnd) == 0x000260, "Member 'UBP_Action_Die_C::Cached_Timer_DieEnd' has a wrong offset!");
static_assert(offsetof(UBP_Action_Die_C, PhysicsPivotBoneName) == 0x000268, "Member 'UBP_Action_Die_C::PhysicsPivotBoneName' has a wrong offset!");
static_assert(offsetof(UBP_Action_Die_C, Cached_DieReasonInfo) == 0x000270, "Member 'UBP_Action_Die_C::Cached_DieReasonInfo' has a wrong offset!");
static_assert(offsetof(UBP_Action_Die_C, Explosion_ConstraintProfileName) == 0x000278, "Member 'UBP_Action_Die_C::Explosion_ConstraintProfileName' has a wrong offset!");
static_assert(offsetof(UBP_Action_Die_C, Explosion_Cached_SkillHitInfo) == 0x000280, "Member 'UBP_Action_Die_C::Explosion_Cached_SkillHitInfo' has a wrong offset!");
static_assert(offsetof(UBP_Action_Die_C, Debug_ExplosionPowerType) == 0x000288, "Member 'UBP_Action_Die_C::Debug_ExplosionPowerType' has a wrong offset!");
static_assert(offsetof(UBP_Action_Die_C, Debug_ExplosionDirectionType) == 0x000289, "Member 'UBP_Action_Die_C::Debug_ExplosionDirectionType' has a wrong offset!");
static_assert(offsetof(UBP_Action_Die_C, Debug_DieReasonInfo) == 0x000290, "Member 'UBP_Action_Die_C::Debug_DieReasonInfo' has a wrong offset!");
static_assert(offsetof(UBP_Action_Die_C, Debug_ExplosionPowerType_Light) == 0x000298, "Member 'UBP_Action_Die_C::Debug_ExplosionPowerType_Light' has a wrong offset!");
static_assert(offsetof(UBP_Action_Die_C, Debug_ExplosionPowerType_Medium) == 0x00029C, "Member 'UBP_Action_Die_C::Debug_ExplosionPowerType_Medium' has a wrong offset!");
static_assert(offsetof(UBP_Action_Die_C, Debug_ExplosionPowerType_Heavy) == 0x0002A0, "Member 'UBP_Action_Die_C::Debug_ExplosionPowerType_Heavy' has a wrong offset!");
static_assert(offsetof(UBP_Action_Die_C, Debug_DrawImpulseDirection) == 0x0002A4, "Member 'UBP_Action_Die_C::Debug_DrawImpulseDirection' has a wrong offset!");
static_assert(offsetof(UBP_Action_Die_C, ExplodeFXTimerHandle) == 0x0002A8, "Member 'UBP_Action_Die_C::ExplodeFXTimerHandle' has a wrong offset!");
static_assert(offsetof(UBP_Action_Die_C, Cached_Timer_DoRagdollFreeze) == 0x0002B0, "Member 'UBP_Action_Die_C::Cached_Timer_DoRagdollFreeze' has a wrong offset!");
static_assert(offsetof(UBP_Action_Die_C, DelayTimeForPostDeadCall) == 0x0002B8, "Member 'UBP_Action_Die_C::DelayTimeForPostDeadCall' has a wrong offset!");
static_assert(offsetof(UBP_Action_Die_C, IsSetCustomDelayTimeForPostDeadCall) == 0x0002BC, "Member 'UBP_Action_Die_C::IsSetCustomDelayTimeForPostDeadCall' has a wrong offset!");
static_assert(offsetof(UBP_Action_Die_C, Cached_Timer_Explostion_PostDead) == 0x0002C0, "Member 'UBP_Action_Die_C::Cached_Timer_Explostion_PostDead' has a wrong offset!");
static_assert(offsetof(UBP_Action_Die_C, Cached_OnPostDeadCalled) == 0x0002C8, "Member 'UBP_Action_Die_C::Cached_OnPostDeadCalled' has a wrong offset!");
static_assert(offsetof(UBP_Action_Die_C, Cached_OnLandProcessed) == 0x0002C9, "Member 'UBP_Action_Die_C::Cached_OnLandProcessed' has a wrong offset!");
static_assert(offsetof(UBP_Action_Die_C, CachedFloatingCeiling) == 0x0002CA, "Member 'UBP_Action_Die_C::CachedFloatingCeiling' has a wrong offset!");
static_assert(offsetof(UBP_Action_Die_C, Cached_ForceAnimToRagdoll) == 0x0002CB, "Member 'UBP_Action_Die_C::Cached_ForceAnimToRagdoll' has a wrong offset!");

}

