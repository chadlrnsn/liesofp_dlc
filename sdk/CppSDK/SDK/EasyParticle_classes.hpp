#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EasyParticle

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "EasyParticle_structs.hpp"


namespace SDK
{

// Class EasyParticle.EasyParticle
// 0x0030 (0x0140 - 0x0110)
class UEasyParticle final : public UWidget
{
public:
	class UEasyParticleAsset*                     Asset;                                             // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             EventOnEnd;                                        // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         bPlayParticle : 1;                                 // 0x0128(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          IsPlaying;                                         // 0x0129(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A[0x16];                                     // 0x012A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Play();
	void SetPlayParticle(bool InPlayParticle);
	void Stop();
	void StopEmit();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticle">();
	}
	static class UEasyParticle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticle>();
	}
};
static_assert(alignof(UEasyParticle) == 0x000008, "Wrong alignment on UEasyParticle");
static_assert(sizeof(UEasyParticle) == 0x000140, "Wrong size on UEasyParticle");
static_assert(offsetof(UEasyParticle, Asset) == 0x000110, "Member 'UEasyParticle::Asset' has a wrong offset!");
static_assert(offsetof(UEasyParticle, EventOnEnd) == 0x000118, "Member 'UEasyParticle::EventOnEnd' has a wrong offset!");
static_assert(offsetof(UEasyParticle, IsPlaying) == 0x000129, "Member 'UEasyParticle::IsPlaying' has a wrong offset!");

// Class EasyParticle.EasyParticleEmitterAsset
// 0x0010 (0x0038 - 0x0028)
class UEasyParticleEmitterAsset final : public UObject
{
public:
	TArray<class UEasyParticleComponent*>         Components;                                        // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleEmitterAsset">();
	}
	static class UEasyParticleEmitterAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleEmitterAsset>();
	}
};
static_assert(alignof(UEasyParticleEmitterAsset) == 0x000008, "Wrong alignment on UEasyParticleEmitterAsset");
static_assert(sizeof(UEasyParticleEmitterAsset) == 0x000038, "Wrong size on UEasyParticleEmitterAsset");
static_assert(offsetof(UEasyParticleEmitterAsset, Components) == 0x000028, "Member 'UEasyParticleEmitterAsset::Components' has a wrong offset!");

// Class EasyParticle.EasyParticleAsset
// 0x0010 (0x0038 - 0x0028)
class UEasyParticleAsset final : public UObject
{
public:
	TArray<class UEasyParticleEmitterAsset*>      Emitters;                                          // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleAsset">();
	}
	static class UEasyParticleAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleAsset>();
	}
};
static_assert(alignof(UEasyParticleAsset) == 0x000008, "Wrong alignment on UEasyParticleAsset");
static_assert(sizeof(UEasyParticleAsset) == 0x000038, "Wrong size on UEasyParticleAsset");
static_assert(offsetof(UEasyParticleAsset, Emitters) == 0x000028, "Member 'UEasyParticleAsset::Emitters' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent
// 0x0028 (0x0050 - 0x0028)
class UEasyParticleComponent : public UObject
{
public:
	bool                                          Active;                                            // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UEasyParticleComponentRuntime> RuntimeClass;                                      // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TypeName;                                          // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentPriority                            Priority;                                          // 0x0048(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UEasyParticleComponentRuntime* CreateRuntimeComponent();
	EComponentPriority GetPriority();
	class FString GetTypeName();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent">();
	}
	static class UEasyParticleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent>();
	}
};
static_assert(alignof(UEasyParticleComponent) == 0x000008, "Wrong alignment on UEasyParticleComponent");
static_assert(sizeof(UEasyParticleComponent) == 0x000050, "Wrong size on UEasyParticleComponent");
static_assert(offsetof(UEasyParticleComponent, Active) == 0x000028, "Member 'UEasyParticleComponent::Active' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent, RuntimeClass) == 0x000030, "Member 'UEasyParticleComponent::RuntimeClass' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent, TypeName) == 0x000038, "Member 'UEasyParticleComponent::TypeName' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent, Priority) == 0x000048, "Member 'UEasyParticleComponent::Priority' has a wrong offset!");

// Class EasyParticle.EasyParticleComponentRuntime
// 0x0010 (0x0038 - 0x0028)
class UEasyParticleComponentRuntime : public UObject
{
public:
	class UEasyParticleComponent*                 ParentAsset;                                       // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEasyParticleState*                     Owner;                                             // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void Init(const struct FGeometry& AllottedGeometry);
	void PostTick(const struct FGeometry& AllottedGeometry, const float InDeltaTime);
	void Reset();
	void Tick(const struct FGeometry& AllottedGeometry, const float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponentRuntime">();
	}
	static class UEasyParticleComponentRuntime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponentRuntime>();
	}
};
static_assert(alignof(UEasyParticleComponentRuntime) == 0x000008, "Wrong alignment on UEasyParticleComponentRuntime");
static_assert(sizeof(UEasyParticleComponentRuntime) == 0x000038, "Wrong size on UEasyParticleComponentRuntime");
static_assert(offsetof(UEasyParticleComponentRuntime, ParentAsset) == 0x000028, "Member 'UEasyParticleComponentRuntime::ParentAsset' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponentRuntime, Owner) == 0x000030, "Member 'UEasyParticleComponentRuntime::Owner' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_Acceleration
// 0x01A8 (0x01F8 - 0x0050)
class UEasyParticleComponent_Acceleration final : public UEasyParticleComponent
{
public:
	struct FEasyParticlePropertyFloat             Acceleration;                                      // 0x0050(0x01A8)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_Acceleration">();
	}
	static class UEasyParticleComponent_Acceleration* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_Acceleration>();
	}
};
static_assert(alignof(UEasyParticleComponent_Acceleration) == 0x000008, "Wrong alignment on UEasyParticleComponent_Acceleration");
static_assert(sizeof(UEasyParticleComponent_Acceleration) == 0x0001F8, "Wrong size on UEasyParticleComponent_Acceleration");
static_assert(offsetof(UEasyParticleComponent_Acceleration, Acceleration) == 0x000050, "Member 'UEasyParticleComponent_Acceleration::Acceleration' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_Acceleration_Runtime
// 0x0008 (0x0040 - 0x0038)
class UEasyParticleComponent_Acceleration_Runtime final : public UEasyParticleComponentRuntime
{
public:
	struct FUIParticleRandomFactor                Factor;                                            // 0x0038(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_Acceleration_Runtime">();
	}
	static class UEasyParticleComponent_Acceleration_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_Acceleration_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_Acceleration_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_Acceleration_Runtime");
static_assert(sizeof(UEasyParticleComponent_Acceleration_Runtime) == 0x000040, "Wrong size on UEasyParticleComponent_Acceleration_Runtime");
static_assert(offsetof(UEasyParticleComponent_Acceleration_Runtime, Factor) == 0x000038, "Member 'UEasyParticleComponent_Acceleration_Runtime::Factor' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_AdditionPositionOffset
// 0x04F8 (0x0548 - 0x0050)
class UEasyParticleComponent_AdditionPositionOffset final : public UEasyParticleComponent
{
public:
	struct FEasyParticlePropertyFloat             InitialTime;                                       // 0x0050(0x01A8)(Edit, NativeAccessSpecifierPublic)
	struct FEasyParticlePropertyFloat             Frequency;                                         // 0x01F8(0x01A8)(Edit, NativeAccessSpecifierPublic)
	struct FEasyParticlePropertyFloat             Amplitude;                                         // 0x03A0(0x01A8)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_AdditionPositionOffset">();
	}
	static class UEasyParticleComponent_AdditionPositionOffset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_AdditionPositionOffset>();
	}
};
static_assert(alignof(UEasyParticleComponent_AdditionPositionOffset) == 0x000008, "Wrong alignment on UEasyParticleComponent_AdditionPositionOffset");
static_assert(sizeof(UEasyParticleComponent_AdditionPositionOffset) == 0x000548, "Wrong size on UEasyParticleComponent_AdditionPositionOffset");
static_assert(offsetof(UEasyParticleComponent_AdditionPositionOffset, InitialTime) == 0x000050, "Member 'UEasyParticleComponent_AdditionPositionOffset::InitialTime' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_AdditionPositionOffset, Frequency) == 0x0001F8, "Member 'UEasyParticleComponent_AdditionPositionOffset::Frequency' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_AdditionPositionOffset, Amplitude) == 0x0003A0, "Member 'UEasyParticleComponent_AdditionPositionOffset::Amplitude' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_AdditionPositionOffset_Runtime
// 0x0010 (0x0048 - 0x0038)
class UEasyParticleComponent_AdditionPositionOffset_Runtime final : public UEasyParticleComponentRuntime
{
public:
	struct FUIParticleRandomFactor                FactorInitialTime;                                 // 0x0038(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FUIParticleRandomFactor                FactorFrequency;                                   // 0x003C(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FUIParticleRandomFactor                FactorAmplitude;                                   // 0x0040(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_AdditionPositionOffset_Runtime">();
	}
	static class UEasyParticleComponent_AdditionPositionOffset_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_AdditionPositionOffset_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_AdditionPositionOffset_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_AdditionPositionOffset_Runtime");
static_assert(sizeof(UEasyParticleComponent_AdditionPositionOffset_Runtime) == 0x000048, "Wrong size on UEasyParticleComponent_AdditionPositionOffset_Runtime");
static_assert(offsetof(UEasyParticleComponent_AdditionPositionOffset_Runtime, FactorInitialTime) == 0x000038, "Member 'UEasyParticleComponent_AdditionPositionOffset_Runtime::FactorInitialTime' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_AdditionPositionOffset_Runtime, FactorFrequency) == 0x00003C, "Member 'UEasyParticleComponent_AdditionPositionOffset_Runtime::FactorFrequency' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_AdditionPositionOffset_Runtime, FactorAmplitude) == 0x000040, "Member 'UEasyParticleComponent_AdditionPositionOffset_Runtime::FactorAmplitude' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_Basic
// 0x0508 (0x0558 - 0x0050)
class UEasyParticleComponent_Basic final : public UEasyParticleComponent
{
public:
	class UObject*                                ResourceObject;                                    // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmitSeconds;                                       // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEasyParticlePropertyFloat             MaxParticleCount;                                  // 0x0060(0x01A8)(Edit, NativeAccessSpecifierPublic)
	struct FEasyParticlePropertyFloat             SpawnRate;                                         // 0x0208(0x01A8)(Edit, NativeAccessSpecifierPublic)
	struct FEasyParticlePropertyFloat             Lifetime;                                          // 0x03B0(0x01A8)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_Basic">();
	}
	static class UEasyParticleComponent_Basic* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_Basic>();
	}
};
static_assert(alignof(UEasyParticleComponent_Basic) == 0x000008, "Wrong alignment on UEasyParticleComponent_Basic");
static_assert(sizeof(UEasyParticleComponent_Basic) == 0x000558, "Wrong size on UEasyParticleComponent_Basic");
static_assert(offsetof(UEasyParticleComponent_Basic, ResourceObject) == 0x000050, "Member 'UEasyParticleComponent_Basic::ResourceObject' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_Basic, EmitSeconds) == 0x000058, "Member 'UEasyParticleComponent_Basic::EmitSeconds' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_Basic, MaxParticleCount) == 0x000060, "Member 'UEasyParticleComponent_Basic::MaxParticleCount' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_Basic, SpawnRate) == 0x000208, "Member 'UEasyParticleComponent_Basic::SpawnRate' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_Basic, Lifetime) == 0x0003B0, "Member 'UEasyParticleComponent_Basic::Lifetime' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_Basic_Runtime
// 0x0010 (0x0048 - 0x0038)
class UEasyParticleComponent_Basic_Runtime final : public UEasyParticleComponentRuntime
{
public:
	struct FUIParticleRandomFactor                MaxParticleCountFactor;                            // 0x0038(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FUIParticleRandomFactor                SpawnRateFactor;                                   // 0x003C(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FUIParticleRandomFactor                LifetimeFactor;                                    // 0x0040(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_Basic_Runtime">();
	}
	static class UEasyParticleComponent_Basic_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_Basic_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_Basic_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_Basic_Runtime");
static_assert(sizeof(UEasyParticleComponent_Basic_Runtime) == 0x000048, "Wrong size on UEasyParticleComponent_Basic_Runtime");
static_assert(offsetof(UEasyParticleComponent_Basic_Runtime, MaxParticleCountFactor) == 0x000038, "Member 'UEasyParticleComponent_Basic_Runtime::MaxParticleCountFactor' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_Basic_Runtime, SpawnRateFactor) == 0x00003C, "Member 'UEasyParticleComponent_Basic_Runtime::SpawnRateFactor' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_Basic_Runtime, LifetimeFactor) == 0x000040, "Member 'UEasyParticleComponent_Basic_Runtime::LifetimeFactor' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_Child
// 0x0010 (0x0060 - 0x0050)
class UEasyParticleComponent_Child final : public UEasyParticleComponent
{
public:
	class UEasyParticleAsset*                     Asset;                                             // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveParentLifePercent;                           // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_Child">();
	}
	static class UEasyParticleComponent_Child* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_Child>();
	}
};
static_assert(alignof(UEasyParticleComponent_Child) == 0x000008, "Wrong alignment on UEasyParticleComponent_Child");
static_assert(sizeof(UEasyParticleComponent_Child) == 0x000060, "Wrong size on UEasyParticleComponent_Child");
static_assert(offsetof(UEasyParticleComponent_Child, Asset) == 0x000050, "Member 'UEasyParticleComponent_Child::Asset' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_Child, ActiveParentLifePercent) == 0x000058, "Member 'UEasyParticleComponent_Child::ActiveParentLifePercent' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_Child_Runtime
// 0x0018 (0x0050 - 0x0038)
class UEasyParticleComponent_Child_Runtime final : public UEasyParticleComponentRuntime
{
public:
	TArray<struct FEasyParticleComponentRuntime_Child_SubEmitter> ChildEmitterArray;                                 // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          StopCreateParticle;                                // 0x0048(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_Child_Runtime">();
	}
	static class UEasyParticleComponent_Child_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_Child_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_Child_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_Child_Runtime");
static_assert(sizeof(UEasyParticleComponent_Child_Runtime) == 0x000050, "Wrong size on UEasyParticleComponent_Child_Runtime");
static_assert(offsetof(UEasyParticleComponent_Child_Runtime, ChildEmitterArray) == 0x000038, "Member 'UEasyParticleComponent_Child_Runtime::ChildEmitterArray' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_Child_Runtime, StopCreateParticle) == 0x000048, "Member 'UEasyParticleComponent_Child_Runtime::StopCreateParticle' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_Color
// 0x0660 (0x06B0 - 0x0050)
class UEasyParticleComponent_Color final : public UEasyParticleComponent
{
public:
	struct FEasyParticlePropertyColor             InitialColor;                                      // 0x0050(0x0660)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_Color">();
	}
	static class UEasyParticleComponent_Color* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_Color>();
	}
};
static_assert(alignof(UEasyParticleComponent_Color) == 0x000008, "Wrong alignment on UEasyParticleComponent_Color");
static_assert(sizeof(UEasyParticleComponent_Color) == 0x0006B0, "Wrong size on UEasyParticleComponent_Color");
static_assert(offsetof(UEasyParticleComponent_Color, InitialColor) == 0x000050, "Member 'UEasyParticleComponent_Color::InitialColor' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_Color_Runtime
// 0x0010 (0x0048 - 0x0038)
class UEasyParticleComponent_Color_Runtime final : public UEasyParticleComponentRuntime
{
public:
	struct FUIParticleRandomFactor                FactorR;                                           // 0x0038(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FUIParticleRandomFactor                FactorG;                                           // 0x003C(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FUIParticleRandomFactor                FactorB;                                           // 0x0040(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FUIParticleRandomFactor                FactorA;                                           // 0x0044(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_Color_Runtime">();
	}
	static class UEasyParticleComponent_Color_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_Color_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_Color_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_Color_Runtime");
static_assert(sizeof(UEasyParticleComponent_Color_Runtime) == 0x000048, "Wrong size on UEasyParticleComponent_Color_Runtime");
static_assert(offsetof(UEasyParticleComponent_Color_Runtime, FactorR) == 0x000038, "Member 'UEasyParticleComponent_Color_Runtime::FactorR' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_Color_Runtime, FactorG) == 0x00003C, "Member 'UEasyParticleComponent_Color_Runtime::FactorG' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_Color_Runtime, FactorB) == 0x000040, "Member 'UEasyParticleComponent_Color_Runtime::FactorB' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_Color_Runtime, FactorA) == 0x000044, "Member 'UEasyParticleComponent_Color_Runtime::FactorA' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_DelayActive
// 0x01A8 (0x01F8 - 0x0050)
class UEasyParticleComponent_DelayActive final : public UEasyParticleComponent
{
public:
	struct FEasyParticlePropertyFloat             Value;                                             // 0x0050(0x01A8)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_DelayActive">();
	}
	static class UEasyParticleComponent_DelayActive* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_DelayActive>();
	}
};
static_assert(alignof(UEasyParticleComponent_DelayActive) == 0x000008, "Wrong alignment on UEasyParticleComponent_DelayActive");
static_assert(sizeof(UEasyParticleComponent_DelayActive) == 0x0001F8, "Wrong size on UEasyParticleComponent_DelayActive");
static_assert(offsetof(UEasyParticleComponent_DelayActive, Value) == 0x000050, "Member 'UEasyParticleComponent_DelayActive::Value' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_DelayActive_Runtime
// 0x0008 (0x0040 - 0x0038)
class UEasyParticleComponent_DelayActive_Runtime final : public UEasyParticleComponentRuntime
{
public:
	struct FUIParticleRandomFactor                Factor;                                            // 0x0038(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_DelayActive_Runtime">();
	}
	static class UEasyParticleComponent_DelayActive_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_DelayActive_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_DelayActive_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_DelayActive_Runtime");
static_assert(sizeof(UEasyParticleComponent_DelayActive_Runtime) == 0x000040, "Wrong size on UEasyParticleComponent_DelayActive_Runtime");
static_assert(offsetof(UEasyParticleComponent_DelayActive_Runtime, Factor) == 0x000038, "Member 'UEasyParticleComponent_DelayActive_Runtime::Factor' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_FollowParentPosition
// 0x0000 (0x0050 - 0x0050)
class UEasyParticleComponent_FollowParentPosition final : public UEasyParticleComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_FollowParentPosition">();
	}
	static class UEasyParticleComponent_FollowParentPosition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_FollowParentPosition>();
	}
};
static_assert(alignof(UEasyParticleComponent_FollowParentPosition) == 0x000008, "Wrong alignment on UEasyParticleComponent_FollowParentPosition");
static_assert(sizeof(UEasyParticleComponent_FollowParentPosition) == 0x000050, "Wrong size on UEasyParticleComponent_FollowParentPosition");

// Class EasyParticle.EasyParticleComponent_FollowParentPosition_Runtime
// 0x0000 (0x0038 - 0x0038)
class UEasyParticleComponent_FollowParentPosition_Runtime final : public UEasyParticleComponentRuntime
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_FollowParentPosition_Runtime">();
	}
	static class UEasyParticleComponent_FollowParentPosition_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_FollowParentPosition_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_FollowParentPosition_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_FollowParentPosition_Runtime");
static_assert(sizeof(UEasyParticleComponent_FollowParentPosition_Runtime) == 0x000038, "Wrong size on UEasyParticleComponent_FollowParentPosition_Runtime");

// Class EasyParticle.EasyParticleComponent_Gravity
// 0x0350 (0x03A0 - 0x0050)
class UEasyParticleComponent_Gravity final : public UEasyParticleComponent
{
public:
	struct FEasyParticlePropertyFloat             GravityX;                                          // 0x0050(0x01A8)(Edit, NativeAccessSpecifierPublic)
	struct FEasyParticlePropertyFloat             GravityY;                                          // 0x01F8(0x01A8)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_Gravity">();
	}
	static class UEasyParticleComponent_Gravity* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_Gravity>();
	}
};
static_assert(alignof(UEasyParticleComponent_Gravity) == 0x000008, "Wrong alignment on UEasyParticleComponent_Gravity");
static_assert(sizeof(UEasyParticleComponent_Gravity) == 0x0003A0, "Wrong size on UEasyParticleComponent_Gravity");
static_assert(offsetof(UEasyParticleComponent_Gravity, GravityX) == 0x000050, "Member 'UEasyParticleComponent_Gravity::GravityX' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_Gravity, GravityY) == 0x0001F8, "Member 'UEasyParticleComponent_Gravity::GravityY' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_Gravity_Runtime
// 0x0008 (0x0040 - 0x0038)
class UEasyParticleComponent_Gravity_Runtime final : public UEasyParticleComponentRuntime
{
public:
	struct FUIParticleRandomFactor                FactorX;                                           // 0x0038(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FUIParticleRandomFactor                FactorY;                                           // 0x003C(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_Gravity_Runtime">();
	}
	static class UEasyParticleComponent_Gravity_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_Gravity_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_Gravity_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_Gravity_Runtime");
static_assert(sizeof(UEasyParticleComponent_Gravity_Runtime) == 0x000040, "Wrong size on UEasyParticleComponent_Gravity_Runtime");
static_assert(offsetof(UEasyParticleComponent_Gravity_Runtime, FactorX) == 0x000038, "Member 'UEasyParticleComponent_Gravity_Runtime::FactorX' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_Gravity_Runtime, FactorY) == 0x00003C, "Member 'UEasyParticleComponent_Gravity_Runtime::FactorY' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_InheritParentVelocity
// 0x0008 (0x0058 - 0x0050)
class UEasyParticleComponent_InheritParentVelocity final : public UEasyParticleComponent
{
public:
	float                                         Percent;                                           // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_InheritParentVelocity">();
	}
	static class UEasyParticleComponent_InheritParentVelocity* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_InheritParentVelocity>();
	}
};
static_assert(alignof(UEasyParticleComponent_InheritParentVelocity) == 0x000008, "Wrong alignment on UEasyParticleComponent_InheritParentVelocity");
static_assert(sizeof(UEasyParticleComponent_InheritParentVelocity) == 0x000058, "Wrong size on UEasyParticleComponent_InheritParentVelocity");
static_assert(offsetof(UEasyParticleComponent_InheritParentVelocity, Percent) == 0x000050, "Member 'UEasyParticleComponent_InheritParentVelocity::Percent' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_InheritParentVelocity_Runtime
// 0x0000 (0x0038 - 0x0038)
class UEasyParticleComponent_InheritParentVelocity_Runtime final : public UEasyParticleComponentRuntime
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_InheritParentVelocity_Runtime">();
	}
	static class UEasyParticleComponent_InheritParentVelocity_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_InheritParentVelocity_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_InheritParentVelocity_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_InheritParentVelocity_Runtime");
static_assert(sizeof(UEasyParticleComponent_InheritParentVelocity_Runtime) == 0x000038, "Wrong size on UEasyParticleComponent_InheritParentVelocity_Runtime");

// Class EasyParticle.EasyParticleComponent_InitialColor
// 0x0660 (0x06B0 - 0x0050)
class UEasyParticleComponent_InitialColor final : public UEasyParticleComponent
{
public:
	struct FEasyParticlePropertyColor             InitialColor;                                      // 0x0050(0x0660)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_InitialColor">();
	}
	static class UEasyParticleComponent_InitialColor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_InitialColor>();
	}
};
static_assert(alignof(UEasyParticleComponent_InitialColor) == 0x000008, "Wrong alignment on UEasyParticleComponent_InitialColor");
static_assert(sizeof(UEasyParticleComponent_InitialColor) == 0x0006B0, "Wrong size on UEasyParticleComponent_InitialColor");
static_assert(offsetof(UEasyParticleComponent_InitialColor, InitialColor) == 0x000050, "Member 'UEasyParticleComponent_InitialColor::InitialColor' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_InitialColor_Runtime
// 0x0010 (0x0048 - 0x0038)
class UEasyParticleComponent_InitialColor_Runtime final : public UEasyParticleComponentRuntime
{
public:
	struct FUIParticleRandomFactor                FactorR;                                           // 0x0038(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FUIParticleRandomFactor                FactorG;                                           // 0x003C(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FUIParticleRandomFactor                FactorB;                                           // 0x0040(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FUIParticleRandomFactor                FactorA;                                           // 0x0044(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_InitialColor_Runtime">();
	}
	static class UEasyParticleComponent_InitialColor_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_InitialColor_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_InitialColor_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_InitialColor_Runtime");
static_assert(sizeof(UEasyParticleComponent_InitialColor_Runtime) == 0x000048, "Wrong size on UEasyParticleComponent_InitialColor_Runtime");
static_assert(offsetof(UEasyParticleComponent_InitialColor_Runtime, FactorR) == 0x000038, "Member 'UEasyParticleComponent_InitialColor_Runtime::FactorR' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_InitialColor_Runtime, FactorG) == 0x00003C, "Member 'UEasyParticleComponent_InitialColor_Runtime::FactorG' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_InitialColor_Runtime, FactorB) == 0x000040, "Member 'UEasyParticleComponent_InitialColor_Runtime::FactorB' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_InitialColor_Runtime, FactorA) == 0x000044, "Member 'UEasyParticleComponent_InitialColor_Runtime::FactorA' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_InitialDrawEffect
// 0x0008 (0x0058 - 0x0050)
class UEasyParticleComponent_InitialDrawEffect final : public UEasyParticleComponent
{
public:
	EEasyParticleDrawEffect                       DrawEffect;                                        // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_InitialDrawEffect">();
	}
	static class UEasyParticleComponent_InitialDrawEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_InitialDrawEffect>();
	}
};
static_assert(alignof(UEasyParticleComponent_InitialDrawEffect) == 0x000008, "Wrong alignment on UEasyParticleComponent_InitialDrawEffect");
static_assert(sizeof(UEasyParticleComponent_InitialDrawEffect) == 0x000058, "Wrong size on UEasyParticleComponent_InitialDrawEffect");
static_assert(offsetof(UEasyParticleComponent_InitialDrawEffect, DrawEffect) == 0x000050, "Member 'UEasyParticleComponent_InitialDrawEffect::DrawEffect' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_InitialDrawEffect_Runtime
// 0x0000 (0x0038 - 0x0038)
class UEasyParticleComponent_InitialDrawEffect_Runtime final : public UEasyParticleComponentRuntime
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_InitialDrawEffect_Runtime">();
	}
	static class UEasyParticleComponent_InitialDrawEffect_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_InitialDrawEffect_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_InitialDrawEffect_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_InitialDrawEffect_Runtime");
static_assert(sizeof(UEasyParticleComponent_InitialDrawEffect_Runtime) == 0x000038, "Wrong size on UEasyParticleComponent_InitialDrawEffect_Runtime");

// Class EasyParticle.EasyParticleComponent_InitialPivot
// 0x0350 (0x03A0 - 0x0050)
class UEasyParticleComponent_InitialPivot final : public UEasyParticleComponent
{
public:
	struct FEasyParticlePropertyFloat             InitialPivotX;                                     // 0x0050(0x01A8)(Edit, NativeAccessSpecifierPublic)
	struct FEasyParticlePropertyFloat             InitialPivotY;                                     // 0x01F8(0x01A8)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_InitialPivot">();
	}
	static class UEasyParticleComponent_InitialPivot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_InitialPivot>();
	}
};
static_assert(alignof(UEasyParticleComponent_InitialPivot) == 0x000008, "Wrong alignment on UEasyParticleComponent_InitialPivot");
static_assert(sizeof(UEasyParticleComponent_InitialPivot) == 0x0003A0, "Wrong size on UEasyParticleComponent_InitialPivot");
static_assert(offsetof(UEasyParticleComponent_InitialPivot, InitialPivotX) == 0x000050, "Member 'UEasyParticleComponent_InitialPivot::InitialPivotX' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_InitialPivot, InitialPivotY) == 0x0001F8, "Member 'UEasyParticleComponent_InitialPivot::InitialPivotY' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_InitialPivot_Runtime
// 0x0008 (0x0040 - 0x0038)
class UEasyParticleComponent_InitialPivot_Runtime final : public UEasyParticleComponentRuntime
{
public:
	struct FUIParticleRandomFactor                FactorX;                                           // 0x0038(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FUIParticleRandomFactor                FactorY;                                           // 0x003C(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_InitialPivot_Runtime">();
	}
	static class UEasyParticleComponent_InitialPivot_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_InitialPivot_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_InitialPivot_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_InitialPivot_Runtime");
static_assert(sizeof(UEasyParticleComponent_InitialPivot_Runtime) == 0x000040, "Wrong size on UEasyParticleComponent_InitialPivot_Runtime");
static_assert(offsetof(UEasyParticleComponent_InitialPivot_Runtime, FactorX) == 0x000038, "Member 'UEasyParticleComponent_InitialPivot_Runtime::FactorX' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_InitialPivot_Runtime, FactorY) == 0x00003C, "Member 'UEasyParticleComponent_InitialPivot_Runtime::FactorY' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_InitialPosition
// 0x0350 (0x03A0 - 0x0050)
class UEasyParticleComponent_InitialPosition final : public UEasyParticleComponent
{
public:
	struct FEasyParticlePropertyFloat             InitialPositionX;                                  // 0x0050(0x01A8)(Edit, NativeAccessSpecifierPublic)
	struct FEasyParticlePropertyFloat             InitialPositionY;                                  // 0x01F8(0x01A8)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_InitialPosition">();
	}
	static class UEasyParticleComponent_InitialPosition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_InitialPosition>();
	}
};
static_assert(alignof(UEasyParticleComponent_InitialPosition) == 0x000008, "Wrong alignment on UEasyParticleComponent_InitialPosition");
static_assert(sizeof(UEasyParticleComponent_InitialPosition) == 0x0003A0, "Wrong size on UEasyParticleComponent_InitialPosition");
static_assert(offsetof(UEasyParticleComponent_InitialPosition, InitialPositionX) == 0x000050, "Member 'UEasyParticleComponent_InitialPosition::InitialPositionX' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_InitialPosition, InitialPositionY) == 0x0001F8, "Member 'UEasyParticleComponent_InitialPosition::InitialPositionY' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_InitialPosition_Runtime
// 0x0008 (0x0040 - 0x0038)
class UEasyParticleComponent_InitialPosition_Runtime final : public UEasyParticleComponentRuntime
{
public:
	struct FUIParticleRandomFactor                FactorX;                                           // 0x0038(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FUIParticleRandomFactor                FactorY;                                           // 0x003C(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_InitialPosition_Runtime">();
	}
	static class UEasyParticleComponent_InitialPosition_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_InitialPosition_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_InitialPosition_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_InitialPosition_Runtime");
static_assert(sizeof(UEasyParticleComponent_InitialPosition_Runtime) == 0x000040, "Wrong size on UEasyParticleComponent_InitialPosition_Runtime");
static_assert(offsetof(UEasyParticleComponent_InitialPosition_Runtime, FactorX) == 0x000038, "Member 'UEasyParticleComponent_InitialPosition_Runtime::FactorX' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_InitialPosition_Runtime, FactorY) == 0x00003C, "Member 'UEasyParticleComponent_InitialPosition_Runtime::FactorY' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_InitialPosition_AutoSize
// 0x0000 (0x0050 - 0x0050)
class UEasyParticleComponent_InitialPosition_AutoSize final : public UEasyParticleComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_InitialPosition_AutoSize">();
	}
	static class UEasyParticleComponent_InitialPosition_AutoSize* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_InitialPosition_AutoSize>();
	}
};
static_assert(alignof(UEasyParticleComponent_InitialPosition_AutoSize) == 0x000008, "Wrong alignment on UEasyParticleComponent_InitialPosition_AutoSize");
static_assert(sizeof(UEasyParticleComponent_InitialPosition_AutoSize) == 0x000050, "Wrong size on UEasyParticleComponent_InitialPosition_AutoSize");

// Class EasyParticle.EasyParticleComponent_InitialPosition_AutoSize_Runtime
// 0x0008 (0x0040 - 0x0038)
class UEasyParticleComponent_InitialPosition_AutoSize_Runtime final : public UEasyParticleComponentRuntime
{
public:
	struct FUIParticleRandomFactor                FactorX;                                           // 0x0038(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FUIParticleRandomFactor                FactorY;                                           // 0x003C(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_InitialPosition_AutoSize_Runtime">();
	}
	static class UEasyParticleComponent_InitialPosition_AutoSize_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_InitialPosition_AutoSize_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_InitialPosition_AutoSize_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_InitialPosition_AutoSize_Runtime");
static_assert(sizeof(UEasyParticleComponent_InitialPosition_AutoSize_Runtime) == 0x000040, "Wrong size on UEasyParticleComponent_InitialPosition_AutoSize_Runtime");
static_assert(offsetof(UEasyParticleComponent_InitialPosition_AutoSize_Runtime, FactorX) == 0x000038, "Member 'UEasyParticleComponent_InitialPosition_AutoSize_Runtime::FactorX' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_InitialPosition_AutoSize_Runtime, FactorY) == 0x00003C, "Member 'UEasyParticleComponent_InitialPosition_AutoSize_Runtime::FactorY' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_InitialRotation
// 0x01A8 (0x01F8 - 0x0050)
class UEasyParticleComponent_InitialRotation final : public UEasyParticleComponent
{
public:
	struct FEasyParticlePropertyFloat             InitialRotation;                                   // 0x0050(0x01A8)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_InitialRotation">();
	}
	static class UEasyParticleComponent_InitialRotation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_InitialRotation>();
	}
};
static_assert(alignof(UEasyParticleComponent_InitialRotation) == 0x000008, "Wrong alignment on UEasyParticleComponent_InitialRotation");
static_assert(sizeof(UEasyParticleComponent_InitialRotation) == 0x0001F8, "Wrong size on UEasyParticleComponent_InitialRotation");
static_assert(offsetof(UEasyParticleComponent_InitialRotation, InitialRotation) == 0x000050, "Member 'UEasyParticleComponent_InitialRotation::InitialRotation' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_InitialRotation_Runtime
// 0x0008 (0x0040 - 0x0038)
class UEasyParticleComponent_InitialRotation_Runtime final : public UEasyParticleComponentRuntime
{
public:
	struct FUIParticleRandomFactor                Factor;                                            // 0x0038(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_InitialRotation_Runtime">();
	}
	static class UEasyParticleComponent_InitialRotation_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_InitialRotation_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_InitialRotation_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_InitialRotation_Runtime");
static_assert(sizeof(UEasyParticleComponent_InitialRotation_Runtime) == 0x000040, "Wrong size on UEasyParticleComponent_InitialRotation_Runtime");
static_assert(offsetof(UEasyParticleComponent_InitialRotation_Runtime, Factor) == 0x000038, "Member 'UEasyParticleComponent_InitialRotation_Runtime::Factor' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_InitialRotationRate
// 0x01A8 (0x01F8 - 0x0050)
class UEasyParticleComponent_InitialRotationRate final : public UEasyParticleComponent
{
public:
	struct FEasyParticlePropertyFloat             InitialRotationRate;                               // 0x0050(0x01A8)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_InitialRotationRate">();
	}
	static class UEasyParticleComponent_InitialRotationRate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_InitialRotationRate>();
	}
};
static_assert(alignof(UEasyParticleComponent_InitialRotationRate) == 0x000008, "Wrong alignment on UEasyParticleComponent_InitialRotationRate");
static_assert(sizeof(UEasyParticleComponent_InitialRotationRate) == 0x0001F8, "Wrong size on UEasyParticleComponent_InitialRotationRate");
static_assert(offsetof(UEasyParticleComponent_InitialRotationRate, InitialRotationRate) == 0x000050, "Member 'UEasyParticleComponent_InitialRotationRate::InitialRotationRate' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_InitialRotationRate_Runtime
// 0x0008 (0x0040 - 0x0038)
class UEasyParticleComponent_InitialRotationRate_Runtime final : public UEasyParticleComponentRuntime
{
public:
	struct FUIParticleRandomFactor                Factor;                                            // 0x0038(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_InitialRotationRate_Runtime">();
	}
	static class UEasyParticleComponent_InitialRotationRate_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_InitialRotationRate_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_InitialRotationRate_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_InitialRotationRate_Runtime");
static_assert(sizeof(UEasyParticleComponent_InitialRotationRate_Runtime) == 0x000040, "Wrong size on UEasyParticleComponent_InitialRotationRate_Runtime");
static_assert(offsetof(UEasyParticleComponent_InitialRotationRate_Runtime, Factor) == 0x000038, "Member 'UEasyParticleComponent_InitialRotationRate_Runtime::Factor' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_InitialSize
// 0x01A8 (0x01F8 - 0x0050)
class UEasyParticleComponent_InitialSize final : public UEasyParticleComponent
{
public:
	struct FEasyParticlePropertyFloat             InitialSize;                                       // 0x0050(0x01A8)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_InitialSize">();
	}
	static class UEasyParticleComponent_InitialSize* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_InitialSize>();
	}
};
static_assert(alignof(UEasyParticleComponent_InitialSize) == 0x000008, "Wrong alignment on UEasyParticleComponent_InitialSize");
static_assert(sizeof(UEasyParticleComponent_InitialSize) == 0x0001F8, "Wrong size on UEasyParticleComponent_InitialSize");
static_assert(offsetof(UEasyParticleComponent_InitialSize, InitialSize) == 0x000050, "Member 'UEasyParticleComponent_InitialSize::InitialSize' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_InitialSize_Runtime
// 0x0008 (0x0040 - 0x0038)
class UEasyParticleComponent_InitialSize_Runtime final : public UEasyParticleComponentRuntime
{
public:
	struct FUIParticleRandomFactor                Factor;                                            // 0x0038(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_InitialSize_Runtime">();
	}
	static class UEasyParticleComponent_InitialSize_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_InitialSize_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_InitialSize_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_InitialSize_Runtime");
static_assert(sizeof(UEasyParticleComponent_InitialSize_Runtime) == 0x000040, "Wrong size on UEasyParticleComponent_InitialSize_Runtime");
static_assert(offsetof(UEasyParticleComponent_InitialSize_Runtime, Factor) == 0x000038, "Member 'UEasyParticleComponent_InitialSize_Runtime::Factor' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_InitialSize_AutoSize
// 0x0010 (0x0060 - 0x0050)
class UEasyParticleComponent_InitialSize_AutoSize final : public UEasyParticleComponent
{
public:
	bool                                          ScaleByX;                                          // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              DesignSize;                                        // 0x0054(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_InitialSize_AutoSize">();
	}
	static class UEasyParticleComponent_InitialSize_AutoSize* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_InitialSize_AutoSize>();
	}
};
static_assert(alignof(UEasyParticleComponent_InitialSize_AutoSize) == 0x000008, "Wrong alignment on UEasyParticleComponent_InitialSize_AutoSize");
static_assert(sizeof(UEasyParticleComponent_InitialSize_AutoSize) == 0x000060, "Wrong size on UEasyParticleComponent_InitialSize_AutoSize");
static_assert(offsetof(UEasyParticleComponent_InitialSize_AutoSize, ScaleByX) == 0x000050, "Member 'UEasyParticleComponent_InitialSize_AutoSize::ScaleByX' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_InitialSize_AutoSize, DesignSize) == 0x000054, "Member 'UEasyParticleComponent_InitialSize_AutoSize::DesignSize' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_InitialSize_AutoSize_Runtime
// 0x0000 (0x0038 - 0x0038)
class UEasyParticleComponent_InitialSize_AutoSize_Runtime final : public UEasyParticleComponentRuntime
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_InitialSize_AutoSize_Runtime">();
	}
	static class UEasyParticleComponent_InitialSize_AutoSize_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_InitialSize_AutoSize_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_InitialSize_AutoSize_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_InitialSize_AutoSize_Runtime");
static_assert(sizeof(UEasyParticleComponent_InitialSize_AutoSize_Runtime) == 0x000038, "Wrong size on UEasyParticleComponent_InitialSize_AutoSize_Runtime");

// Class EasyParticle.EasyParticleComponent_InitialSizeXY
// 0x0350 (0x03A0 - 0x0050)
class UEasyParticleComponent_InitialSizeXY final : public UEasyParticleComponent
{
public:
	struct FEasyParticlePropertyFloat             InitialSizeX;                                      // 0x0050(0x01A8)(Edit, NativeAccessSpecifierPublic)
	struct FEasyParticlePropertyFloat             InitialSizeY;                                      // 0x01F8(0x01A8)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_InitialSizeXY">();
	}
	static class UEasyParticleComponent_InitialSizeXY* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_InitialSizeXY>();
	}
};
static_assert(alignof(UEasyParticleComponent_InitialSizeXY) == 0x000008, "Wrong alignment on UEasyParticleComponent_InitialSizeXY");
static_assert(sizeof(UEasyParticleComponent_InitialSizeXY) == 0x0003A0, "Wrong size on UEasyParticleComponent_InitialSizeXY");
static_assert(offsetof(UEasyParticleComponent_InitialSizeXY, InitialSizeX) == 0x000050, "Member 'UEasyParticleComponent_InitialSizeXY::InitialSizeX' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_InitialSizeXY, InitialSizeY) == 0x0001F8, "Member 'UEasyParticleComponent_InitialSizeXY::InitialSizeY' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_InitialSizeXY_Runtime
// 0x0008 (0x0040 - 0x0038)
class UEasyParticleComponent_InitialSizeXY_Runtime final : public UEasyParticleComponentRuntime
{
public:
	struct FUIParticleRandomFactor                FactorX;                                           // 0x0038(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FUIParticleRandomFactor                FactorY;                                           // 0x003C(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_InitialSizeXY_Runtime">();
	}
	static class UEasyParticleComponent_InitialSizeXY_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_InitialSizeXY_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_InitialSizeXY_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_InitialSizeXY_Runtime");
static_assert(sizeof(UEasyParticleComponent_InitialSizeXY_Runtime) == 0x000040, "Wrong size on UEasyParticleComponent_InitialSizeXY_Runtime");
static_assert(offsetof(UEasyParticleComponent_InitialSizeXY_Runtime, FactorX) == 0x000038, "Member 'UEasyParticleComponent_InitialSizeXY_Runtime::FactorX' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_InitialSizeXY_Runtime, FactorY) == 0x00003C, "Member 'UEasyParticleComponent_InitialSizeXY_Runtime::FactorY' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_InitialVelocity
// 0x0350 (0x03A0 - 0x0050)
class UEasyParticleComponent_InitialVelocity final : public UEasyParticleComponent
{
public:
	struct FEasyParticlePropertyFloat             InitialVelocity;                                   // 0x0050(0x01A8)(Edit, NativeAccessSpecifierPublic)
	struct FEasyParticlePropertyFloat             InitialVelocityDirection;                          // 0x01F8(0x01A8)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_InitialVelocity">();
	}
	static class UEasyParticleComponent_InitialVelocity* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_InitialVelocity>();
	}
};
static_assert(alignof(UEasyParticleComponent_InitialVelocity) == 0x000008, "Wrong alignment on UEasyParticleComponent_InitialVelocity");
static_assert(sizeof(UEasyParticleComponent_InitialVelocity) == 0x0003A0, "Wrong size on UEasyParticleComponent_InitialVelocity");
static_assert(offsetof(UEasyParticleComponent_InitialVelocity, InitialVelocity) == 0x000050, "Member 'UEasyParticleComponent_InitialVelocity::InitialVelocity' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_InitialVelocity, InitialVelocityDirection) == 0x0001F8, "Member 'UEasyParticleComponent_InitialVelocity::InitialVelocityDirection' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_InitialVelocity_Runtime
// 0x0008 (0x0040 - 0x0038)
class UEasyParticleComponent_InitialVelocity_Runtime final : public UEasyParticleComponentRuntime
{
public:
	struct FUIParticleRandomFactor                FactorSpeed;                                       // 0x0038(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FUIParticleRandomFactor                FactorDirection;                                   // 0x003C(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_InitialVelocity_Runtime">();
	}
	static class UEasyParticleComponent_InitialVelocity_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_InitialVelocity_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_InitialVelocity_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_InitialVelocity_Runtime");
static_assert(sizeof(UEasyParticleComponent_InitialVelocity_Runtime) == 0x000040, "Wrong size on UEasyParticleComponent_InitialVelocity_Runtime");
static_assert(offsetof(UEasyParticleComponent_InitialVelocity_Runtime, FactorSpeed) == 0x000038, "Member 'UEasyParticleComponent_InitialVelocity_Runtime::FactorSpeed' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_InitialVelocity_Runtime, FactorDirection) == 0x00003C, "Member 'UEasyParticleComponent_InitialVelocity_Runtime::FactorDirection' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_InitialZOrderOffset
// 0x01A8 (0x01F8 - 0x0050)
class UEasyParticleComponent_InitialZOrderOffset final : public UEasyParticleComponent
{
public:
	struct FEasyParticlePropertyFloat             InitialZOrderOffset;                               // 0x0050(0x01A8)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_InitialZOrderOffset">();
	}
	static class UEasyParticleComponent_InitialZOrderOffset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_InitialZOrderOffset>();
	}
};
static_assert(alignof(UEasyParticleComponent_InitialZOrderOffset) == 0x000008, "Wrong alignment on UEasyParticleComponent_InitialZOrderOffset");
static_assert(sizeof(UEasyParticleComponent_InitialZOrderOffset) == 0x0001F8, "Wrong size on UEasyParticleComponent_InitialZOrderOffset");
static_assert(offsetof(UEasyParticleComponent_InitialZOrderOffset, InitialZOrderOffset) == 0x000050, "Member 'UEasyParticleComponent_InitialZOrderOffset::InitialZOrderOffset' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_InitialZOrderOffset_Runtime
// 0x0008 (0x0040 - 0x0038)
class UEasyParticleComponent_InitialZOrderOffset_Runtime final : public UEasyParticleComponentRuntime
{
public:
	struct FUIParticleRandomFactor                Factor;                                            // 0x0038(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_InitialZOrderOffset_Runtime">();
	}
	static class UEasyParticleComponent_InitialZOrderOffset_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_InitialZOrderOffset_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_InitialZOrderOffset_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_InitialZOrderOffset_Runtime");
static_assert(sizeof(UEasyParticleComponent_InitialZOrderOffset_Runtime) == 0x000040, "Wrong size on UEasyParticleComponent_InitialZOrderOffset_Runtime");
static_assert(offsetof(UEasyParticleComponent_InitialZOrderOffset_Runtime, Factor) == 0x000038, "Member 'UEasyParticleComponent_InitialZOrderOffset_Runtime::Factor' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_Orbit
// 0x04F8 (0x0548 - 0x0050)
class UEasyParticleComponent_Orbit final : public UEasyParticleComponent
{
public:
	struct FEasyParticlePropertyFloat             InitialRotation;                                   // 0x0050(0x01A8)(Edit, NativeAccessSpecifierPublic)
	struct FEasyParticlePropertyFloat             Radius;                                            // 0x01F8(0x01A8)(Edit, NativeAccessSpecifierPublic)
	struct FEasyParticlePropertyFloat             RotationRate;                                      // 0x03A0(0x01A8)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_Orbit">();
	}
	static class UEasyParticleComponent_Orbit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_Orbit>();
	}
};
static_assert(alignof(UEasyParticleComponent_Orbit) == 0x000008, "Wrong alignment on UEasyParticleComponent_Orbit");
static_assert(sizeof(UEasyParticleComponent_Orbit) == 0x000548, "Wrong size on UEasyParticleComponent_Orbit");
static_assert(offsetof(UEasyParticleComponent_Orbit, InitialRotation) == 0x000050, "Member 'UEasyParticleComponent_Orbit::InitialRotation' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_Orbit, Radius) == 0x0001F8, "Member 'UEasyParticleComponent_Orbit::Radius' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_Orbit, RotationRate) == 0x0003A0, "Member 'UEasyParticleComponent_Orbit::RotationRate' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_Orbit_Runtime
// 0x0010 (0x0048 - 0x0038)
class UEasyParticleComponent_Orbit_Runtime final : public UEasyParticleComponentRuntime
{
public:
	struct FUIParticleRandomFactor                FactorInitialRotation;                             // 0x0038(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FUIParticleRandomFactor                FactorRadius;                                      // 0x003C(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FUIParticleRandomFactor                FactorRotationRate;                                // 0x0040(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_Orbit_Runtime">();
	}
	static class UEasyParticleComponent_Orbit_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_Orbit_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_Orbit_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_Orbit_Runtime");
static_assert(sizeof(UEasyParticleComponent_Orbit_Runtime) == 0x000048, "Wrong size on UEasyParticleComponent_Orbit_Runtime");
static_assert(offsetof(UEasyParticleComponent_Orbit_Runtime, FactorInitialRotation) == 0x000038, "Member 'UEasyParticleComponent_Orbit_Runtime::FactorInitialRotation' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_Orbit_Runtime, FactorRadius) == 0x00003C, "Member 'UEasyParticleComponent_Orbit_Runtime::FactorRadius' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_Orbit_Runtime, FactorRotationRate) == 0x000040, "Member 'UEasyParticleComponent_Orbit_Runtime::FactorRotationRate' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_RadialAcceleration
// 0x01A8 (0x01F8 - 0x0050)
class UEasyParticleComponent_RadialAcceleration final : public UEasyParticleComponent
{
public:
	struct FEasyParticlePropertyFloat             RadialAcceleration;                                // 0x0050(0x01A8)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_RadialAcceleration">();
	}
	static class UEasyParticleComponent_RadialAcceleration* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_RadialAcceleration>();
	}
};
static_assert(alignof(UEasyParticleComponent_RadialAcceleration) == 0x000008, "Wrong alignment on UEasyParticleComponent_RadialAcceleration");
static_assert(sizeof(UEasyParticleComponent_RadialAcceleration) == 0x0001F8, "Wrong size on UEasyParticleComponent_RadialAcceleration");
static_assert(offsetof(UEasyParticleComponent_RadialAcceleration, RadialAcceleration) == 0x000050, "Member 'UEasyParticleComponent_RadialAcceleration::RadialAcceleration' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_RadialAcceleration_Runtime
// 0x0008 (0x0040 - 0x0038)
class UEasyParticleComponent_RadialAcceleration_Runtime final : public UEasyParticleComponentRuntime
{
public:
	struct FUIParticleRandomFactor                Factor;                                            // 0x0038(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_RadialAcceleration_Runtime">();
	}
	static class UEasyParticleComponent_RadialAcceleration_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_RadialAcceleration_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_RadialAcceleration_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_RadialAcceleration_Runtime");
static_assert(sizeof(UEasyParticleComponent_RadialAcceleration_Runtime) == 0x000040, "Wrong size on UEasyParticleComponent_RadialAcceleration_Runtime");
static_assert(offsetof(UEasyParticleComponent_RadialAcceleration_Runtime, Factor) == 0x000038, "Member 'UEasyParticleComponent_RadialAcceleration_Runtime::Factor' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_RotationRate
// 0x01A8 (0x01F8 - 0x0050)
class UEasyParticleComponent_RotationRate final : public UEasyParticleComponent
{
public:
	struct FEasyParticlePropertyFloat             RotationRate;                                      // 0x0050(0x01A8)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_RotationRate">();
	}
	static class UEasyParticleComponent_RotationRate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_RotationRate>();
	}
};
static_assert(alignof(UEasyParticleComponent_RotationRate) == 0x000008, "Wrong alignment on UEasyParticleComponent_RotationRate");
static_assert(sizeof(UEasyParticleComponent_RotationRate) == 0x0001F8, "Wrong size on UEasyParticleComponent_RotationRate");
static_assert(offsetof(UEasyParticleComponent_RotationRate, RotationRate) == 0x000050, "Member 'UEasyParticleComponent_RotationRate::RotationRate' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_RotationRate_Runtime
// 0x0008 (0x0040 - 0x0038)
class UEasyParticleComponent_RotationRate_Runtime final : public UEasyParticleComponentRuntime
{
public:
	struct FUIParticleRandomFactor                Factor;                                            // 0x0038(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_RotationRate_Runtime">();
	}
	static class UEasyParticleComponent_RotationRate_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_RotationRate_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_RotationRate_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_RotationRate_Runtime");
static_assert(sizeof(UEasyParticleComponent_RotationRate_Runtime) == 0x000040, "Wrong size on UEasyParticleComponent_RotationRate_Runtime");
static_assert(offsetof(UEasyParticleComponent_RotationRate_Runtime, Factor) == 0x000038, "Member 'UEasyParticleComponent_RotationRate_Runtime::Factor' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_RotationToVelocityDirection
// 0x0000 (0x0050 - 0x0050)
class UEasyParticleComponent_RotationToVelocityDirection final : public UEasyParticleComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_RotationToVelocityDirection">();
	}
	static class UEasyParticleComponent_RotationToVelocityDirection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_RotationToVelocityDirection>();
	}
};
static_assert(alignof(UEasyParticleComponent_RotationToVelocityDirection) == 0x000008, "Wrong alignment on UEasyParticleComponent_RotationToVelocityDirection");
static_assert(sizeof(UEasyParticleComponent_RotationToVelocityDirection) == 0x000050, "Wrong size on UEasyParticleComponent_RotationToVelocityDirection");

// Class EasyParticle.EasyParticleComponent_RotationToVelocityDirection_Runtime
// 0x0000 (0x0038 - 0x0038)
class UEasyParticleComponent_RotationToVelocityDirection_Runtime final : public UEasyParticleComponentRuntime
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_RotationToVelocityDirection_Runtime">();
	}
	static class UEasyParticleComponent_RotationToVelocityDirection_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_RotationToVelocityDirection_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_RotationToVelocityDirection_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_RotationToVelocityDirection_Runtime");
static_assert(sizeof(UEasyParticleComponent_RotationToVelocityDirection_Runtime) == 0x000038, "Wrong size on UEasyParticleComponent_RotationToVelocityDirection_Runtime");

// Class EasyParticle.EasyParticleComponent_ScalarParam
// 0x01B0 (0x0200 - 0x0050)
class UEasyParticleComponent_ScalarParam final : public UEasyParticleComponent
{
public:
	class FName                                   ScalarParamName;                                   // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEasyParticlePropertyFloat             Value;                                             // 0x0058(0x01A8)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_ScalarParam">();
	}
	static class UEasyParticleComponent_ScalarParam* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_ScalarParam>();
	}
};
static_assert(alignof(UEasyParticleComponent_ScalarParam) == 0x000008, "Wrong alignment on UEasyParticleComponent_ScalarParam");
static_assert(sizeof(UEasyParticleComponent_ScalarParam) == 0x000200, "Wrong size on UEasyParticleComponent_ScalarParam");
static_assert(offsetof(UEasyParticleComponent_ScalarParam, ScalarParamName) == 0x000050, "Member 'UEasyParticleComponent_ScalarParam::ScalarParamName' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_ScalarParam, Value) == 0x000058, "Member 'UEasyParticleComponent_ScalarParam::Value' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_ScalarParam_Runtime
// 0x0008 (0x0040 - 0x0038)
class UEasyParticleComponent_ScalarParam_Runtime final : public UEasyParticleComponentRuntime
{
public:
	struct FUIParticleRandomFactor                Factor;                                            // 0x0038(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_ScalarParam_Runtime">();
	}
	static class UEasyParticleComponent_ScalarParam_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_ScalarParam_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_ScalarParam_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_ScalarParam_Runtime");
static_assert(sizeof(UEasyParticleComponent_ScalarParam_Runtime) == 0x000040, "Wrong size on UEasyParticleComponent_ScalarParam_Runtime");
static_assert(offsetof(UEasyParticleComponent_ScalarParam_Runtime, Factor) == 0x000038, "Member 'UEasyParticleComponent_ScalarParam_Runtime::Factor' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_Size
// 0x01A8 (0x01F8 - 0x0050)
class UEasyParticleComponent_Size final : public UEasyParticleComponent
{
public:
	struct FEasyParticlePropertyFloat             Size;                                              // 0x0050(0x01A8)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_Size">();
	}
	static class UEasyParticleComponent_Size* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_Size>();
	}
};
static_assert(alignof(UEasyParticleComponent_Size) == 0x000008, "Wrong alignment on UEasyParticleComponent_Size");
static_assert(sizeof(UEasyParticleComponent_Size) == 0x0001F8, "Wrong size on UEasyParticleComponent_Size");
static_assert(offsetof(UEasyParticleComponent_Size, Size) == 0x000050, "Member 'UEasyParticleComponent_Size::Size' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_Size_Runtime
// 0x0008 (0x0040 - 0x0038)
class UEasyParticleComponent_Size_Runtime final : public UEasyParticleComponentRuntime
{
public:
	struct FUIParticleRandomFactor                Factor;                                            // 0x0038(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_Size_Runtime">();
	}
	static class UEasyParticleComponent_Size_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_Size_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_Size_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_Size_Runtime");
static_assert(sizeof(UEasyParticleComponent_Size_Runtime) == 0x000040, "Wrong size on UEasyParticleComponent_Size_Runtime");
static_assert(offsetof(UEasyParticleComponent_Size_Runtime, Factor) == 0x000038, "Member 'UEasyParticleComponent_Size_Runtime::Factor' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_SizeScaleBySpeed
// 0x0350 (0x03A0 - 0x0050)
class UEasyParticleComponent_SizeScaleBySpeed final : public UEasyParticleComponent
{
public:
	struct FEasyParticlePropertyFloat             ScaleX;                                            // 0x0050(0x01A8)(Edit, NativeAccessSpecifierPublic)
	struct FEasyParticlePropertyFloat             ScaleY;                                            // 0x01F8(0x01A8)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_SizeScaleBySpeed">();
	}
	static class UEasyParticleComponent_SizeScaleBySpeed* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_SizeScaleBySpeed>();
	}
};
static_assert(alignof(UEasyParticleComponent_SizeScaleBySpeed) == 0x000008, "Wrong alignment on UEasyParticleComponent_SizeScaleBySpeed");
static_assert(sizeof(UEasyParticleComponent_SizeScaleBySpeed) == 0x0003A0, "Wrong size on UEasyParticleComponent_SizeScaleBySpeed");
static_assert(offsetof(UEasyParticleComponent_SizeScaleBySpeed, ScaleX) == 0x000050, "Member 'UEasyParticleComponent_SizeScaleBySpeed::ScaleX' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_SizeScaleBySpeed, ScaleY) == 0x0001F8, "Member 'UEasyParticleComponent_SizeScaleBySpeed::ScaleY' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_SizeScaleBySpeed_Runtime
// 0x0008 (0x0040 - 0x0038)
class UEasyParticleComponent_SizeScaleBySpeed_Runtime final : public UEasyParticleComponentRuntime
{
public:
	struct FUIParticleRandomFactor                FactorX;                                           // 0x0038(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FUIParticleRandomFactor                FactorY;                                           // 0x003C(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_SizeScaleBySpeed_Runtime">();
	}
	static class UEasyParticleComponent_SizeScaleBySpeed_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_SizeScaleBySpeed_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_SizeScaleBySpeed_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_SizeScaleBySpeed_Runtime");
static_assert(sizeof(UEasyParticleComponent_SizeScaleBySpeed_Runtime) == 0x000040, "Wrong size on UEasyParticleComponent_SizeScaleBySpeed_Runtime");
static_assert(offsetof(UEasyParticleComponent_SizeScaleBySpeed_Runtime, FactorX) == 0x000038, "Member 'UEasyParticleComponent_SizeScaleBySpeed_Runtime::FactorX' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_SizeScaleBySpeed_Runtime, FactorY) == 0x00003C, "Member 'UEasyParticleComponent_SizeScaleBySpeed_Runtime::FactorY' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_SizeXY
// 0x0350 (0x03A0 - 0x0050)
class UEasyParticleComponent_SizeXY final : public UEasyParticleComponent
{
public:
	struct FEasyParticlePropertyFloat             SizeX;                                             // 0x0050(0x01A8)(Edit, NativeAccessSpecifierPublic)
	struct FEasyParticlePropertyFloat             SizeY;                                             // 0x01F8(0x01A8)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_SizeXY">();
	}
	static class UEasyParticleComponent_SizeXY* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_SizeXY>();
	}
};
static_assert(alignof(UEasyParticleComponent_SizeXY) == 0x000008, "Wrong alignment on UEasyParticleComponent_SizeXY");
static_assert(sizeof(UEasyParticleComponent_SizeXY) == 0x0003A0, "Wrong size on UEasyParticleComponent_SizeXY");
static_assert(offsetof(UEasyParticleComponent_SizeXY, SizeX) == 0x000050, "Member 'UEasyParticleComponent_SizeXY::SizeX' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_SizeXY, SizeY) == 0x0001F8, "Member 'UEasyParticleComponent_SizeXY::SizeY' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_SizeXY_Runtime
// 0x0008 (0x0040 - 0x0038)
class UEasyParticleComponent_SizeXY_Runtime final : public UEasyParticleComponentRuntime
{
public:
	struct FUIParticleRandomFactor                FactorX;                                           // 0x0038(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FUIParticleRandomFactor                FactorY;                                           // 0x003C(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_SizeXY_Runtime">();
	}
	static class UEasyParticleComponent_SizeXY_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_SizeXY_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_SizeXY_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_SizeXY_Runtime");
static_assert(sizeof(UEasyParticleComponent_SizeXY_Runtime) == 0x000040, "Wrong size on UEasyParticleComponent_SizeXY_Runtime");
static_assert(offsetof(UEasyParticleComponent_SizeXY_Runtime, FactorX) == 0x000038, "Member 'UEasyParticleComponent_SizeXY_Runtime::FactorX' has a wrong offset!");
static_assert(offsetof(UEasyParticleComponent_SizeXY_Runtime, FactorY) == 0x00003C, "Member 'UEasyParticleComponent_SizeXY_Runtime::FactorY' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_TangentialAcceleration
// 0x01A8 (0x01F8 - 0x0050)
class UEasyParticleComponent_TangentialAcceleration final : public UEasyParticleComponent
{
public:
	struct FEasyParticlePropertyFloat             TangentialAcceleration;                            // 0x0050(0x01A8)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_TangentialAcceleration">();
	}
	static class UEasyParticleComponent_TangentialAcceleration* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_TangentialAcceleration>();
	}
};
static_assert(alignof(UEasyParticleComponent_TangentialAcceleration) == 0x000008, "Wrong alignment on UEasyParticleComponent_TangentialAcceleration");
static_assert(sizeof(UEasyParticleComponent_TangentialAcceleration) == 0x0001F8, "Wrong size on UEasyParticleComponent_TangentialAcceleration");
static_assert(offsetof(UEasyParticleComponent_TangentialAcceleration, TangentialAcceleration) == 0x000050, "Member 'UEasyParticleComponent_TangentialAcceleration::TangentialAcceleration' has a wrong offset!");

// Class EasyParticle.EasyParticleComponent_TangentialAcceleration_Runtime
// 0x0008 (0x0040 - 0x0038)
class UEasyParticleComponent_TangentialAcceleration_Runtime final : public UEasyParticleComponentRuntime
{
public:
	struct FUIParticleRandomFactor                Factor;                                            // 0x0038(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleComponent_TangentialAcceleration_Runtime">();
	}
	static class UEasyParticleComponent_TangentialAcceleration_Runtime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleComponent_TangentialAcceleration_Runtime>();
	}
};
static_assert(alignof(UEasyParticleComponent_TangentialAcceleration_Runtime) == 0x000008, "Wrong alignment on UEasyParticleComponent_TangentialAcceleration_Runtime");
static_assert(sizeof(UEasyParticleComponent_TangentialAcceleration_Runtime) == 0x000040, "Wrong size on UEasyParticleComponent_TangentialAcceleration_Runtime");
static_assert(offsetof(UEasyParticleComponent_TangentialAcceleration_Runtime, Factor) == 0x000038, "Member 'UEasyParticleComponent_TangentialAcceleration_Runtime::Factor' has a wrong offset!");

// Class EasyParticle.EasyParticleState
// 0x01B8 (0x01E0 - 0x0028)
class UEasyParticleState : public UObject
{
public:
	TArray<class UEasyParticleComponentRuntime*>  Components;                                        // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class UEasyParticleEmitterAsset*              Asset;                                             // 0x0038(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEasyParticleStateRuntime              InitialState;                                      // 0x0040(0x0054)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FEasyParticleStateRuntime              CurrentState;                                      // 0x0094(0x0054)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FEasyParticleStateRuntime              BackBufferState;                                   // 0x00E8(0x0054)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UEasyParticleComponent_Child_Runtime*   ParentComponent;                                   // 0x0140(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIParticleState                              State;                                             // 0x0148(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x97];                                     // 0x0149(0x0097)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleState">();
	}
	static class UEasyParticleState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleState>();
	}
};
static_assert(alignof(UEasyParticleState) == 0x000008, "Wrong alignment on UEasyParticleState");
static_assert(sizeof(UEasyParticleState) == 0x0001E0, "Wrong size on UEasyParticleState");
static_assert(offsetof(UEasyParticleState, Components) == 0x000028, "Member 'UEasyParticleState::Components' has a wrong offset!");
static_assert(offsetof(UEasyParticleState, Asset) == 0x000038, "Member 'UEasyParticleState::Asset' has a wrong offset!");
static_assert(offsetof(UEasyParticleState, InitialState) == 0x000040, "Member 'UEasyParticleState::InitialState' has a wrong offset!");
static_assert(offsetof(UEasyParticleState, CurrentState) == 0x000094, "Member 'UEasyParticleState::CurrentState' has a wrong offset!");
static_assert(offsetof(UEasyParticleState, BackBufferState) == 0x0000E8, "Member 'UEasyParticleState::BackBufferState' has a wrong offset!");
static_assert(offsetof(UEasyParticleState, ParentComponent) == 0x000140, "Member 'UEasyParticleState::ParentComponent' has a wrong offset!");
static_assert(offsetof(UEasyParticleState, State) == 0x000148, "Member 'UEasyParticleState::State' has a wrong offset!");

// Class EasyParticle.EasyParticleRootState
// 0x0008 (0x01E8 - 0x01E0)
class UEasyParticleRootState final : public UEasyParticleState
{
public:
	class UEasyParticleComponent_Child*           RootComponent;                                     // 0x01E0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EasyParticleRootState">();
	}
	static class UEasyParticleRootState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEasyParticleRootState>();
	}
};
static_assert(alignof(UEasyParticleRootState) == 0x000008, "Wrong alignment on UEasyParticleRootState");
static_assert(sizeof(UEasyParticleRootState) == 0x0001E8, "Wrong size on UEasyParticleRootState");
static_assert(offsetof(UEasyParticleRootState, RootComponent) == 0x0001E0, "Member 'UEasyParticleRootState::RootComponent' has a wrong offset!");

}

