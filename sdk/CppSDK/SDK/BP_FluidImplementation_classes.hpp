#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FluidImplementation

#include "Basic.hpp"

#include "ProjectP_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FluidImplementation.BP_FluidImplementation_C
// 0x0098 (0x0148 - 0x00B0)
class UBP_FluidImplementation_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ABP_FluidController_C*                  FluidControllerReference;                          // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   FluidControllerTag;                                // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   FluidSurfaceTag;                                   // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceOffsetUp;                                     // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceOffsetDown;                                   // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsePerBoneTrace;                                   // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShowTraceDebug;                                    // 0x00D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DA[0x2];                                       // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TraceOffsetDownDiff;                               // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceOffsetDownDiffSpeed;                          // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FluidDrawSize;                                     // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FluidMaxDrawIntensity;                             // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseFrustumCulling;                                 // 0x00EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FluidCullDistance;                                 // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VelocityDeterminesIntensity;                       // 0x00F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VelocityDivideIntensity;                           // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   FluidMeshTag;                                      // 0x00FC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BonesToDraw;                                       // 0x0108(0x0010)(Edit, BlueprintVisible)
	TArray<class UMeshComponent*>                 MeshComponents;                                    // 0x0118(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, AdvancedDisplay)
	float                                         VelocityBegin;                                     // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DrawMaterialInstanceDynamic;                       // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TArray<float>                                 BoneLocationZOffset;                               // 0x0138(0x0010)(Edit, BlueprintVisible)

public:
	void ExecuteUbergraph_BP_FluidImplementation(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void FluidTrace(const struct FVector& Location, bool* Valid, EPhysicalSurface* Surface_Type);
	void FindFluidController();
	void PerBoneDraw(class FName Bone_Name, class UMeshComponent*& Mesh_Component, float ZOffset);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FluidImplementation_C">();
	}
	static class UBP_FluidImplementation_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_FluidImplementation_C>();
	}
};
static_assert(alignof(UBP_FluidImplementation_C) == 0x000008, "Wrong alignment on UBP_FluidImplementation_C");
static_assert(sizeof(UBP_FluidImplementation_C) == 0x000148, "Wrong size on UBP_FluidImplementation_C");
static_assert(offsetof(UBP_FluidImplementation_C, UberGraphFrame) == 0x0000B0, "Member 'UBP_FluidImplementation_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_FluidImplementation_C, FluidControllerReference) == 0x0000B8, "Member 'UBP_FluidImplementation_C::FluidControllerReference' has a wrong offset!");
static_assert(offsetof(UBP_FluidImplementation_C, FluidControllerTag) == 0x0000C0, "Member 'UBP_FluidImplementation_C::FluidControllerTag' has a wrong offset!");
static_assert(offsetof(UBP_FluidImplementation_C, FluidSurfaceTag) == 0x0000C8, "Member 'UBP_FluidImplementation_C::FluidSurfaceTag' has a wrong offset!");
static_assert(offsetof(UBP_FluidImplementation_C, TraceOffsetUp) == 0x0000D0, "Member 'UBP_FluidImplementation_C::TraceOffsetUp' has a wrong offset!");
static_assert(offsetof(UBP_FluidImplementation_C, TraceOffsetDown) == 0x0000D4, "Member 'UBP_FluidImplementation_C::TraceOffsetDown' has a wrong offset!");
static_assert(offsetof(UBP_FluidImplementation_C, UsePerBoneTrace) == 0x0000D8, "Member 'UBP_FluidImplementation_C::UsePerBoneTrace' has a wrong offset!");
static_assert(offsetof(UBP_FluidImplementation_C, ShowTraceDebug) == 0x0000D9, "Member 'UBP_FluidImplementation_C::ShowTraceDebug' has a wrong offset!");
static_assert(offsetof(UBP_FluidImplementation_C, TraceOffsetDownDiff) == 0x0000DC, "Member 'UBP_FluidImplementation_C::TraceOffsetDownDiff' has a wrong offset!");
static_assert(offsetof(UBP_FluidImplementation_C, TraceOffsetDownDiffSpeed) == 0x0000E0, "Member 'UBP_FluidImplementation_C::TraceOffsetDownDiffSpeed' has a wrong offset!");
static_assert(offsetof(UBP_FluidImplementation_C, FluidDrawSize) == 0x0000E4, "Member 'UBP_FluidImplementation_C::FluidDrawSize' has a wrong offset!");
static_assert(offsetof(UBP_FluidImplementation_C, FluidMaxDrawIntensity) == 0x0000E8, "Member 'UBP_FluidImplementation_C::FluidMaxDrawIntensity' has a wrong offset!");
static_assert(offsetof(UBP_FluidImplementation_C, UseFrustumCulling) == 0x0000EC, "Member 'UBP_FluidImplementation_C::UseFrustumCulling' has a wrong offset!");
static_assert(offsetof(UBP_FluidImplementation_C, FluidCullDistance) == 0x0000F0, "Member 'UBP_FluidImplementation_C::FluidCullDistance' has a wrong offset!");
static_assert(offsetof(UBP_FluidImplementation_C, VelocityDeterminesIntensity) == 0x0000F4, "Member 'UBP_FluidImplementation_C::VelocityDeterminesIntensity' has a wrong offset!");
static_assert(offsetof(UBP_FluidImplementation_C, VelocityDivideIntensity) == 0x0000F8, "Member 'UBP_FluidImplementation_C::VelocityDivideIntensity' has a wrong offset!");
static_assert(offsetof(UBP_FluidImplementation_C, FluidMeshTag) == 0x0000FC, "Member 'UBP_FluidImplementation_C::FluidMeshTag' has a wrong offset!");
static_assert(offsetof(UBP_FluidImplementation_C, BonesToDraw) == 0x000108, "Member 'UBP_FluidImplementation_C::BonesToDraw' has a wrong offset!");
static_assert(offsetof(UBP_FluidImplementation_C, MeshComponents) == 0x000118, "Member 'UBP_FluidImplementation_C::MeshComponents' has a wrong offset!");
static_assert(offsetof(UBP_FluidImplementation_C, VelocityBegin) == 0x000128, "Member 'UBP_FluidImplementation_C::VelocityBegin' has a wrong offset!");
static_assert(offsetof(UBP_FluidImplementation_C, DrawMaterialInstanceDynamic) == 0x000130, "Member 'UBP_FluidImplementation_C::DrawMaterialInstanceDynamic' has a wrong offset!");
static_assert(offsetof(UBP_FluidImplementation_C, BoneLocationZOffset) == 0x000138, "Member 'UBP_FluidImplementation_C::BoneLocationZOffset' has a wrong offset!");

}

