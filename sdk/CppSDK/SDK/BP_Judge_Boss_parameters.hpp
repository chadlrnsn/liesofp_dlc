#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Judge_Boss

#include "Basic.hpp"

#include "ProjectP_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_Judge_Boss.BP_Judge_Boss_C.ExecuteUbergraph_BP_Judge_Boss
// 0x0038 (0x0038 - 0x0000)
struct BP_Judge_Boss_C_ExecuteUbergraph_BP_Judge_Boss final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue;          // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	EExecutePin                                   CallFunc_GetActMgrComponentBP_Branches;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULActMgrComponent*                      CallFunc_GetActMgrComponentBP_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_ActionState_PreventFallingDamage_ReturnValue; // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddActionState_ReturnValue;               // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Judge_Boss_C_ExecuteUbergraph_BP_Judge_Boss) == 0x000008, "Wrong alignment on BP_Judge_Boss_C_ExecuteUbergraph_BP_Judge_Boss");
static_assert(sizeof(BP_Judge_Boss_C_ExecuteUbergraph_BP_Judge_Boss) == 0x000038, "Wrong size on BP_Judge_Boss_C_ExecuteUbergraph_BP_Judge_Boss");
static_assert(offsetof(BP_Judge_Boss_C_ExecuteUbergraph_BP_Judge_Boss, EntryPoint) == 0x000000, "Member 'BP_Judge_Boss_C_ExecuteUbergraph_BP_Judge_Boss::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_ExecuteUbergraph_BP_Judge_Boss, CallFunc_Conv_VectorToString_ReturnValue) == 0x000008, "Member 'BP_Judge_Boss_C_ExecuteUbergraph_BP_Judge_Boss::CallFunc_Conv_VectorToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_ExecuteUbergraph_BP_Judge_Boss, CallFunc_GetActMgrComponentBP_Branches) == 0x000018, "Member 'BP_Judge_Boss_C_ExecuteUbergraph_BP_Judge_Boss::CallFunc_GetActMgrComponentBP_Branches' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_ExecuteUbergraph_BP_Judge_Boss, CallFunc_GetActMgrComponentBP_ReturnValue) == 0x000020, "Member 'BP_Judge_Boss_C_ExecuteUbergraph_BP_Judge_Boss::CallFunc_GetActMgrComponentBP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_ExecuteUbergraph_BP_Judge_Boss, K2Node_SwitchEnum_CmpSuccess) == 0x000028, "Member 'BP_Judge_Boss_C_ExecuteUbergraph_BP_Judge_Boss::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_ExecuteUbergraph_BP_Judge_Boss, CallFunc_ActionState_PreventFallingDamage_ReturnValue) == 0x00002C, "Member 'BP_Judge_Boss_C_ExecuteUbergraph_BP_Judge_Boss::CallFunc_ActionState_PreventFallingDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_ExecuteUbergraph_BP_Judge_Boss, CallFunc_AddActionState_ReturnValue) == 0x000034, "Member 'BP_Judge_Boss_C_ExecuteUbergraph_BP_Judge_Boss::CallFunc_AddActionState_ReturnValue' has a wrong offset!");

// Function BP_Judge_Boss.BP_Judge_Boss_C.UserConstructionScript
// 0x009C (0x009C - 0x0000)
struct BP_Judge_Boss_C_UserConstructionScript final
{
public:
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0014(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Judge_Boss_C_UserConstructionScript) == 0x000004, "Wrong alignment on BP_Judge_Boss_C_UserConstructionScript");
static_assert(sizeof(BP_Judge_Boss_C_UserConstructionScript) == 0x00009C, "Wrong size on BP_Judge_Boss_C_UserConstructionScript");
static_assert(offsetof(BP_Judge_Boss_C_UserConstructionScript, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000000, "Member 'BP_Judge_Boss_C_UserConstructionScript::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_UserConstructionScript, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_Judge_Boss_C_UserConstructionScript::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue) == 0x000008, "Member 'BP_Judge_Boss_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_UserConstructionScript, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000014, "Member 'BP_Judge_Boss_C_UserConstructionScript::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");

// Function BP_Judge_Boss.BP_Judge_Boss_C.IK_Trace
// 0x0250 (0x0250 - 0x0000)
struct BP_Judge_Boss_C_IK_Trace final
{
public:
	float                                         TraceDistance;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SocketName;                                        // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FootSize;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Moving;                                            // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Offest;                                            // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Impact;                                            // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          BlockHitBool;                                      // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Socket;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0040(0x0010)(ConstParm, ReferenceParm)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0050(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_BoxTraceSingle_OutHit;                    // 0x0100(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BoxTraceSingle_ReturnValue;               // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x018A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18B[0x1];                                      // 0x018B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0194(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0200(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0218(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAtan2_ReturnValue;                     // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAtan2_ReturnValue_1;                   // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0240(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Judge_Boss_C_IK_Trace) == 0x000010, "Wrong alignment on BP_Judge_Boss_C_IK_Trace");
static_assert(sizeof(BP_Judge_Boss_C_IK_Trace) == 0x000250, "Wrong size on BP_Judge_Boss_C_IK_Trace");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, TraceDistance) == 0x000000, "Member 'BP_Judge_Boss_C_IK_Trace::TraceDistance' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, SocketName) == 0x000004, "Member 'BP_Judge_Boss_C_IK_Trace::SocketName' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, FootSize) == 0x00000C, "Member 'BP_Judge_Boss_C_IK_Trace::FootSize' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, Moving) == 0x000018, "Member 'BP_Judge_Boss_C_IK_Trace::Moving' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, Offest) == 0x00001C, "Member 'BP_Judge_Boss_C_IK_Trace::Offest' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, Impact) == 0x000020, "Member 'BP_Judge_Boss_C_IK_Trace::Impact' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, BlockHitBool) == 0x00002C, "Member 'BP_Judge_Boss_C_IK_Trace::BlockHitBool' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, Socket) == 0x000030, "Member 'BP_Judge_Boss_C_IK_Trace::Socket' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, Distance) == 0x000038, "Member 'BP_Judge_Boss_C_IK_Trace::Distance' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, Temp_object_Variable) == 0x000040, "Member 'BP_Judge_Boss_C_IK_Trace::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_GetSocketTransform_ReturnValue) == 0x000050, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakTransform_Location) == 0x000080, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakTransform_Rotation) == 0x00008C, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakTransform_Scale) == 0x000098, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakRotator_Roll) == 0x0000A4, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakRotator_Pitch) == 0x0000A8, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakRotator_Yaw) == 0x0000AC, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakVector_X) == 0x0000B0, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakVector_Y) == 0x0000B4, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakVector_Z) == 0x0000B8, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_MakeRotator_ReturnValue) == 0x0000BC, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000C8, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakVector_X_1) == 0x0000D4, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakVector_Y_1) == 0x0000D8, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakVector_Z_1) == 0x0000DC, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_MakeVector_ReturnValue) == 0x0000E0, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000EC, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0000F0, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_MakeVector_ReturnValue_1) == 0x0000F4, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BoxTraceSingle_OutHit) == 0x000100, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BoxTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BoxTraceSingle_ReturnValue) == 0x000188, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BoxTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakHitResult_bBlockingHit) == 0x000189, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakHitResult_bInitialOverlap) == 0x00018A, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakHitResult_Time) == 0x00018C, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakHitResult_Distance) == 0x000190, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakHitResult_Location) == 0x000194, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakHitResult_ImpactPoint) == 0x0001A0, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakHitResult_Normal) == 0x0001AC, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakHitResult_ImpactNormal) == 0x0001B8, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakHitResult_PhysMat) == 0x0001C8, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakHitResult_HitActor) == 0x0001D0, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakHitResult_HitComponent) == 0x0001D8, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakHitResult_HitBoneName) == 0x0001E0, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakHitResult_HitItem) == 0x0001E8, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakHitResult_ElementIndex) == 0x0001EC, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakHitResult_FaceIndex) == 0x0001F0, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakHitResult_TraceStart) == 0x0001F4, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakHitResult_TraceEnd) == 0x000200, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakVector_X_2) == 0x00020C, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakVector_Y_2) == 0x000210, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_BreakVector_Z_2) == 0x000214, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000218, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_DegAtan2_ReturnValue) == 0x000224, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_DegAtan2_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_VSize_ReturnValue) == 0x000228, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00022C, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x000230, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_FClamp_ReturnValue) == 0x000234, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_DegAtan2_ReturnValue_1) == 0x000238, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_DegAtan2_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_FClamp_ReturnValue_1) == 0x00023C, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_Trace, CallFunc_MakeRotator_ReturnValue_1) == 0x000240, "Member 'BP_Judge_Boss_C_IK_Trace::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");

// Function BP_Judge_Boss.BP_Judge_Boss_C.IK_UpdateFootOffset 
// 0x0018 (0x0018 - 0x0000)
struct BP_Judge_Boss_C_IK_UpdateFootOffset_ final
{
public:
	float                                         TargetValue;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EffectorVar;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterpSpeed;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EffectorValue;                                     // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Target;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_Constant_ReturnValue;           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Judge_Boss_C_IK_UpdateFootOffset_) == 0x000004, "Wrong alignment on BP_Judge_Boss_C_IK_UpdateFootOffset_");
static_assert(sizeof(BP_Judge_Boss_C_IK_UpdateFootOffset_) == 0x000018, "Wrong size on BP_Judge_Boss_C_IK_UpdateFootOffset_");
static_assert(offsetof(BP_Judge_Boss_C_IK_UpdateFootOffset_, TargetValue) == 0x000000, "Member 'BP_Judge_Boss_C_IK_UpdateFootOffset_::TargetValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_UpdateFootOffset_, EffectorVar) == 0x000004, "Member 'BP_Judge_Boss_C_IK_UpdateFootOffset_::EffectorVar' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_UpdateFootOffset_, InterpSpeed) == 0x000008, "Member 'BP_Judge_Boss_C_IK_UpdateFootOffset_::InterpSpeed' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_UpdateFootOffset_, EffectorValue) == 0x00000C, "Member 'BP_Judge_Boss_C_IK_UpdateFootOffset_::EffectorValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_UpdateFootOffset_, Target) == 0x000010, "Member 'BP_Judge_Boss_C_IK_UpdateFootOffset_::Target' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_UpdateFootOffset_, CallFunc_FInterpTo_Constant_ReturnValue) == 0x000014, "Member 'BP_Judge_Boss_C_IK_UpdateFootOffset_::CallFunc_FInterpTo_Constant_ReturnValue' has a wrong offset!");

// Function BP_Judge_Boss.BP_Judge_Boss_C.IK_UpdateFootRotation
// 0x0040 (0x0040 - 0x0000)
struct BP_Judge_Boss_C_IK_UpdateFootRotation final
{
public:
	struct FRotator                               TargetValue;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               RotationVar;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	float                                         InterpSpeed;                                       // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotatorValue;                                      // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               Target;                                            // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Judge_Boss_C_IK_UpdateFootRotation) == 0x000004, "Wrong alignment on BP_Judge_Boss_C_IK_UpdateFootRotation");
static_assert(sizeof(BP_Judge_Boss_C_IK_UpdateFootRotation) == 0x000040, "Wrong size on BP_Judge_Boss_C_IK_UpdateFootRotation");
static_assert(offsetof(BP_Judge_Boss_C_IK_UpdateFootRotation, TargetValue) == 0x000000, "Member 'BP_Judge_Boss_C_IK_UpdateFootRotation::TargetValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_UpdateFootRotation, RotationVar) == 0x00000C, "Member 'BP_Judge_Boss_C_IK_UpdateFootRotation::RotationVar' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_UpdateFootRotation, InterpSpeed) == 0x000018, "Member 'BP_Judge_Boss_C_IK_UpdateFootRotation::InterpSpeed' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_UpdateFootRotation, RotatorValue) == 0x00001C, "Member 'BP_Judge_Boss_C_IK_UpdateFootRotation::RotatorValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_UpdateFootRotation, Target) == 0x000028, "Member 'BP_Judge_Boss_C_IK_UpdateFootRotation::Target' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_UpdateFootRotation, CallFunc_RInterpTo_ReturnValue) == 0x000034, "Member 'BP_Judge_Boss_C_IK_UpdateFootRotation::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");

// Function BP_Judge_Boss.BP_Judge_Boss_C.IK_AllUpdate
// 0x00F4 (0x00F4 - 0x0000)
struct BP_Judge_Boss_C_IK_AllUpdate final
{
public:
	float                                         InterpSpeed;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Moving;                                            // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnLeftOffset;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnRightOffset;                                 // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ReturnLeftRotator;                                 // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ReturnRightRotator;                                // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         ReturnHipsOffset;                                  // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HipsOffset;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               FootRotator_Right;                                 // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               FootRotator_Left;                                  // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FootOffset_Right;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FootOffset_Left;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IK_Trace_Offest;                          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_IK_Trace_Impact;                          // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IK_Trace_BlockHitBool;                    // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IK_Trace_Offest_1;                        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_IK_Trace_Impact_1;                        // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IK_Trace_BlockHitBool_1;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_IK_UpdateFootRotation_RotatorValue;       // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_IK_UpdateFootRotation_RotatorValue_1;     // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_2;                // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_3;                // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_4;                // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_3;        // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IK_UpdateFootOffset__EffectorValue;       // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_5;                // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IK_UpdateFootOffset__EffectorValue_1;     // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_6;                // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IK_UpdateFootOffset__EffectorValue_2;     // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_7;                // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Judge_Boss_C_IK_AllUpdate) == 0x000004, "Wrong alignment on BP_Judge_Boss_C_IK_AllUpdate");
static_assert(sizeof(BP_Judge_Boss_C_IK_AllUpdate) == 0x0000F4, "Wrong size on BP_Judge_Boss_C_IK_AllUpdate");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, InterpSpeed) == 0x000000, "Member 'BP_Judge_Boss_C_IK_AllUpdate::InterpSpeed' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, Moving) == 0x000004, "Member 'BP_Judge_Boss_C_IK_AllUpdate::Moving' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, ReturnLeftOffset) == 0x000008, "Member 'BP_Judge_Boss_C_IK_AllUpdate::ReturnLeftOffset' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, ReturnRightOffset) == 0x00000C, "Member 'BP_Judge_Boss_C_IK_AllUpdate::ReturnRightOffset' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, ReturnLeftRotator) == 0x000010, "Member 'BP_Judge_Boss_C_IK_AllUpdate::ReturnLeftRotator' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, ReturnRightRotator) == 0x00001C, "Member 'BP_Judge_Boss_C_IK_AllUpdate::ReturnRightRotator' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, ReturnHipsOffset) == 0x000028, "Member 'BP_Judge_Boss_C_IK_AllUpdate::ReturnHipsOffset' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, HipsOffset) == 0x00002C, "Member 'BP_Judge_Boss_C_IK_AllUpdate::HipsOffset' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, FootRotator_Right) == 0x000030, "Member 'BP_Judge_Boss_C_IK_AllUpdate::FootRotator_Right' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, FootRotator_Left) == 0x00003C, "Member 'BP_Judge_Boss_C_IK_AllUpdate::FootRotator_Left' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, FootOffset_Right) == 0x000048, "Member 'BP_Judge_Boss_C_IK_AllUpdate::FootOffset_Right' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, FootOffset_Left) == 0x00004C, "Member 'BP_Judge_Boss_C_IK_AllUpdate::FootOffset_Left' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_FMin_ReturnValue) == 0x000050, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_Less_FloatFloat_ReturnValue) == 0x000054, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_SelectFloat_ReturnValue) == 0x000058, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_IK_Trace_Offest) == 0x00005C, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_IK_Trace_Offest' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_IK_Trace_Impact) == 0x000060, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_IK_Trace_Impact' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_IK_Trace_BlockHitBool) == 0x00006C, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_IK_Trace_BlockHitBool' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_IK_Trace_Offest_1) == 0x000070, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_IK_Trace_Offest_1' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_IK_Trace_Impact_1) == 0x000074, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_IK_Trace_Impact_1' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_IK_Trace_BlockHitBool_1) == 0x000080, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_IK_Trace_BlockHitBool_1' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_IK_UpdateFootRotation_RotatorValue) == 0x000084, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_IK_UpdateFootRotation_RotatorValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_BooleanAND_ReturnValue) == 0x000090, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_IK_UpdateFootRotation_RotatorValue_1) == 0x000094, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_IK_UpdateFootRotation_RotatorValue_1' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0000A0, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x0000A1, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_SelectFloat_ReturnValue_1) == 0x0000A4, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_SelectFloat_ReturnValue_2) == 0x0000A8, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000AC, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000B0, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0000B4, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x0000B8, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_SelectFloat_ReturnValue_3) == 0x0000BC, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_SelectFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x0000C0, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000C4, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_SelectFloat_ReturnValue_4) == 0x0000C8, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_SelectFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_Subtract_FloatFloat_ReturnValue_3) == 0x0000CC, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_Subtract_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_IK_UpdateFootOffset__EffectorValue) == 0x0000D0, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_IK_UpdateFootOffset__EffectorValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_SelectFloat_ReturnValue_5) == 0x0000D4, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_SelectFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000D8, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_IK_UpdateFootOffset__EffectorValue_1) == 0x0000DC, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_IK_UpdateFootOffset__EffectorValue_1' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_SelectFloat_ReturnValue_6) == 0x0000E0, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_SelectFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000E4, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_IK_UpdateFootOffset__EffectorValue_2) == 0x0000E8, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_IK_UpdateFootOffset__EffectorValue_2' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000EC, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_IK_AllUpdate, CallFunc_SelectFloat_ReturnValue_7) == 0x0000F0, "Member 'BP_Judge_Boss_C_IK_AllUpdate::CallFunc_SelectFloat_ReturnValue_7' has a wrong offset!");

// Function BP_Judge_Boss.BP_Judge_Boss_C.OnCanHitOccurDecoMesh
// 0x0180 (0x0180 - 0x0000)
struct BP_Judge_Boss_C_OnCanHitOccurDecoMesh final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Victim;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitResult;                                         // 0x0010(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x00A0(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D2[0x2];                                       // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0120(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CallFunc_AddComponent_ReturnValue;                 // 0x0160(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULEquipmentComponent*                   CallFunc_GetEquipmentComponentBP_ReturnValue;      // 0x0168(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckAngleBetweenActor_ReturnValue;       // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh) == 0x000010, "Wrong alignment on BP_Judge_Boss_C_OnCanHitOccurDecoMesh");
static_assert(sizeof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh) == 0x000180, "Wrong size on BP_Judge_Boss_C_OnCanHitOccurDecoMesh");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, Attacker) == 0x000000, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::Attacker' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, Victim) == 0x000008, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::Victim' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, HitResult) == 0x000010, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::HitResult' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, ReturnValue) == 0x000098, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, Temp_struct_Variable) == 0x0000A0, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, CallFunc_BreakHitResult_bBlockingHit) == 0x0000D0, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000D1, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, CallFunc_BreakHitResult_Time) == 0x0000D4, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, CallFunc_BreakHitResult_Distance) == 0x0000D8, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, CallFunc_BreakHitResult_Location) == 0x0000DC, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, CallFunc_BreakHitResult_ImpactPoint) == 0x0000E8, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, CallFunc_BreakHitResult_Normal) == 0x0000F4, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, CallFunc_BreakHitResult_ImpactNormal) == 0x000100, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, CallFunc_BreakHitResult_PhysMat) == 0x000110, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, CallFunc_BreakHitResult_HitActor) == 0x000118, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, CallFunc_BreakHitResult_HitComponent) == 0x000120, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, CallFunc_BreakHitResult_HitBoneName) == 0x000128, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, CallFunc_BreakHitResult_HitItem) == 0x000130, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, CallFunc_BreakHitResult_ElementIndex) == 0x000134, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, CallFunc_BreakHitResult_FaceIndex) == 0x000138, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, CallFunc_BreakHitResult_TraceStart) == 0x00013C, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, CallFunc_BreakHitResult_TraceEnd) == 0x000148, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000154, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, CallFunc_AddComponent_ReturnValue) == 0x000160, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, CallFunc_GetEquipmentComponentBP_ReturnValue) == 0x000168, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::CallFunc_GetEquipmentComponentBP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, CallFunc_IsValid_ReturnValue) == 0x000170, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Judge_Boss_C_OnCanHitOccurDecoMesh, CallFunc_CheckAngleBetweenActor_ReturnValue) == 0x000171, "Member 'BP_Judge_Boss_C_OnCanHitOccurDecoMesh::CallFunc_CheckAngleBetweenActor_ReturnValue' has a wrong offset!");

}

