#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EasyParticle

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "EasyParticle_structs.hpp"


namespace SDK::Params
{

// Function EasyParticle.EasyParticle.SetPlayParticle
// 0x0001 (0x0001 - 0x0000)
struct EasyParticle_SetPlayParticle final
{
public:
	bool                                          InPlayParticle;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EasyParticle_SetPlayParticle) == 0x000001, "Wrong alignment on EasyParticle_SetPlayParticle");
static_assert(sizeof(EasyParticle_SetPlayParticle) == 0x000001, "Wrong size on EasyParticle_SetPlayParticle");
static_assert(offsetof(EasyParticle_SetPlayParticle, InPlayParticle) == 0x000000, "Member 'EasyParticle_SetPlayParticle::InPlayParticle' has a wrong offset!");

// Function EasyParticle.EasyParticleComponent.CreateRuntimeComponent
// 0x0008 (0x0008 - 0x0000)
struct EasyParticleComponent_CreateRuntimeComponent final
{
public:
	class UEasyParticleComponentRuntime*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EasyParticleComponent_CreateRuntimeComponent) == 0x000008, "Wrong alignment on EasyParticleComponent_CreateRuntimeComponent");
static_assert(sizeof(EasyParticleComponent_CreateRuntimeComponent) == 0x000008, "Wrong size on EasyParticleComponent_CreateRuntimeComponent");
static_assert(offsetof(EasyParticleComponent_CreateRuntimeComponent, ReturnValue) == 0x000000, "Member 'EasyParticleComponent_CreateRuntimeComponent::ReturnValue' has a wrong offset!");

// Function EasyParticle.EasyParticleComponent.GetPriority
// 0x0001 (0x0001 - 0x0000)
struct EasyParticleComponent_GetPriority final
{
public:
	EComponentPriority                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EasyParticleComponent_GetPriority) == 0x000001, "Wrong alignment on EasyParticleComponent_GetPriority");
static_assert(sizeof(EasyParticleComponent_GetPriority) == 0x000001, "Wrong size on EasyParticleComponent_GetPriority");
static_assert(offsetof(EasyParticleComponent_GetPriority, ReturnValue) == 0x000000, "Member 'EasyParticleComponent_GetPriority::ReturnValue' has a wrong offset!");

// Function EasyParticle.EasyParticleComponent.GetTypeName
// 0x0010 (0x0010 - 0x0000)
struct EasyParticleComponent_GetTypeName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EasyParticleComponent_GetTypeName) == 0x000008, "Wrong alignment on EasyParticleComponent_GetTypeName");
static_assert(sizeof(EasyParticleComponent_GetTypeName) == 0x000010, "Wrong size on EasyParticleComponent_GetTypeName");
static_assert(offsetof(EasyParticleComponent_GetTypeName, ReturnValue) == 0x000000, "Member 'EasyParticleComponent_GetTypeName::ReturnValue' has a wrong offset!");

// Function EasyParticle.EasyParticleComponentRuntime.Init
// 0x0038 (0x0038 - 0x0000)
struct EasyParticleComponentRuntime_Init final
{
public:
	struct FGeometry                              AllottedGeometry;                                  // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EasyParticleComponentRuntime_Init) == 0x000004, "Wrong alignment on EasyParticleComponentRuntime_Init");
static_assert(sizeof(EasyParticleComponentRuntime_Init) == 0x000038, "Wrong size on EasyParticleComponentRuntime_Init");
static_assert(offsetof(EasyParticleComponentRuntime_Init, AllottedGeometry) == 0x000000, "Member 'EasyParticleComponentRuntime_Init::AllottedGeometry' has a wrong offset!");

// Function EasyParticle.EasyParticleComponentRuntime.PostTick
// 0x003C (0x003C - 0x0000)
struct EasyParticleComponentRuntime_PostTick final
{
public:
	struct FGeometry                              AllottedGeometry;                                  // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EasyParticleComponentRuntime_PostTick) == 0x000004, "Wrong alignment on EasyParticleComponentRuntime_PostTick");
static_assert(sizeof(EasyParticleComponentRuntime_PostTick) == 0x00003C, "Wrong size on EasyParticleComponentRuntime_PostTick");
static_assert(offsetof(EasyParticleComponentRuntime_PostTick, AllottedGeometry) == 0x000000, "Member 'EasyParticleComponentRuntime_PostTick::AllottedGeometry' has a wrong offset!");
static_assert(offsetof(EasyParticleComponentRuntime_PostTick, InDeltaTime) == 0x000038, "Member 'EasyParticleComponentRuntime_PostTick::InDeltaTime' has a wrong offset!");

// Function EasyParticle.EasyParticleComponentRuntime.Tick
// 0x003C (0x003C - 0x0000)
struct EasyParticleComponentRuntime_Tick final
{
public:
	struct FGeometry                              AllottedGeometry;                                  // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EasyParticleComponentRuntime_Tick) == 0x000004, "Wrong alignment on EasyParticleComponentRuntime_Tick");
static_assert(sizeof(EasyParticleComponentRuntime_Tick) == 0x00003C, "Wrong size on EasyParticleComponentRuntime_Tick");
static_assert(offsetof(EasyParticleComponentRuntime_Tick, AllottedGeometry) == 0x000000, "Member 'EasyParticleComponentRuntime_Tick::AllottedGeometry' has a wrong offset!");
static_assert(offsetof(EasyParticleComponentRuntime_Tick, InDeltaTime) == 0x000038, "Member 'EasyParticleComponentRuntime_Tick::InDeltaTime' has a wrong offset!");

}

